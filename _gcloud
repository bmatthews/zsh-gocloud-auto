
#compdef gcloud
#------------------------------------------------------------
# Description:
#
#  Completion script for Google Cloud SDK
#
#
#------------------------------------------------------------

## Util functions 
## ADD HERE

local -a _first_arguments
_first_arguments=(
  'docker:(DEPRECATED) Enable Docker CLI access to Google Container Registry.'
  'feedback:Provide feedback to the Google Cloud SDK team.'
  'help:Prints detailed help messages for the specified commands.'
  'info:Display information about the current gcloud environment.'
  'init:Initialize or reinitialize gcloud.'
  'version:Print version information for Cloud SDK components.'
  'alpha:(ALPHA) Alpha versions of gcloud commands.'
  'app:Manage your App Engine deployments.'
  'auth:Manage oauth2 credentials for the Google Cloud SDK.'
  'beta:(BETA) Beta versions of gcloud commands.'
  'bigtable:Manage your Cloud Bigtable storage.'
  'builds:Create and manage builds for Google Cloud Build.'
  'components:List, install, update, or remove Google Cloud SDK components.'
  'composer:Create and manage Cloud Composer Environments.'
  'compute:Create and manipulate Google Compute Engine resources.'
  'config:View and edit Cloud SDK properties.'
  'container:Deploy and manage clusters of machines for running containers.'
  'dataflow:Manage Google Cloud Dataflow jobs.'
  'dataproc:Create and manage Google Cloud Dataproc clusters and jobs.'
  'datastore:Manage your Cloud Datastore indexes.'
  'debug:Commands for interacting with the Cloud Debugger.'
  'deployment_manager:Manage deployments of cloud resources.'
  'dns:Manage your Cloud DNS managed-zones and record-sets.'
  'domains:Manage domains for your Google Cloud projects.'
  'endpoints:Create, enable and manage API services.'
  'firebase:Work with Google Firebase.'
  'functions:Manage Google Cloud Functions.'
  'iam:Manage IAM service accounts and keys.'
  'iot:Manage Cloud IoT resources.'
  'kms:Manage cryptographic keys in the cloud.'
  'logging:Manage Stackdriver Logging.'
  'ml:Use Google Cloud machine learning capabilities.'
  'ml_engine:Manage Cloud ML Engine jobs and models.'
  'organizations:Create and manage Google Cloud Platform Organizations.'
  'projects:Create and manage project access policies.'
  'pubsub:Manage Cloud Pub/Sub topics and subscriptions.'
  'redis:Manage Cloud Memorystore Redis resources.'
  'services:List, enable and disable APIs and services.'
  'source:Cloud git repository commands.'
  'spanner:Command groups for Cloud Spanner.'
  'sql:Manage Cloud SQL databases.'
  'topic:gcloud supplementary help.'
)

# common options
common_ops=(
)

# groups
local -a _alpha_arguments
_alpha_arguments=(
	'app:(ALPHA) Manage your App Engine deployments.'
	'auth:(ALPHA) Manage oauth2 credentials for the Google Cloud SDK.'
	'bigtable:(ALPHA) Manage your Cloud Bigtable storage.'
	'billing:(ALPHA) Manage billing accounts and associate them with projects.'
	'builds:(ALPHA) Create and manage builds for Google Cloud Build.'
	'cloud_shell:(ALPHA) Manage Google Cloud Shell.'
	'compute:(ALPHA) Create and manipulate Google Compute Engine resources.'
	'config:(ALPHA) View and edit Cloud SDK properties.'
	'container:(ALPHA) Deploy and manage clusters of machines for running
containers.'
	'dataflow:(ALPHA) Read and manipulate Google Dataflow resources.'
	'datastore:(ALPHA) Manage your Cloud Datastore indexes.'
	'deployment_manager:(ALPHA) Manage deployments of cloud resources.'
	'dlp:(ALPHA) Manage sensitive data with Cloud Data Loss Prevention.'
	'emulators:(ALPHA) Set up your local development environment using emulators.'
	'endpoints:(ALPHA) Create, enable and manage API services.'
	'filestore:(ALPHA) Create and manipulate Cloud Filestore resources.'
	'firebase:(ALPHA) Work with Google Firebase.'
	'firestore:(ALPHA) Manage your Cloud Firestore imports and exports.'
	'functions:(ALPHA) Manage Google Cloud Functions.'
	'genomics:(ALPHA) Manage Genomics resources using version 1 of the API.'
	'iam:(ALPHA) Manage IAM service accounts and keys.'
	'iot:(ALPHA) Manage Cloud IoT resources.'
	'kms:(ALPHA) Manage cryptographic keys in the cloud.'
	'ml:(ALPHA) Use Google Cloud machine learning capabilities.'
	'ml_engine:(ALPHA) Manage Cloud ML Engine jobs and models.'
	'monitoring:(ALPHA) Manage Stackdriver Monitoring alerting policies and
notification channels.'
	'organizations:(ALPHA) Create and manage Google Cloud Platform Organizations.'
	'projects:(ALPHA) Create and manage project access policies.'
	'pubsub:(ALPHA) Manage Cloud Pub/Sub topics and subscriptions.'
	'redis:(ALPHA) Manage Cloud Memorystore Redis resources.'
	'resource_manager:(ALPHA) Manage Cloud Resources.'
	'resources:(ALPHA) List and search resources accessible from your account.'
	'scheduler:(ALPHA) Manage Cloud Scheduler jobs and schedules.'
	'services:(ALPHA) List, enable and disable APIs and services.'
	'source:(ALPHA) Cloud git repository commands.'
	'spanner:(ALPHA) Command groups for Cloud Spanner.'
	'sql:(ALPHA) Create and manage Google Cloud SQL databases.'
	'tasks:(ALPHA) Manage Cloud Tasks queues and tasks.'
	'init:(ALPHA) Initialize or reinitialize gcloud.'
	'interactive:(ALPHA) Start the gcloud interactive shell.'
	'search_help:(ALPHA) Search the help text of gcloud commands.'
)

# groups
local -a _app_arguments
_app_arguments=(
	'domain_mappings:(ALPHA) View and manage your App Engine domain mappings.'
	'ssl_certificates:(ALPHA) View and manage your App Engine SSL certificates.'
	'update:(ALPHA) Updates an App Engine application.'
)

# groups
local -a _domain_mappings_arguments
_domain_mappings_arguments=(
	'create:(ALPHA) Creates a domain mapping.'
	'delete:(ALPHA) Deletes a specified domain mapping.'
	'describe:(ALPHA) Describes a specified domain mapping.'
	'list:(ALPHA) Lists domain mappings.'
	'update:(ALPHA) Updates a domain mapping.'
)

# groups

__auto-domain_mappings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) View and manage your App Engine domain mappings." _domain_mappings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _ssl_certificates_arguments
_ssl_certificates_arguments=(
	'create:(ALPHA) Uploads a new SSL certificate.'
	'delete:(ALPHA) Deletes an SSL certificate.'
	'describe:(ALPHA) Describes a specified SSL certificate.'
	'list:(ALPHA)'
	'update:(ALPHA) Updates an SSL certificate.'
)

# groups

__auto-ssl_certificates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) View and manage your App Engine SSL certificates." _ssl_certificates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-app ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage your App Engine deployments." _app_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (domain_mappings)
      __auto-domain_mappings
      ;;
      (ssl_certificates)
      __auto-ssl_certificates
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _auth_arguments
_auth_arguments=(
	'activate_service_account:(ALPHA) Authorize access to Google Cloud Platform with a service
account.'
	'configure_docker:(ALPHA) Register gcloud as a Docker credential helper.'
	'list:(ALPHA) Lists credentialed accounts.'
	'login:(ALPHA) Authorize gcloud to access the Cloud Platform with Google
user credentials.'
	'revoke:(ALPHA) Revoke access credentials for an account.'
)

# groups

__auto-auth ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage oauth2 credentials for the Google Cloud SDK." _auth_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (activate_service_account)
      __auto-activate_service_account
      ;;
      (configure_docker)
      __auto-configure_docker
      ;;
      (list)
      __auto-list
      ;;
      (login)
      __auto-login
      ;;
      (revoke)
      __auto-revoke
      ;;
    esac
    ;;
	esac
}

local -a _bigtable_arguments
_bigtable_arguments=(
	'app_profiles:(ALPHA) Manage Cloud Bigtable app_profiles.'
	'clusters:(ALPHA) Manage Cloud Bigtable clusters.'
	'instances:(ALPHA) Manage Cloud Bigtable instances.'
)

# groups
local -a _app_profiles_arguments
_app_profiles_arguments=(
	'create:(ALPHA) Create a new Bigtable app_profile.'
	'delete:(ALPHA) Delete a Bigtable app-profile.'
	'describe:(ALPHA) Describe an existing Bigtable app-profile.'
	'list:(ALPHA) List Bigtable app-profiles.'
	'update:(ALPHA) Update a Bigtable app_profile.'
)

# groups

__auto-app_profiles ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Bigtable app_profiles." _app_profiles_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _clusters_arguments
_clusters_arguments=(
	'create:(ALPHA) Create a bigtable cluster.'
	'delete:(ALPHA) Delete a bigtable cluster.'
	'describe:(ALPHA) Describe an existing Bigtable cluster.'
	'list:(ALPHA) List existing Bigtable clusters.'
	'update:(ALPHA) Update a Bigtable cluster&#39;s number of nodes.'
)

# groups

__auto-clusters ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Bigtable clusters." _clusters_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'add_iam_policy_binding:(ALPHA) Add an IAM policy binding to a Cloud Bigtable instance.'
	'create:(ALPHA) Create a new Bigtable instance.'
	'delete:(ALPHA) Delete an existing Bigtable instance.'
	'describe:(ALPHA) Describe an existing Bigtable instance.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Cloud Bigtable instance.'
	'list:(ALPHA) List existing Bigtable instances.'
	'remove_iam_policy_binding:(ALPHA) Remove an IAM policy binding from a Cloud Bigtable
instance.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Cloud Bigtable instance.'
	'update:(ALPHA) Modify an existing Bigtable instance.'
	'upgrade:(ALPHA) Upgrade an existing instance&#39;s type from development to
production.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Bigtable instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
      (upgrade)
      __auto-upgrade
      ;;
    esac
    ;;
	esac
}


__auto-bigtable ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage your Cloud Bigtable storage." _bigtable_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (app_profiles)
      __auto-app_profiles
      ;;
      (clusters)
      __auto-clusters
      ;;
      (instances)
      __auto-instances
      ;;
    esac
    ;;
	esac
}

local -a _billing_arguments
_billing_arguments=(
	'accounts:(ALPHA) Manage billing accounts.'
	'projects:(ALPHA) Manage the billing account configuration of your projects.'
)

# groups
local -a _accounts_arguments
_accounts_arguments=(
	'projects:(ALPHA) (DEPRECATED) Manage the billing account
configuration of your projects.'
	'describe:(ALPHA) Show metadata for a billing account.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Cloud Billing account.'
	'list:(ALPHA) List all active billing accounts.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Cloud Billing account.'
)

# groups
local -a _projects_arguments
_projects_arguments=(
	'describe:(ALPHA) (DEPRECATED) Show detailed billing information
for a project.'
	'link:(ALPHA) (DEPRECATED) Link a project with a billing
account.'
	'list:(ALPHA) (DEPRECATED) List all active projects
associated with the specified billing account.'
	'unlink:(ALPHA) (DEPRECATED) Unlink the account (if any)
linked with a project.'
)

# groups

__auto-projects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) (DEPRECATED) Manage the billing account
configuration of your projects." _projects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (link)
      __auto-link
      ;;
      (list)
      __auto-list
      ;;
      (unlink)
      __auto-unlink
      ;;
    esac
    ;;
	esac
}


__auto-accounts ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage billing accounts." _accounts_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (projects)
      __auto-projects
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _projects_arguments
_projects_arguments=(
	'describe:(ALPHA) Show detailed billing information for a project.'
	'link:(ALPHA) Link a project with a billing account.'
	'list:(ALPHA) List all active projects associated with the specified
billing account.'
	'unlink:(ALPHA) Unlink the account (if any) linked with a project.'
)

# groups

__auto-projects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage the billing account configuration of your projects." _projects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (link)
      __auto-link
      ;;
      (list)
      __auto-list
      ;;
      (unlink)
      __auto-unlink
      ;;
    esac
    ;;
	esac
}


__auto-billing ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage billing accounts and associate them with projects." _billing_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (accounts)
      __auto-accounts
      ;;
      (projects)
      __auto-projects
      ;;
    esac
    ;;
	esac
}

local -a _builds_arguments
_builds_arguments=(
	'cancel:(ALPHA) Cancel an ongoing build.'
	'describe:(ALPHA) Get information about a particular build.'
	'list:(ALPHA) List builds.'
	'log:(ALPHA) Stream the logs for a build.'
	'submit:(ALPHA) Submit a build using Google Cloud Build.'
)

# groups

__auto-builds ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage builds for Google Cloud Build." _builds_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (log)
      __auto-log
      ;;
      (submit)
      __auto-submit
      ;;
    esac
    ;;
	esac
}

local -a _cloud_shell_arguments
_cloud_shell_arguments=(
	'get_mount_command:(ALPHA) Prints a command to mount the Cloud Shell home directory
via sshfs.'
	'scp:(ALPHA) Copies files between Cloud Shell and the local machine.'
	'ssh:(ALPHA) Allows you to establish an interactive SSH session with
Cloud Shell.'
)

# groups

__auto-cloud_shell ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Google Cloud Shell." _cloud_shell_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (get_mount_command)
      __auto-get_mount_command
      ;;
      (scp)
      __auto-scp
      ;;
      (ssh)
      __auto-ssh
      ;;
    esac
    ;;
	esac
}

local -a _compute_arguments
_compute_arguments=(
	'accelerator_types:(ALPHA) Read Google Compute Engine accelerator types.'
	'addresses:(ALPHA) Read and manipulate Google Compute Engine addresses.'
	'backend_buckets:(ALPHA) Read and manipulate backend buckets.'
	'backend_services:(ALPHA) List, create, and delete backend services.'
	'commitments:(ALPHA) Manage Google Compute Engine commitments.'
	'disk_types:(ALPHA) Read Google Compute Engine virtual disk types.'
	'disks:(ALPHA) Read and manipulate Google Compute Engine disks.'
	'firewall_rules:(ALPHA) List, create, update, and delete Google Compute Engine
firewall rules.'
	'forwarding_rules:(ALPHA) Read and manipulate traffic forwarding rules to network
load balancers.'
	'health_checks:(ALPHA) Read and manipulate health checks for load balanced
instances.'
	'http_health_checks:(ALPHA) Read and manipulate HTTP health checks for load balanced
instances.'
	'https_health_checks:(ALPHA) Read and manipulate HTTPS health checks for load balanced
instances.'
	'images:(ALPHA) List, create, and delete Google Compute Engine images.'
	'instance_groups:(ALPHA) Read and manipulate Google Compute Engine instance groups.'
	'instance_templates:(ALPHA) Read and manipulate Google Compute Engine instances
templates.'
	'instances:(ALPHA) Read and manipulate Google Compute Engine virtual machine
instances.'
	'interconnects:(ALPHA) Read and manipulate Google Compute Engine interconnects.'
	'machine_types:(ALPHA) Read Google Compute Engine virtual machine types.'
	'network_endpoint_groups:(ALPHA) Read and manipulate Google Compute Engine network endpoint
groups.'
	'networks:(ALPHA) List, create, and delete Google Compute Engine networks.'
	'operations:(ALPHA) Read and manipulate Google Compute Engine operations.'
	'os_login:(ALPHA) Create and manipulate Google Compute Engine OS Login
resources.'
	'project_info:(ALPHA) Read and manipulate project-level data like quotas and
metadata.'
	'regions:(ALPHA) List Google Compute Engine regions.'
	'resource_policies:(ALPHA) Manage Google Compute Engine Resource Policies.'
	'rolling_updates:(ALPHA) (DEPRECATED) Manage updates in a managed
instance group.'
	'routers:(ALPHA) List, create, and delete Google Compute Engine routers.'
	'routes:(ALPHA) Read and manipulate routes.'
	'security_policies:(ALPHA) Read and manipulate Google Compute Engine security
policies. Security policies are used to control access to Google Cloud
HTTP/HTTPS load balancers.'
	'shared_vpc:(ALPHA) Configure shared VPC.'
	'snapshots:(ALPHA) List, describe, and delete Google Compute Engine snapshots.'
	'sole_tenancy:(ALPHA) Read and manage Google Compute Engine sole-tenancy
resources.'
	'ssl_certificates:(ALPHA) List, create, and delete Google Compute Engine SSL
certificates.'
	'ssl_policies:(ALPHA) List, create, delete and update Google Compute Engine SSL
policies.'
	'target_http_proxies:(ALPHA) List, create, and delete target HTTP proxies.'
	'target_https_proxies:(ALPHA) List, create, and delete target HTTPS proxies.'
	'target_instances:(ALPHA) Read and manipulate Google Compute Engine virtual target
instances.'
	'target_pools:(ALPHA) Control Compute Engine target pools for network load
balancing.'
	'target_ssl_proxies:(ALPHA) List, create, and delete target SSL proxies.'
	'target_tcp_proxies:(ALPHA) List, create, and delete target TCP proxies.'
	'target_vpn_gateways:(ALPHA) Read and manipulate Google Compute Engine VPN Gateways.'
	'tpus:(ALPHA) List, create, and delete Cloud TPUs.'
	'url_maps:(ALPHA) List, create, and delete URL maps.'
	'vpn_tunnels:(ALPHA) Read and manipulate Google Compute Engine VPN Tunnels.'
	'zones:(ALPHA) List Google Compute Engine zones.'
	'config_ssh:(ALPHA) Populate SSH config files with Host entries from each
instance.'
	'connect_to_serial_port:(ALPHA) Connect to the serial port of an instance.'
	'copy_files:(ALPHA) (DEPRECATED) Copy files to and from Google
Compute Engine virtual machines via scp.'
	'reset_windows_password:(ALPHA) Reset and return a password for a Windows machine instance.'
	'scp:(ALPHA) Copy files to and from Google Compute Engine virtual
machines via scp.'
	'sign_url:(ALPHA) Sign specified URL for use with Cloud CDN Signed URLs.'
	'ssh:(ALPHA) SSH into a virtual machine instance.'
)

# groups
local -a _accelerator_types_arguments
_accelerator_types_arguments=(
	'describe:(ALPHA) Describe Google Compute Engine accelerator types.'
	'list:(ALPHA) List Google Compute Engine accelerator types.'
)

# groups

__auto-accelerator_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read Google Compute Engine accelerator types." _accelerator_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _addresses_arguments
_addresses_arguments=(
	'create:(ALPHA) Reserve IP addresses.'
	'delete:(ALPHA) Release reserved IP addresses.'
	'describe:(ALPHA) Display detailed information about an address.'
	'list:(ALPHA) List addresses.'
	'update:(ALPHA) Update a Google Compute Engine address.'
)

# groups

__auto-addresses ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine addresses." _addresses_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _backend_buckets_arguments
_backend_buckets_arguments=(
	'add_signed_url_key:(ALPHA) Add Cloud CDN Signed URL key to a backend bucket.'
	'create:(ALPHA) Create a backend bucket.'
	'delete:(ALPHA) Delete backend buckets.'
	'delete_signed_url_key:(ALPHA) Delete Cloud CDN Signed URL key from a backend bucket.'
	'describe:(ALPHA) Describe a backend bucket.'
	'list:(ALPHA) List Google Compute Engine backend buckets.'
	'update:(ALPHA) Update a backend bucket.'
)

# groups

__auto-backend_buckets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate backend buckets." _backend_buckets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_signed_url_key)
      __auto-add_signed_url_key
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_signed_url_key)
      __auto-delete_signed_url_key
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _backend_services_arguments
_backend_services_arguments=(
	'add_backend:(ALPHA) Add a backend to a backend service.'
	'add_signed_url_key:(ALPHA) Add Cloud CDN Signed URL key to a backend service.'
	'create:(ALPHA) Create a backend service.'
	'delete:(ALPHA) Delete backend services.'
	'delete_signed_url_key:(ALPHA) Delete Cloud CDN Signed URL key from a backend service.'
	'describe:(ALPHA) Display detailed information about a backend service.'
	'edit:(ALPHA) Modify backend services.'
	'get_health:(ALPHA) Get backend health statuses from a backend service.'
	'list:(ALPHA) List Google Compute Engine backend services.'
	'remove_backend:(ALPHA) Remove a backend from a backend service.'
	'set_security_policy:(ALPHA) (DEPRECATED) Set the security policy for a
backend service.'
	'update:(ALPHA) Update a backend service.'
	'update_backend:(ALPHA) Update an existing backend in a backend service.'
)

# groups

__auto-backend_services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete backend services." _backend_services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_backend)
      __auto-add_backend
      ;;
      (add_signed_url_key)
      __auto-add_signed_url_key
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_signed_url_key)
      __auto-delete_signed_url_key
      ;;
      (describe)
      __auto-describe
      ;;
      (edit)
      __auto-edit
      ;;
      (get_health)
      __auto-get_health
      ;;
      (list)
      __auto-list
      ;;
      (remove_backend)
      __auto-remove_backend
      ;;
      (set_security_policy)
      __auto-set_security_policy
      ;;
      (update)
      __auto-update
      ;;
      (update_backend)
      __auto-update_backend
      ;;
    esac
    ;;
	esac
}

local -a _commitments_arguments
_commitments_arguments=(
	'create:(ALPHA) Create Google Compute Engine commitments.'
	'describe:(ALPHA) Describe a Google Compute Engine commitment.'
	'list:(ALPHA) List Google Compute Engine commitments.'
)

# groups

__auto-commitments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Google Compute Engine commitments." _commitments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _disk_types_arguments
_disk_types_arguments=(
	'describe:(ALPHA) Describe a Google Compute Engine disk type.'
	'list:(ALPHA) List Google Compute Engine disk types.'
)

# groups

__auto-disk_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read Google Compute Engine virtual disk types." _disk_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _disks_arguments
_disks_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a disk.'
	'add_labels:(ALPHA) Add labels to Google Compute Engine persistent disks.'
	'add_resource_policies:(ALPHA) Add resource policies to a Google Compute Engine disk.'
	'create:(ALPHA) Create Google Compute Engine persistent disks.'
	'delete:(ALPHA) Delete Google Compute Engine persistent disks.'
	'describe:(ALPHA) Describe a Google Compute Engine disk.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Google Compute Engine disk.'
	'list:(ALPHA) List Google Compute Engine disks.'
	'move:(ALPHA) Move a disk between zones.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a disk.'
	'remove_labels:(ALPHA) Remove labels from Google Compute Engine persistent disks.'
	'remove_resource_policies:(ALPHA) Remove resource policies from a Google Compute Engine disk.'
	'resize:(ALPHA) Resize a disk or disks.'
	'set_iam_policy:(ALPHA) Set IAM policy for a disk.'
	'snapshot:(ALPHA) Create snapshots of Google Compute Engine persistent disks.'
	'update:(ALPHA) Update a Google Compute Engine persistent disk.'
)

# groups

__auto-disks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine disks." _disks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (add_labels)
      __auto-add_labels
      ;;
      (add_resource_policies)
      __auto-add_resource_policies
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (move)
      __auto-move
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (remove_resource_policies)
      __auto-remove_resource_policies
      ;;
      (resize)
      __auto-resize
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (snapshot)
      __auto-snapshot
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _firewall_rules_arguments
_firewall_rules_arguments=(
	'create:(ALPHA) Create a Google Compute Engine firewall rule.'
	'delete:(ALPHA) Delete Google Compute Engine firewall rules.'
	'describe:(ALPHA) Describe a Google Compute Engine firewall rule.'
	'list:(ALPHA) List Google Compute Engine firewall rules.'
	'update:(ALPHA) Update a firewall rule.'
)

# groups

__auto-firewall_rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, update, and delete Google Compute Engine
firewall rules." _firewall_rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _forwarding_rules_arguments
_forwarding_rules_arguments=(
	'create:(ALPHA) Create a forwarding rule to direct network traffic to a
load balancer.'
	'delete:(ALPHA) Delete forwarding rules.'
	'describe:(ALPHA) Display detailed information about a forwarding rule.'
	'list:(ALPHA) List Google Compute Engine forwarding rules.'
	'set_target:(ALPHA) Modify a forwarding rule to direct network traffic to a new
target.'
	'update:(ALPHA) Update a Google Compute Engine forwarding rule.'
)

# groups

__auto-forwarding_rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate traffic forwarding rules to network
load balancers." _forwarding_rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (set_target)
      __auto-set_target
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _health_checks_arguments
_health_checks_arguments=(
	'create:(ALPHA) Create health checks for load balanced instances.'
	'update:(ALPHA) Update health checks for load balanced instances.'
	'delete:(ALPHA) Delete health checks.'
	'describe:(ALPHA) Display detailed information about a health check.'
	'list:(ALPHA) List Google Compute Engine health checks.'
)

# groups
local -a _create_arguments
_create_arguments=(
	'http:(ALPHA) Create a HTTP health check to monitor load balanced
instances.'
	'http2:(ALPHA) Create a HTTP2 health check to monitor load balanced
instances.'
	'https:(ALPHA) Create a HTTPS health check to monitor load balanced
instances.'
	'ssl:(ALPHA) Create a SSL health check to monitor load balanced
instances.'
	'tcp:(ALPHA) Create a TCP health check to monitor load balanced
instances.'
)

# groups

__auto-create ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create health checks for load balanced instances." _create_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (http)
      __auto-http
      ;;
      (http2)
      __auto-http2
      ;;
      (https)
      __auto-https
      ;;
      (ssl)
      __auto-ssl
      ;;
      (tcp)
      __auto-tcp
      ;;
    esac
    ;;
	esac
}

local -a _update_arguments
_update_arguments=(
	'http:(ALPHA) Update a HTTP health check.'
	'http2:(ALPHA) Update a HTTP2 health check.'
	'https:(ALPHA) Update a HTTPS health check.'
	'ssl:(ALPHA) Update a SSL health check.'
	'tcp:(ALPHA) Update a TCP health check.'
)

# groups

__auto-update ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Update health checks for load balanced instances." _update_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (http)
      __auto-http
      ;;
      (http2)
      __auto-http2
      ;;
      (https)
      __auto-https
      ;;
      (ssl)
      __auto-ssl
      ;;
      (tcp)
      __auto-tcp
      ;;
    esac
    ;;
	esac
}


__auto-health_checks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate health checks for load balanced
instances." _health_checks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (update)
      __auto-update
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _http_health_checks_arguments
_http_health_checks_arguments=(
	'create:(ALPHA) Create an HTTP health check to monitor load balanced
instances.'
	'delete:(ALPHA) Delete HTTP health checks.'
	'describe:(ALPHA) Display detailed information about an HTTP health check.'
	'list:(ALPHA) List Google Compute Engine health checks.'
	'update:(ALPHA) Update an HTTP health check.'
)

# groups

__auto-http_health_checks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate HTTP health checks for load balanced
instances." _http_health_checks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _https_health_checks_arguments
_https_health_checks_arguments=(
	'create:(ALPHA) Create an HTTPS health check to monitor load balanced
instances.'
	'delete:(ALPHA) Delete HTTPS health checks.'
	'describe:(ALPHA) Display detailed information about an HTTPS health check.'
	'list:(ALPHA) List Google Compute Engine HTTPS health checks.'
	'update:(ALPHA) Update an HTTPS health check.'
)

# groups

__auto-https_health_checks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate HTTPS health checks for load balanced
instances." _https_health_checks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _images_arguments
_images_arguments=(
	'packages:(ALPHA) List and diff image packages.'
	'vulnerabilities:(ALPHA) List and describe image vulnerabilities and related notes.'
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for an image.'
	'add_labels:(ALPHA) Add labels to Google Compute Engine images.'
	'create:(ALPHA) Create Google Compute Engine images.'
	'delete:(ALPHA) Delete Google Compute Engine images.'
	'deprecate:(ALPHA) Manage deprecation status of Google Compute Engine images.'
	'describe:(ALPHA) Describe a Google Compute Engine image.'
	'describe_from_family:(ALPHA) Describe the latest image from an image family.'
	'export:(ALPHA) Export a Google Compute Engine image.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Google Compute Engine image.'
	'import:(ALPHA) Import an image into Google Compute Engine.'
	'list:(ALPHA) List Google Compute Engine images.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for an image.'
	'remove_labels:(ALPHA) Remove labels from Google Compute Engine images.'
	'set_iam_policy:(ALPHA) Set IAM policy for a disk image.'
	'update:(ALPHA) Update a Google Compute Engine image.'
)

# groups
local -a _packages_arguments
_packages_arguments=(
	'diff:(ALPHA) Displays the version differences of packages between two
images.'
	'list:(ALPHA) List the packages in an image.'
)

# groups

__auto-packages ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List and diff image packages." _packages_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (diff)
      __auto-diff
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _vulnerabilities_arguments
_vulnerabilities_arguments=(
	'describe_note:(ALPHA) Describe a Google Compute Engine image.'
	'list:(ALPHA) List Google occurrences of PACKAGE_VULNERABILITY.'
)

# groups

__auto-vulnerabilities ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List and describe image vulnerabilities and related notes." _vulnerabilities_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe_note)
      __auto-describe_note
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-images ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete Google Compute Engine images." _images_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (packages)
      __auto-packages
      ;;
      (vulnerabilities)
      __auto-vulnerabilities
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (add_labels)
      __auto-add_labels
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (deprecate)
      __auto-deprecate
      ;;
      (describe)
      __auto-describe
      ;;
      (describe_from_family)
      __auto-describe_from_family
      ;;
      (export)
      __auto-export
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _instance_groups_arguments
_instance_groups_arguments=(
	'managed:(ALPHA) Read and manipulate Google Compute Engine managed instance
groups.'
	'unmanaged:(ALPHA) Read and manipulate Google Compute Engine unmanaged
instance group.'
	'describe:(ALPHA) Display detailed information about an instance group.'
	'get_named_ports:(ALPHA) Lists the named ports for an instance group resource.'
	'list:(ALPHA) List Google Compute Engine instance groups.'
	'list_instances:(ALPHA) List instances present in the instance group.'
	'set_named_ports:(ALPHA) Sets the list of named ports for an instance group.'
)

# groups
local -a _managed_arguments
_managed_arguments=(
	'instance_configs:(ALPHA) Manage instance-specific settings of managed instance
group.'
	'rolling_action:(ALPHA) Manipulate rolling actions on Google Compute Engine managed
instance groups.'
	'abandon_instances:(ALPHA) Abandon instances owned by a managed instance group.'
	'create:(ALPHA) Create a Compute Engine managed instance group.'
	'delete:(ALPHA) Delete Google Compute Engine managed instance groups.'
	'delete_instances:(ALPHA) Delete instances managed by managed instance group.'
	'describe:(ALPHA) Display detailed information about an instance group.'
	'export_autoscaling:(ALPHA) Export autoscaling parameters of a managed instance group.'
	'get_named_ports:(ALPHA) Lists the named ports for an instance group resource.'
	'list:(ALPHA) List Google Compute Engine managed instance groups.'
	'list_instances:(ALPHA) List instances present in the managed instance group.'
	'recreate_instances:(ALPHA) Recreate instances managed by a managed instance group.'
	'resize:(ALPHA) Set managed instance group size.'
	'set_autohealing:(ALPHA) Set autohealing policy for managed instance group.'
	'set_autoscaling:(ALPHA) Set autoscaling parameters of a managed instance group.'
	'set_instance_template:(ALPHA) Set instance template for managed instance group.'
	'set_named_ports:(ALPHA) Sets the list of named ports for an instance group.'
	'set_target_pools:(ALPHA) Set target pools of managed instance group.'
	'stop_autoscaling:(ALPHA) Stop autoscaling a managed instance group.'
	'update:(ALPHA) Update Google Compute Engine managed instance groups.'
	'update_autoscaling:(ALPHA) Update autoscaling parameters of a managed instance group.'
	'wait_until_stable:(ALPHA) Waits until state of managed instance group is stable.'
)

# groups
local -a _instance_configs_arguments
_instance_configs_arguments=(
	'create:(ALPHA) Create per instance config for managed instance group.'
	'delete:(ALPHA) Delete per instance configs from managed instance group.'
	'list:(ALPHA) List per instance configs of a managed instance group.'
	'update:(ALPHA) Update per instance config of a managed instance group.'
)

# groups

__auto-instance_configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage instance-specific settings of managed instance
group." _instance_configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _rolling_action_arguments
_rolling_action_arguments=(
	'replace:(ALPHA) Replaces instances in a managed instance group.'
	'restart:(ALPHA) Restarts instances in a managed instance group.'
	'start_update:(ALPHA) Updates instances in a managed instance group.'
	'stop_proactive_update:(ALPHA) Stop the proactive update process of managed instance
group.'
)

# groups

__auto-rolling_action ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manipulate rolling actions on Google Compute Engine managed
instance groups." _rolling_action_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (replace)
      __auto-replace
      ;;
      (restart)
      __auto-restart
      ;;
      (start_update)
      __auto-start_update
      ;;
      (stop_proactive_update)
      __auto-stop_proactive_update
      ;;
    esac
    ;;
	esac
}


__auto-managed ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine managed instance
groups." _managed_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (instance_configs)
      __auto-instance_configs
      ;;
      (rolling_action)
      __auto-rolling_action
      ;;
      (abandon_instances)
      __auto-abandon_instances
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_instances)
      __auto-delete_instances
      ;;
      (describe)
      __auto-describe
      ;;
      (export_autoscaling)
      __auto-export_autoscaling
      ;;
      (get_named_ports)
      __auto-get_named_ports
      ;;
      (list)
      __auto-list
      ;;
      (list_instances)
      __auto-list_instances
      ;;
      (recreate_instances)
      __auto-recreate_instances
      ;;
      (resize)
      __auto-resize
      ;;
      (set_autohealing)
      __auto-set_autohealing
      ;;
      (set_autoscaling)
      __auto-set_autoscaling
      ;;
      (set_instance_template)
      __auto-set_instance_template
      ;;
      (set_named_ports)
      __auto-set_named_ports
      ;;
      (set_target_pools)
      __auto-set_target_pools
      ;;
      (stop_autoscaling)
      __auto-stop_autoscaling
      ;;
      (update)
      __auto-update
      ;;
      (update_autoscaling)
      __auto-update_autoscaling
      ;;
      (wait_until_stable)
      __auto-wait_until_stable
      ;;
    esac
    ;;
	esac
}

local -a _unmanaged_arguments
_unmanaged_arguments=(
	'add_instances:(ALPHA) Adds instances to an unmanaged instance group by name.'
	'create:(ALPHA) Create a Compute Engine unmanaged instance group.'
	'delete:(ALPHA) Delete Google Compute Engine unmanaged instance groups.'
	'describe:(ALPHA) Describe an instance group.'
	'get_named_ports:(ALPHA) Lists the named ports for an instance group resource.'
	'list:(ALPHA) List Google Compute Engine unmanaged instance groups.'
	'list_instances:(ALPHA) List instances present in the instance group.'
	'remove_instances:(ALPHA) Removes resources from an unmanaged instance group by
instance name.'
	'set_named_ports:(ALPHA) Sets the list of named ports for an instance group.'
)

# groups

__auto-unmanaged ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine unmanaged
instance group." _unmanaged_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_instances)
      __auto-add_instances
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_named_ports)
      __auto-get_named_ports
      ;;
      (list)
      __auto-list
      ;;
      (list_instances)
      __auto-list_instances
      ;;
      (remove_instances)
      __auto-remove_instances
      ;;
      (set_named_ports)
      __auto-set_named_ports
      ;;
    esac
    ;;
	esac
}


__auto-instance_groups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine instance groups." _instance_groups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (managed)
      __auto-managed
      ;;
      (unmanaged)
      __auto-unmanaged
      ;;
      (describe)
      __auto-describe
      ;;
      (get_named_ports)
      __auto-get_named_ports
      ;;
      (list)
      __auto-list
      ;;
      (list_instances)
      __auto-list_instances
      ;;
      (set_named_ports)
      __auto-set_named_ports
      ;;
    esac
    ;;
	esac
}

local -a _instance_templates_arguments
_instance_templates_arguments=(
	'add_iam_policy_binding:(ALPHA) Add an IAM policy binding to an instance template.'
	'create:(ALPHA) Create a Compute Engine virtual machine instance template.'
	'create_with_container:(ALPHA) Creates Google Compute Engine virtual machine instance
template running Docker images.'
	'delete:(ALPHA) Delete Google Compute Engine virtual machine instance
templates.'
	'describe:(ALPHA) Describe a virtual machine instance template.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Google Compute Engine instance
template.'
	'list:(ALPHA) List Google Compute Engine instance templates.'
	'remove_iam_policy_binding:(ALPHA) Remove an IAM policy binding from an instance template.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Google Compute Engine instance
template.'
)

# groups

__auto-instance_templates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine instances
templates." _instance_templates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (create_with_container)
      __auto-create_with_container
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'network_interfaces:(ALPHA) Read and manipulate Google Compute Engine instance network
interfaces.'
	'add_access_config:(ALPHA) Create a Google Compute Engine virtual machine access
configuration.'
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for an instance.'
	'add_labels:(ALPHA) Add labels to Google Compute Engine virtual machine
instances.'
	'add_metadata:(ALPHA) Add or update instance metadata.'
	'add_resource_policies:(ALPHA) Add resource policies to Google Compute Engine VM
instances.'
	'add_tags:(ALPHA) Add tags to Google Compute Engine virtual machine
instances.'
	'attach_disk:(ALPHA) Attach a disk to an instance.'
	'create:(ALPHA) Create Google Compute Engine virtual machine instances.'
	'create_with_container:(ALPHA) Creates Google Compute engine virtual machine instances
running container images.'
	'delete:(ALPHA) Delete Google Compute Engine virtual machine instances.'
	'delete_access_config:(ALPHA) Delete an access configuration from a virtual machine
network interface.'
	'describe:(ALPHA) Describe a virtual machine instance.'
	'detach_disk:(ALPHA) Detach disks from Compute Engine virtual machine instances.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Google Compute Engine instance.'
	'get_serial_port_output:(ALPHA) Read output from a virtual machine instance&#39;s serial port.'
	'list:(ALPHA) List Google Compute Engine instances.'
	'move:(ALPHA) Move an instance and its attached persistent disks between
zones.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for an instance.'
	'remove_labels:(ALPHA) Remove labels from Google Compute Engine virtual machine
instances.'
	'remove_metadata:(ALPHA) Remove instance metadata.'
	'remove_resource_policies:(ALPHA) Remove resource policies to Google Compute Engine VM
instances.'
	'remove_tags:(ALPHA) Remove tags from Google Compute Engine virtual machine
instances.'
	'reset:(ALPHA) Reset a virtual machine instance.'
	'resume:(ALPHA) Resume a virtual machine instance.'
	'set_disk_auto_delete:(ALPHA) Set auto-delete behavior for disks.'
	'set_iam_policy:(ALPHA) Set IAM policy for an instance.'
	'set_machine_type:(ALPHA) Set machine type for Google Compute Engine virtual
machines.'
	'set_min_cpu_platform:(ALPHA) (DEPRECATED) Set minimum CPU platform for
Google Compute Engine virtual machines.'
	'set_scheduling:(ALPHA) Set scheduling options for Google Compute Engine virtual
machines.'
	'set_scopes:(ALPHA) Set scopes and service account for a Google Compute Engine
instance.'
	'simulate_maintenance_event:(ALPHA) Simulate maintenance of virtual machine instances.'
	'start:(ALPHA) Start a stopped virtual machine instance.'
	'stop:(ALPHA) Stop a virtual machine instance.'
	'suspend:(ALPHA) Suspend a virtual machine instance.'
	'tail_serial_port_output:(ALPHA) Periodically fetch new output from a virtual machine
instance&#39;s serial port and display it as it becomes available.'
	'update:(ALPHA) Update a Google Compute Engine virtual machine.'
	'update_access_config:(ALPHA) Update a Google Compute Engine virtual machine access
configuration.'
	'update_container:(ALPHA) Updates Google Compute engine virtual machine instances
running container images.'
)

# groups
local -a _network_interfaces_arguments
_network_interfaces_arguments=(
	'update:(ALPHA) Update a Google Compute Engine virtual machine network
interface.'
)

# groups

__auto-network_interfaces ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine instance network
interfaces." _network_interfaces_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine virtual machine
instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (network_interfaces)
      __auto-network_interfaces
      ;;
      (add_access_config)
      __auto-add_access_config
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (add_labels)
      __auto-add_labels
      ;;
      (add_metadata)
      __auto-add_metadata
      ;;
      (add_resource_policies)
      __auto-add_resource_policies
      ;;
      (add_tags)
      __auto-add_tags
      ;;
      (attach_disk)
      __auto-attach_disk
      ;;
      (create)
      __auto-create
      ;;
      (create_with_container)
      __auto-create_with_container
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_access_config)
      __auto-delete_access_config
      ;;
      (describe)
      __auto-describe
      ;;
      (detach_disk)
      __auto-detach_disk
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (get_serial_port_output)
      __auto-get_serial_port_output
      ;;
      (list)
      __auto-list
      ;;
      (move)
      __auto-move
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (remove_metadata)
      __auto-remove_metadata
      ;;
      (remove_resource_policies)
      __auto-remove_resource_policies
      ;;
      (remove_tags)
      __auto-remove_tags
      ;;
      (reset)
      __auto-reset
      ;;
      (resume)
      __auto-resume
      ;;
      (set_disk_auto_delete)
      __auto-set_disk_auto_delete
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (set_machine_type)
      __auto-set_machine_type
      ;;
      (set_min_cpu_platform)
      __auto-set_min_cpu_platform
      ;;
      (set_scheduling)
      __auto-set_scheduling
      ;;
      (set_scopes)
      __auto-set_scopes
      ;;
      (simulate_maintenance_event)
      __auto-simulate_maintenance_event
      ;;
      (start)
      __auto-start
      ;;
      (stop)
      __auto-stop
      ;;
      (suspend)
      __auto-suspend
      ;;
      (tail_serial_port_output)
      __auto-tail_serial_port_output
      ;;
      (update)
      __auto-update
      ;;
      (update_access_config)
      __auto-update_access_config
      ;;
      (update_container)
      __auto-update_container
      ;;
    esac
    ;;
	esac
}

local -a _interconnects_arguments
_interconnects_arguments=(
	'attachments:(ALPHA) Read and manipulate Google Compute Engine interconnect
attachments.'
	'locations:(ALPHA) Read and manipulate Google Compute Engine interconnect
locations.'
	'create:(ALPHA) Create a Google Compute Engine interconnect.'
	'delete:(ALPHA) Delete Google Compute Engine interconnects.'
	'describe:(ALPHA) Describe a Google Compute Engine interconnect.'
	'get_diagnostics:(ALPHA) Get diagnostics of a Google Compute Engine interconnect.'
	'list:(ALPHA) List Google Compute Engine interconnects.'
	'update:(ALPHA) Update a Google Compute Engine interconnect.'
)

# groups
local -a _attachments_arguments
_attachments_arguments=(
	'dedicated:(ALPHA) Create or manipulate dedicated interconnect attachments.'
	'partner:(ALPHA) Create or manipulate partner interconnect attachments.'
	'delete:(ALPHA) Delete interconnects.'
	'describe:(ALPHA) Describe a Google Compute Engine interconnect attachment.'
	'list:(ALPHA) List Google Compute Engine interconnect attachments.'
)

# groups
local -a _dedicated_arguments
_dedicated_arguments=(
	'create:(ALPHA) Create a Google Compute Engine dedicated interconnect
attachment.'
	'update:(ALPHA) Update a Google Compute Engine dedicated interconnect
attachment.'
)

# groups

__auto-dedicated ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create or manipulate dedicated interconnect attachments." _dedicated_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _partner_arguments
_partner_arguments=(
	'create:(ALPHA) Create a Google Compute Engine partner interconnect
attachment.'
	'update:(ALPHA) Update a Google Compute Engine partner interconnect
attachment.'
)

# groups

__auto-partner ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create or manipulate partner interconnect attachments." _partner_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-attachments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine interconnect
attachments." _attachments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (dedicated)
      __auto-dedicated
      ;;
      (partner)
      __auto-partner
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'describe:(ALPHA) Describe a Google Compute Engine interconnect location.'
	'list:(ALPHA) List Google Compute Engine interconnect locations.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine interconnect
locations." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-interconnects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine interconnects." _interconnects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (attachments)
      __auto-attachments
      ;;
      (locations)
      __auto-locations
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_diagnostics)
      __auto-get_diagnostics
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _machine_types_arguments
_machine_types_arguments=(
	'describe:(ALPHA) Describe a Google Compute Engine machine type.'
	'list:(ALPHA) List Google Compute Engine machine types.'
)

# groups

__auto-machine_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read Google Compute Engine virtual machine types." _machine_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _network_endpoint_groups_arguments
_network_endpoint_groups_arguments=(
	'create:(ALPHA) Creates a Google Compute Engine network endpoint group.'
	'delete:(ALPHA) Deletes a Google Compute Engine network endpoint group.'
	'describe:(ALPHA) Describes a Google Compute Engine network endpoint group.'
	'list:(ALPHA) List Google Compute Engine network endpoint groups.'
	'list_network_endpoints:(ALPHA) List network endpoints in a network endpoint group.'
	'update:(ALPHA) Updates a Google Compute Engine network endpoint group.'
)

# groups

__auto-network_endpoint_groups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine network endpoint
groups." _network_endpoint_groups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_network_endpoints)
      __auto-list_network_endpoints
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _networks_arguments
_networks_arguments=(
	'peerings:(ALPHA) List, create, and delete Google Compute Engine network
peerings.'
	'subnets:(ALPHA) List, describe, and delete Google Compute Engine
subnetworks.'
	'create:(ALPHA) Create a Google Compute Engine network.'
	'delete:(ALPHA) Delete Google Compute Engine networks.'
	'describe:(ALPHA) Describe a Google Compute Engine network.'
	'list:(ALPHA) List Google Compute Engine networks.'
	'list_ip_addresses:(ALPHA) List internal IP addresses in a network.'
	'list_ip_owners:(ALPHA) List IP owners in a network.'
	'update:(ALPHA) Update a Google Compute Engine network.'
)

# groups
local -a _peerings_arguments
_peerings_arguments=(
	'create:(ALPHA) Create a Google Compute Engine network peering.'
	'delete:(ALPHA) Delete a Google Compute Engine network peering.'
	'list:(ALPHA) List Google Compute Engine peerings.'
)

# groups

__auto-peerings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete Google Compute Engine network
peerings." _peerings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _subnets_arguments
_subnets_arguments=(
	'create:(ALPHA) Define a subnet for a network in custom subnet mode.'
	'delete:(ALPHA) Delete Google Compute Engine subnetworks.'
	'describe:(ALPHA) Describe a Google Compute Engine subnetwork.'
	'expand_ip_range:(ALPHA) Expand the IP range of a Google Compute Engine subnetwork.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Google Compute Engine subnetwork.'
	'list:(ALPHA) List Google Compute Engine subnetworks.'
	'list_usable:(ALPHA) List Google Compute Engine subnetworks permitted for use.'
	'set_iam_policy:(ALPHA) Set the IAM Policy for a Google Compute Engine subnetwork.'
	'update:(ALPHA) Updates properties of an existing Google Compute Engine
subnetwork.'
)

# groups

__auto-subnets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, describe, and delete Google Compute Engine
subnetworks." _subnets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (expand_ip_range)
      __auto-expand_ip_range
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (list_usable)
      __auto-list_usable
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-networks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete Google Compute Engine networks." _networks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (peerings)
      __auto-peerings
      ;;
      (subnets)
      __auto-subnets
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_ip_addresses)
      __auto-list_ip_addresses
      ;;
      (list_ip_owners)
      __auto-list_ip_owners
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Describe a Google Compute Engine operation.'
	'list:(ALPHA) List Google Compute Engine operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _os_login_arguments
_os_login_arguments=(
	'ssh_keys:(ALPHA) List, add, update, and remove OS Login SSH Keys.'
	'describe_profile:(ALPHA) Describe the OS Login profile for the current user.'
	'remove_profile:(ALPHA) Remove the posix account information for the current user.'
)

# groups
local -a _ssh_keys_arguments
_ssh_keys_arguments=(
	'add:(ALPHA) Add an SSH public key to an OS Login profile.'
	'describe:(ALPHA) Describe an SSH Public Key from an OS Login Profile.'
	'list:(ALPHA) List SSH public keys from an OS Login profile.'
	'remove:(ALPHA) Remove an SSH public key from an OS Login profile.'
	'update:(ALPHA) Update an SSH public key in an OS Login profile.'
)

# groups

__auto-ssh_keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, add, update, and remove OS Login SSH Keys." _ssh_keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add)
      __auto-add
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (remove)
      __auto-remove
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-os_login ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manipulate Google Compute Engine OS Login
resources." _os_login_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (ssh_keys)
      __auto-ssh_keys
      ;;
      (describe_profile)
      __auto-describe_profile
      ;;
      (remove_profile)
      __auto-remove_profile
      ;;
    esac
    ;;
	esac
}

local -a _project_info_arguments
_project_info_arguments=(
	'add_metadata:(ALPHA) Add or update project-wide metadata.'
	'describe:(ALPHA) Describe the Google Compute Engine project resource.'
	'remove_metadata:(ALPHA) Remove project-wide metadata entries.'
	'set_default_service_account:(ALPHA) Set the default service account on the project.'
	'set_usage_bucket:(ALPHA) Set usage reporting bucket for a project.'
	'update:(ALPHA) Update a Google Compute Engine project resource.'
)

# groups

__auto-project_info ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate project-level data like quotas and
metadata." _project_info_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_metadata)
      __auto-add_metadata
      ;;
      (describe)
      __auto-describe
      ;;
      (remove_metadata)
      __auto-remove_metadata
      ;;
      (set_default_service_account)
      __auto-set_default_service_account
      ;;
      (set_usage_bucket)
      __auto-set_usage_bucket
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'describe:(ALPHA) Describe a Google Compute Engine region.'
	'list:(ALPHA) List Google Compute Engine regions.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List Google Compute Engine regions." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _resource_policies_arguments
_resource_policies_arguments=(
	'create_backup_schedule:(ALPHA) Create a Google Compute Engine Backup Schedule Resource
Policy.'
	'create_vm_maintenance:(ALPHA) Create a Google Compute Engine VM Maintenance Resource
Policy.'
	'delete:(ALPHA) Deletes a Google Compute Engine resource policy.'
	'describe:(ALPHA) Describes a Google Compute Engine resource policy.'
	'list:(ALPHA) List Google Compute Engine resource policies.'
)

# groups

__auto-resource_policies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Google Compute Engine Resource Policies." _resource_policies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create_backup_schedule)
      __auto-create_backup_schedule
      ;;
      (create_vm_maintenance)
      __auto-create_vm_maintenance
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _rolling_updates_arguments
_rolling_updates_arguments=(
	'cancel:(ALPHA) (DEPRECATED) Cancels an existing update.'
	'describe:(ALPHA) (DEPRECATED) Gets information about a single
update.'
	'list:(ALPHA) (DEPRECATED) Lists all updates for a given
group.'
	'list_instance_updates:(ALPHA) (DEPRECATED) Lists all instance updates for a
given update.'
	'pause:(ALPHA) (DEPRECATED) Pauses an existing update.'
	'resume:(ALPHA) (DEPRECATED) Resume an existing update.'
	'rollback:(ALPHA) (DEPRECATED) Rolls back an existing update.'
	'start:(ALPHA) (DEPRECATED) Starts a new rolling update.'
)

# groups

__auto-rolling_updates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) (DEPRECATED) Manage updates in a managed
instance group." _rolling_updates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_instance_updates)
      __auto-list_instance_updates
      ;;
      (pause)
      __auto-pause
      ;;
      (resume)
      __auto-resume
      ;;
      (rollback)
      __auto-rollback
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}

local -a _routers_arguments
_routers_arguments=(
	'nats:(ALPHA) List, create, describe and delete Google Compute Engine
NATs.'
	'add_bgp_peer:(ALPHA) Add a BGP peer to a Google Compute Engine router.'
	'add_interface:(ALPHA) Add an interface to a Google Compute Engine router.'
	'create:(ALPHA) Create a Google Compute Engine router.'
	'delete:(ALPHA) Delete Google Compute Engine routers.'
	'describe:(ALPHA) Describe a Google Compute Engine router.'
	'get_nat_mapping_info:(ALPHA) Display NAT Mapping information in a router.'
	'get_status:(ALPHA) Get status of a Google Compute Engine router.'
	'list:(ALPHA) List Google Compute Engine routers.'
	'remove_bgp_peer:(ALPHA) Remove a BGP peer from a Google Compute Engine router.'
	'remove_interface:(ALPHA) Remove an interface from a Google Compute Engine router.'
	'update:(ALPHA) Update a Google Compute Engine router.'
	'update_bgp_peer:(ALPHA) Update a BGP peer on a Google Compute Engine router.'
	'update_interface:(ALPHA) Update an interface on a Google Compute Engine router.'
)

# groups
local -a _nats_arguments
_nats_arguments=(
	'create:(ALPHA) Add a NAT to a Google Compute Engine router.'
	'delete:(ALPHA) Remove a NAT from a Google Compute Engine router.'
	'describe:(ALPHA) Describe a NAT in a Google Compute Engine router.'
	'list:(ALPHA) Lists the NATs on a Google Compute Engine router.'
	'update:(ALPHA) Update a NAT on a Google Compute Engine router.'
)

# groups

__auto-nats ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, describe and delete Google Compute Engine
NATs." _nats_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-routers ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete Google Compute Engine routers." _routers_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (nats)
      __auto-nats
      ;;
      (add_bgp_peer)
      __auto-add_bgp_peer
      ;;
      (add_interface)
      __auto-add_interface
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_nat_mapping_info)
      __auto-get_nat_mapping_info
      ;;
      (get_status)
      __auto-get_status
      ;;
      (list)
      __auto-list
      ;;
      (remove_bgp_peer)
      __auto-remove_bgp_peer
      ;;
      (remove_interface)
      __auto-remove_interface
      ;;
      (update)
      __auto-update
      ;;
      (update_bgp_peer)
      __auto-update_bgp_peer
      ;;
      (update_interface)
      __auto-update_interface
      ;;
    esac
    ;;
	esac
}

local -a _routes_arguments
_routes_arguments=(
	'create:(ALPHA) Create a new route.'
	'delete:(ALPHA) Delete routes.'
	'describe:(ALPHA) Describe a route.'
	'list:(ALPHA) List Google Compute Engine routes.'
)

# groups

__auto-routes ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate routes." _routes_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _security_policies_arguments
_security_policies_arguments=(
	'rules:(ALPHA) Read and manipulate Google Compute Engine security policies
rules.'
	'create:(ALPHA) Create a Google Compute Engine security policy.'
	'delete:(ALPHA) Delete security policies.'
	'describe:(ALPHA) Describe a Google Compute Engine security policy.'
	'export:(ALPHA) Export security policy configs into yaml files.'
	'import:(ALPHA) Import security policy configs into your project.'
	'list:(ALPHA) List Google Compute Engine security policies.'
	'list_preconfigured_expression_sets:(ALPHA) List all available preconfigured expression sets.'
)

# groups
local -a _rules_arguments
_rules_arguments=(
	'create:(ALPHA) Create a Google Compute Engine security policy rule.'
	'delete:(ALPHA) Delete Google Compute Engine security policy rules.'
	'describe:(ALPHA) Describe a Google Compute Engine security policy rule.'
	'update:(ALPHA) Update a Google Compute Engine security policy rule.'
)

# groups

__auto-rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine security policies
rules." _rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-security_policies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine security
policies. Security policies are used to control access to Google Cloud
HTTP/HTTPS load balancers." _security_policies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (rules)
      __auto-rules
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
      (list_preconfigured_expression_sets)
      __auto-list_preconfigured_expression_sets
      ;;
    esac
    ;;
	esac
}

local -a _shared_vpc_arguments
_shared_vpc_arguments=(
	'associated_projects:(ALPHA) Configure associated projects for cross-project networking
(XPN).'
	'organizations:(ALPHA) Configure organizations for cross-project networking (XPN).'
	'disable:(ALPHA) Disable the given project as a shared VPC host.'
	'enable:(ALPHA) Enable the given project as a shared VPC host.'
	'get_host_project:(ALPHA) Get the shared VPC host project that the given project is
associated with.'
	'list_associated_resources:(ALPHA) List the resources associated with the given shared VPC
host project.'
)

# groups
local -a _associated_projects_arguments
_associated_projects_arguments=(
	'add:(ALPHA) Associate the given project with a given shared VPC host
project.'
	'list:(ALPHA) List the associated service projects of the given host
project.'
	'remove:(ALPHA) Disassociate the given project from the given shared VPC
host project.'
)

# groups

__auto-associated_projects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Configure associated projects for cross-project networking
(XPN)." _associated_projects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add)
      __auto-add
      ;;
      (list)
      __auto-list
      ;;
      (remove)
      __auto-remove
      ;;
    esac
    ;;
	esac
}

local -a _organizations_arguments
_organizations_arguments=(
	'list_host_projects:(ALPHA) List shared VPC host projects in a given organization.'
)

# groups

__auto-organizations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Configure organizations for cross-project networking (XPN)." _organizations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list_host_projects)
      __auto-list_host_projects
      ;;
    esac
    ;;
	esac
}


__auto-shared_vpc ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Configure shared VPC." _shared_vpc_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (associated_projects)
      __auto-associated_projects
      ;;
      (organizations)
      __auto-organizations
      ;;
      (disable)
      __auto-disable
      ;;
      (enable)
      __auto-enable
      ;;
      (get_host_project)
      __auto-get_host_project
      ;;
      (list_associated_resources)
      __auto-list_associated_resources
      ;;
    esac
    ;;
	esac
}

local -a _snapshots_arguments
_snapshots_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding to a Google Compute Engine snapshot.'
	'add_labels:(ALPHA) Add labels to Google Compute Engine snapshots.'
	'delete:(ALPHA) Delete Google Compute Engine snapshots.'
	'describe:(ALPHA) Describe a Google Compute Engine snapshot.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Google Compute Engine snapshot.'
	'list:(ALPHA) List Google Compute Engine snapshots.'
	'remove_iam_policy_binding:(ALPHA) Remove a policy binding from a Google Compute Engine
snapshot.'
	'remove_labels:(ALPHA) Remove labels from Google Compute Engine snapshots.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Google Compute Engine snapshot.'
	'update:(ALPHA) Update a Google Compute Engine snapshot.'
)

# groups

__auto-snapshots ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, describe, and delete Google Compute Engine snapshots." _snapshots_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (add_labels)
      __auto-add_labels
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _sole_tenancy_arguments
_sole_tenancy_arguments=(
	'node_groups:(ALPHA) Read Google Compute Engine sole-tenancy node groups.'
	'node_templates:(ALPHA) Read and manage Google Compute Engine sole-tenancy node
templates.'
	'node_types:(ALPHA) Read Google Compute Engine sole-tenancy node types.'
)

# groups
local -a _node_groups_arguments
_node_groups_arguments=(
	'add_iam_policy_binding:(ALPHA) Add an IAM policy binding to a node group.'
	'create:(ALPHA) Creates a Google Compute Engine node group.'
	'delete:(ALPHA) Deletes a Google Compute Engine node group.'
	'describe:(ALPHA) Describes a Google Compute Engine node group.'
	'get_iam_policy:(ALPHA) Get the IAM Policy for a Google Compute Engine node group.'
	'list:(ALPHA) List Google Compute Engine node groups.'
	'list_nodes:(ALPHA) List Google Compute Engine sole-tenant nodes present in a
node group.'
	'remove_iam_policy_binding:(ALPHA) Remove an IAM policy binding from a node group.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Google Compute Engine node group.'
	'update:(ALPHA) Updates a Google Compute Engine node group.'
)

# groups

__auto-node_groups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read Google Compute Engine sole-tenancy node groups." _node_groups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (list_nodes)
      __auto-list_nodes
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _node_templates_arguments
_node_templates_arguments=(
	'add_iam_policy_binding:(ALPHA) Add an IAM policy binding to a node template.'
	'create:(ALPHA) Creates a Google Compute Engine node template.'
	'delete:(ALPHA) Deletes a Google Compute Engine node template.'
	'describe:(ALPHA) Describes a Google Compute Engine node template.'
	'get_iam_policy:(ALPHA) Get the IAM Policy for a Google Compute Engine node
template.'
	'list:(ALPHA) List Google Compute Engine node templates.'
	'remove_iam_policy_binding:(ALPHA) Remove an IAM policy binding from a node template.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Google Compute Engine node
template.'
)

# groups

__auto-node_templates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manage Google Compute Engine sole-tenancy node
templates." _node_templates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _node_types_arguments
_node_types_arguments=(
	'describe:(ALPHA) Describes a Google Compute Engine node type.'
	'list:(ALPHA) List Google Compute Engine node types.'
)

# groups

__auto-node_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read Google Compute Engine sole-tenancy node types." _node_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-sole_tenancy ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manage Google Compute Engine sole-tenancy
resources." _sole_tenancy_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (node_groups)
      __auto-node_groups
      ;;
      (node_templates)
      __auto-node_templates
      ;;
      (node_types)
      __auto-node_types
      ;;
    esac
    ;;
	esac
}

local -a _ssl_certificates_arguments
_ssl_certificates_arguments=(
	'create:(ALPHA) Create a Google Compute Engine SSL certificate.'
	'delete:(ALPHA) Delete Google Compute Engine SSL certificates.'
	'describe:(ALPHA) Describe a Google Compute Engine SSL certificate.'
	'list:(ALPHA) List Google Compute Engine SSL certificates.'
)

# groups

__auto-ssl_certificates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete Google Compute Engine SSL
certificates." _ssl_certificates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _ssl_policies_arguments
_ssl_policies_arguments=(
	'create:(ALPHA) Create a new Google Compute Engine SSL policy.'
	'delete:(ALPHA) Delete Google Compute Engine SSL policies.'
	'describe:(ALPHA) Describe a Google Compute Engine ssl policy.'
	'list:(ALPHA) List Google Compute Engine SSL policies.'
	'list_available_features:(ALPHA) List available features that can be specified in an SSL
policy.'
	'update:(ALPHA) Update a Google Compute Engine SSL policy.'
)

# groups

__auto-ssl_policies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, delete and update Google Compute Engine SSL
policies." _ssl_policies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_available_features)
      __auto-list_available_features
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_http_proxies_arguments
_target_http_proxies_arguments=(
	'create:(ALPHA) Create a target HTTP proxy.'
	'delete:(ALPHA) Delete target HTTP proxies.'
	'describe:(ALPHA) Display detailed information about a target HTTP proxy.'
	'list:(ALPHA) List Google Compute Engine target HTTP proxies.'
	'update:(ALPHA) Update a target HTTP proxy.'
)

# groups

__auto-target_http_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete target HTTP proxies." _target_http_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_https_proxies_arguments
_target_https_proxies_arguments=(
	'create:(ALPHA) Create a target HTTPS proxy.'
	'delete:(ALPHA) Delete target HTTPS proxies.'
	'describe:(ALPHA) Display detailed information about a target HTTPS proxy.'
	'list:(ALPHA) List Google Compute Engine target HTTPS proxies.'
	'update:(ALPHA) Update a target HTTPS proxy.'
)

# groups

__auto-target_https_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete target HTTPS proxies." _target_https_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_instances_arguments
_target_instances_arguments=(
	'create:(ALPHA) Create a target instance for handling traffic from a
forwarding rule.'
	'delete:(ALPHA) Delete target instances.'
	'describe:(ALPHA) Describe a target instance.'
	'list:(ALPHA) List Google Compute Engine target instances.'
)

# groups

__auto-target_instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine virtual target
instances." _target_instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _target_pools_arguments
_target_pools_arguments=(
	'add_health_checks:(ALPHA) Add an HTTP health check to a target pool.'
	'add_instances:(ALPHA) Add instances to a target pool.'
	'create:(ALPHA) Define a load-balanced pool of virtual machine instances.'
	'delete:(ALPHA) Delete target pools.'
	'describe:(ALPHA) Describe a Google Compute Engine target pool.'
	'get_health:(ALPHA) Get the health of instances in a target pool.'
	'list:(ALPHA) List Google Compute Engine target pools.'
	'remove_health_checks:(ALPHA) Remove an HTTP health check from a target pool.'
	'remove_instances:(ALPHA) Remove instances from a target pool.'
	'set_backup:(ALPHA) Set a backup pool for a target pool.'
)

# groups

__auto-target_pools ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Control Compute Engine target pools for network load
balancing." _target_pools_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_health_checks)
      __auto-add_health_checks
      ;;
      (add_instances)
      __auto-add_instances
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_health)
      __auto-get_health
      ;;
      (list)
      __auto-list
      ;;
      (remove_health_checks)
      __auto-remove_health_checks
      ;;
      (remove_instances)
      __auto-remove_instances
      ;;
      (set_backup)
      __auto-set_backup
      ;;
    esac
    ;;
	esac
}

local -a _target_ssl_proxies_arguments
_target_ssl_proxies_arguments=(
	'create:(ALPHA) Create a target SSL proxy.'
	'delete:(ALPHA) Delete target SSL proxies.'
	'describe:(ALPHA) Display detailed information about a target SSL proxy.'
	'list:(ALPHA) List Google Compute Engine target SSL proxies.'
	'update:(ALPHA) Update a target SSL proxy.'
)

# groups

__auto-target_ssl_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete target SSL proxies." _target_ssl_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_tcp_proxies_arguments
_target_tcp_proxies_arguments=(
	'create:(ALPHA) Create a target TCP proxy.'
	'delete:(ALPHA) Delete target TCP proxies.'
	'describe:(ALPHA) Display detailed information about a target TCP proxy.'
	'list:(ALPHA) List Google Compute Engine target TCP proxies.'
	'update:(ALPHA) Update a target TCP proxy.'
)

# groups

__auto-target_tcp_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete target TCP proxies." _target_tcp_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_vpn_gateways_arguments
_target_vpn_gateways_arguments=(
	'create:(ALPHA) Create a target VPN Gateway.'
	'delete:(ALPHA) Delete target vpn gateways.'
	'describe:(ALPHA) Describe a Google Compute Engine target vpn gateway.'
	'list:(ALPHA) List Google Compute Engine target VPN gateways.'
	'update:(ALPHA) Update a Google Compute Engine target VPN gateway.'
)

# groups

__auto-target_vpn_gateways ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine VPN Gateways." _target_vpn_gateways_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _tpus_arguments
_tpus_arguments=(
	'accelerator_types:(ALPHA) List or Describe Available Cloud TPU accelerator types.'
	'locations:(ALPHA) List or Describe Available Cloud TPU Locations.'
	'versions:(ALPHA) Explore Available Tensorflow versions for Cloud TPUs.'
	'create:(ALPHA) Create a new Cloud TPU.'
	'delete:(ALPHA) Deletes a Cloud TPU.'
	'describe:(ALPHA) Describe a Cloud TPU.'
	'list:(ALPHA) List Cloud TPUs.'
	'reimage:(ALPHA) Reimages the OS on a Cloud TPU.'
	'start:(ALPHA) Start a Cloud TPU.'
	'stop:(ALPHA) Stop a Cloud TPU.'
)

# groups
local -a _accelerator_types_arguments
_accelerator_types_arguments=(
	'describe:(ALPHA) Describe an accelerator type available for Cloud TPUs.'
	'list:(ALPHA) List available accelerator types for Cloud TPUs.'
)

# groups

__auto-accelerator_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List or Describe Available Cloud TPU accelerator types." _accelerator_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'describe:(ALPHA) Describe a Cloud TPU Location.'
	'list:(ALPHA) List available locations for Cloud TPUs.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List or Describe Available Cloud TPU Locations." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'describe:(ALPHA) Describe a Tensorflow version available for Cloud TPUs.'
	'list:(ALPHA) List available Tensorflow versions.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Explore Available Tensorflow versions for Cloud TPUs." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-tpus ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete Cloud TPUs." _tpus_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (accelerator_types)
      __auto-accelerator_types
      ;;
      (locations)
      __auto-locations
      ;;
      (versions)
      __auto-versions
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (reimage)
      __auto-reimage
      ;;
      (start)
      __auto-start
      ;;
      (stop)
      __auto-stop
      ;;
    esac
    ;;
	esac
}

local -a _url_maps_arguments
_url_maps_arguments=(
	'add_host_rule:(ALPHA) Add a rule to a URL map to map hosts to a path matcher.'
	'add_path_matcher:(ALPHA) Add a path matcher to a URL map.'
	'create:(ALPHA) Create a URL map.'
	'delete:(ALPHA) Delete URL maps.'
	'describe:(ALPHA) Describe a URL map.'
	'edit:(ALPHA) Modify URL maps.'
	'invalidate_cdn_cache:(ALPHA) Invalidate specified objects for a URL map in Cloud CDN
caches.'
	'list:(ALPHA) List Google Compute Engine URL maps.'
	'list_cdn_cache_invalidations:(ALPHA) List Cloud CDN cache invalidations for a URL map.'
	'remove_host_rule:(ALPHA) Remove a host rule from a URL map.'
	'remove_path_matcher:(ALPHA) Remove a path matcher from a URL map.'
	'set_default_service:(ALPHA) Change the default service or default bucket of a URL map.'
)

# groups

__auto-url_maps ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, create, and delete URL maps." _url_maps_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_host_rule)
      __auto-add_host_rule
      ;;
      (add_path_matcher)
      __auto-add_path_matcher
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (edit)
      __auto-edit
      ;;
      (invalidate_cdn_cache)
      __auto-invalidate_cdn_cache
      ;;
      (list)
      __auto-list
      ;;
      (list_cdn_cache_invalidations)
      __auto-list_cdn_cache_invalidations
      ;;
      (remove_host_rule)
      __auto-remove_host_rule
      ;;
      (remove_path_matcher)
      __auto-remove_path_matcher
      ;;
      (set_default_service)
      __auto-set_default_service
      ;;
    esac
    ;;
	esac
}

local -a _vpn_tunnels_arguments
_vpn_tunnels_arguments=(
	'create:(ALPHA) Create a VPN tunnel.'
	'delete:(ALPHA) Delete vpn tunnels.'
	'describe:(ALPHA) Describe a Google Compute Engine vpn tunnel.'
	'list:(ALPHA) List Google Compute Engine VPN tunnels.'
	'update:(ALPHA) Update a Google Compute Engine VPN tunnel.'
)

# groups

__auto-vpn_tunnels ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Compute Engine VPN Tunnels." _vpn_tunnels_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _zones_arguments
_zones_arguments=(
	'describe:(ALPHA) Describe a Google Compute Engine zone.'
	'list:(ALPHA) List Google Compute Engine zones.'
)

# groups

__auto-zones ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List Google Compute Engine zones." _zones_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-compute ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manipulate Google Compute Engine resources." _compute_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (accelerator_types)
      __auto-accelerator_types
      ;;
      (addresses)
      __auto-addresses
      ;;
      (backend_buckets)
      __auto-backend_buckets
      ;;
      (backend_services)
      __auto-backend_services
      ;;
      (commitments)
      __auto-commitments
      ;;
      (disk_types)
      __auto-disk_types
      ;;
      (disks)
      __auto-disks
      ;;
      (firewall_rules)
      __auto-firewall_rules
      ;;
      (forwarding_rules)
      __auto-forwarding_rules
      ;;
      (health_checks)
      __auto-health_checks
      ;;
      (http_health_checks)
      __auto-http_health_checks
      ;;
      (https_health_checks)
      __auto-https_health_checks
      ;;
      (images)
      __auto-images
      ;;
      (instance_groups)
      __auto-instance_groups
      ;;
      (instance_templates)
      __auto-instance_templates
      ;;
      (instances)
      __auto-instances
      ;;
      (interconnects)
      __auto-interconnects
      ;;
      (machine_types)
      __auto-machine_types
      ;;
      (network_endpoint_groups)
      __auto-network_endpoint_groups
      ;;
      (networks)
      __auto-networks
      ;;
      (operations)
      __auto-operations
      ;;
      (os_login)
      __auto-os_login
      ;;
      (project_info)
      __auto-project_info
      ;;
      (regions)
      __auto-regions
      ;;
      (resource_policies)
      __auto-resource_policies
      ;;
      (rolling_updates)
      __auto-rolling_updates
      ;;
      (routers)
      __auto-routers
      ;;
      (routes)
      __auto-routes
      ;;
      (security_policies)
      __auto-security_policies
      ;;
      (shared_vpc)
      __auto-shared_vpc
      ;;
      (snapshots)
      __auto-snapshots
      ;;
      (sole_tenancy)
      __auto-sole_tenancy
      ;;
      (ssl_certificates)
      __auto-ssl_certificates
      ;;
      (ssl_policies)
      __auto-ssl_policies
      ;;
      (target_http_proxies)
      __auto-target_http_proxies
      ;;
      (target_https_proxies)
      __auto-target_https_proxies
      ;;
      (target_instances)
      __auto-target_instances
      ;;
      (target_pools)
      __auto-target_pools
      ;;
      (target_ssl_proxies)
      __auto-target_ssl_proxies
      ;;
      (target_tcp_proxies)
      __auto-target_tcp_proxies
      ;;
      (target_vpn_gateways)
      __auto-target_vpn_gateways
      ;;
      (tpus)
      __auto-tpus
      ;;
      (url_maps)
      __auto-url_maps
      ;;
      (vpn_tunnels)
      __auto-vpn_tunnels
      ;;
      (zones)
      __auto-zones
      ;;
      (config_ssh)
      __auto-config_ssh
      ;;
      (connect_to_serial_port)
      __auto-connect_to_serial_port
      ;;
      (copy_files)
      __auto-copy_files
      ;;
      (reset_windows_password)
      __auto-reset_windows_password
      ;;
      (scp)
      __auto-scp
      ;;
      (sign_url)
      __auto-sign_url
      ;;
      (ssh)
      __auto-ssh
      ;;
    esac
    ;;
	esac
}

local -a _config_arguments
_config_arguments=(
	'configurations:(ALPHA) Manage the set of gcloud named configurations.'
	'list:(ALPHA) List Cloud SDK properties for the currently active
configuration.'
	'set:(ALPHA) Set a Cloud SDK property.'
	'unset:(ALPHA) Unset a Cloud SDK property.'
)

# groups
local -a _configurations_arguments
_configurations_arguments=(
	'activate:(ALPHA) Activates an existing named configuration.'
	'create:(ALPHA) Creates a new named configuration.'
	'delete:(ALPHA) Deletes a named configuration.'
	'describe:(ALPHA) Describes a named configuration by listing its properties.'
	'list:(ALPHA) Lists existing named configurations.'
)

# groups

__auto-configurations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage the set of gcloud named configurations." _configurations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (activate)
      __auto-activate
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-config ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) View and edit Cloud SDK properties." _config_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configurations)
      __auto-configurations
      ;;
      (list)
      __auto-list
      ;;
      (set)
      __auto-set
      ;;
      (unset)
      __auto-unset
      ;;
    esac
    ;;
	esac
}

local -a _container_arguments
_container_arguments=(
	'binauthz:(ALPHA) Manage attestations for Binary Authorization on Google
Cloud Platform.'
	'builds:(ALPHA) (DEPRECATED) Create and manage builds.'
	'clusters:(ALPHA) Deploy and teardown Google Kubernetes Engine clusters.'
	'images:(ALPHA) List and manipulate Google Container Registry images.'
	'node_pools:(ALPHA) Create and delete operations for Google Kubernetes Engine
node pools.'
	'operations:(ALPHA) Get and list operations for Google Kubernetes Engine
clusters.'
	'policy:(ALPHA) Manage Kubernetes Policies.'
	'subnets:(ALPHA) Manage subnets to be used by Google Kubernetes Engine
clusters.'
	'get_server_config:(ALPHA) Get Kubernetes Engine server config.'
)

# groups
local -a _binauthz_arguments
_binauthz_arguments=(
	'attestations:(ALPHA) Create and manage Google Binary Authorization attestations.'
	'attestors:(ALPHA) Create and manage Google Binary Authorization Attestation
Authorities.'
	'policy:(ALPHA) Create and manage Google Binary Authorization policy.'
	'create_signature_payload:(ALPHA) Create a JSON container image signature object.'
)

# groups
local -a _attestations_arguments
_attestations_arguments=(
	'create:(ALPHA) Create a Binary Authorization attestation.'
	'list:(ALPHA) List Binary Authorization attestations.'
)

# groups

__auto-attestations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage Google Binary Authorization attestations." _attestations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _attestors_arguments
_attestors_arguments=(
	'public_keys:(ALPHA) Create and manage public keys associated with Attestation
Authorities.'
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding to an attestor.'
	'create:(ALPHA) Create an Attestor.'
	'delete:(ALPHA) Delete an Attestor.'
	'describe:(ALPHA) Describe an Attestor.'
	'get_iam_policy:(ALPHA) Get the IAM policy for an attestor.'
	'list:(ALPHA) List Attestors associated with the current project.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding to an attestor.'
	'set_iam_policy:(ALPHA) Set the IAM policy for an attestor.'
	'update:(ALPHA) Update an existing Attestor.'
)

# groups
local -a _public_keys_arguments
_public_keys_arguments=(
	'add:(ALPHA) Add a public key to an Attestor.'
	'remove:(ALPHA) Remove a public key from an Attestor.'
	'update:(ALPHA) Update a public key on an Attestor.'
)

# groups

__auto-public_keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage public keys associated with Attestation
Authorities." _public_keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add)
      __auto-add
      ;;
      (remove)
      __auto-remove
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-attestors ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage Google Binary Authorization Attestation
Authorities." _attestors_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (public_keys)
      __auto-public_keys
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _policy_arguments
_policy_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding to a Binary Authorization policy.'
	'export:(ALPHA) Export the Binary Authorization policy for the current
project.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Binary Authorization policy.'
	'import:(ALPHA) Import a Binary Authorization policy to the current
project.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding to a Binary Authorization policy.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Binary Authorization policy.'
)

# groups

__auto-policy ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage Google Binary Authorization policy." _policy_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (export)
      __auto-export
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (import)
      __auto-import
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}


__auto-binauthz ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage attestations for Binary Authorization on Google
Cloud Platform." _binauthz_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (attestations)
      __auto-attestations
      ;;
      (attestors)
      __auto-attestors
      ;;
      (policy)
      __auto-policy
      ;;
      (create_signature_payload)
      __auto-create_signature_payload
      ;;
    esac
    ;;
	esac
}

local -a _builds_arguments
_builds_arguments=(
	'cancel:(ALPHA) (DEPRECATED) Cancel an ongoing build.'
	'describe:(ALPHA) (DEPRECATED) Get information about a
particular build.'
	'list:(ALPHA) (DEPRECATED) List builds.'
	'stream_logs:(ALPHA) (DEPRECATED) Stream the logs for a build.'
	'submit:(ALPHA) (DEPRECATED) Submit a build using the Google
Cloud Build service.'
)

# groups

__auto-builds ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) (DEPRECATED) Create and manage builds." _builds_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (stream_logs)
      __auto-stream_logs
      ;;
      (submit)
      __auto-submit
      ;;
    esac
    ;;
	esac
}

local -a _clusters_arguments
_clusters_arguments=(
	'create:(ALPHA) Create a cluster for running containers.'
	'delete:(ALPHA) Delete an existing cluster for running containers.'
	'describe:(ALPHA) Describe an existing cluster for running containers.'
	'get_credentials:(ALPHA) Fetch credentials for a running cluster.'
	'list:(ALPHA) List existing clusters for running containers.'
	'resize:(ALPHA) Resizes an existing cluster for running containers.'
	'update:(ALPHA) Update cluster settings for an existing container cluster.'
	'upgrade:(ALPHA) Upgrade the Kubernetes version of an existing container
cluster.'
)

# groups

__auto-clusters ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Deploy and teardown Google Kubernetes Engine clusters." _clusters_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_credentials)
      __auto-get_credentials
      ;;
      (list)
      __auto-list
      ;;
      (resize)
      __auto-resize
      ;;
      (update)
      __auto-update
      ;;
      (upgrade)
      __auto-upgrade
      ;;
    esac
    ;;
	esac
}

local -a _images_arguments
_images_arguments=(
	'add_tag:(ALPHA) Adds tags to existing image.'
	'delete:(ALPHA) Delete existing images.'
	'describe:(ALPHA) Lists container analysis data for a given image.'
	'list:(ALPHA) List existing images.'
	'list_tags:(ALPHA) List tags and digests for the specified image.'
	'untag:(ALPHA) Remove existing image tags.'
)

# groups

__auto-images ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List and manipulate Google Container Registry images." _images_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_tag)
      __auto-add_tag
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_tags)
      __auto-list_tags
      ;;
      (untag)
      __auto-untag
      ;;
    esac
    ;;
	esac
}

local -a _node_pools_arguments
_node_pools_arguments=(
	'create:(ALPHA) Create a node pool in a running cluster.'
	'delete:(ALPHA) Delete an existing node pool in a running cluster.'
	'describe:(ALPHA) Describe an existing node pool for a cluster.'
	'list:(ALPHA) List existing node pools for a cluster.'
	'rollback:(ALPHA) Rollback a node-pool upgrade.'
	'update:(ALPHA) Updates a node pool in a running cluster.'
)

# groups

__auto-node_pools ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and delete operations for Google Kubernetes Engine
node pools." _node_pools_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (rollback)
      __auto-rollback
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(ALPHA) Cancel a running operation.'
	'describe:(ALPHA) Describe an operation.'
	'list:(ALPHA) List operations for container clusters.'
	'wait:(ALPHA) Poll an operation for completion.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Get and list operations for Google Kubernetes Engine
clusters." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _policy_arguments
_policy_arguments=(
	'namespaces:(ALPHA) Create and manage Kubernetes Managed Namespaces.'
)

# groups
local -a _namespaces_arguments
_namespaces_arguments=(
	'create:(ALPHA) Create a new Kubernetes Managed Namespace.'
	'delete:(ALPHA) Delete a Kubernetes Managed Namespace.'
	'describe:(ALPHA) Show details for a Kubernetes Managed Namespace.'
	'list:(ALPHA) List the Kubernetes Managed Namespace in a project.'
)

# groups

__auto-namespaces ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage Kubernetes Managed Namespaces." _namespaces_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-policy ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Kubernetes Policies." _policy_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (namespaces)
      __auto-namespaces
      ;;
    esac
    ;;
	esac
}

local -a _subnets_arguments
_subnets_arguments=(
	'list_usable:(ALPHA) List subnets usable for cluster creation in a specific
project.'
)

# groups

__auto-subnets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage subnets to be used by Google Kubernetes Engine
clusters." _subnets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list_usable)
      __auto-list_usable
      ;;
    esac
    ;;
	esac
}


__auto-container ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Deploy and manage clusters of machines for running
containers." _container_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (binauthz)
      __auto-binauthz
      ;;
      (builds)
      __auto-builds
      ;;
      (clusters)
      __auto-clusters
      ;;
      (images)
      __auto-images
      ;;
      (node_pools)
      __auto-node_pools
      ;;
      (operations)
      __auto-operations
      ;;
      (policy)
      __auto-policy
      ;;
      (subnets)
      __auto-subnets
      ;;
      (get_server_config)
      __auto-get_server_config
      ;;
    esac
    ;;
	esac
}

local -a _dataflow_arguments
_dataflow_arguments=(
	'jobs:(ALPHA) A group of subcommands for working with Dataflow jobs.'
	'logs:(ALPHA) A group of subcommands for working with Dataflow logs.'
	'metrics:(ALPHA) A group of subcommands for working with Dataflow metrics.'
)

# groups
local -a _jobs_arguments
_jobs_arguments=(
	'export_steps:(ALPHA) Exports information about the steps for the given job.'
)

# groups

__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) A group of subcommands for working with Dataflow jobs." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (export_steps)
      __auto-export_steps
      ;;
    esac
    ;;
	esac
}

local -a _logs_arguments
_logs_arguments=(
	'list:(ALPHA) Retrieve the job logs for a specific job.'
)

# groups

__auto-logs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) A group of subcommands for working with Dataflow logs." _logs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _metrics_arguments
_metrics_arguments=(
	'list:(ALPHA) Retrieves the metrics from a specific job.'
)

# groups

__auto-metrics ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) A group of subcommands for working with Dataflow metrics." _metrics_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-dataflow ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Google Dataflow resources." _dataflow_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (jobs)
      __auto-jobs
      ;;
      (logs)
      __auto-logs
      ;;
      (metrics)
      __auto-metrics
      ;;
    esac
    ;;
	esac
}

local -a _datastore_arguments
_datastore_arguments=(
	'indexes:(ALPHA) Manage Cloud Datastore indexes.'
	'operations:(ALPHA) Manage Long Running Operations for Cloud Datastore.'
	'export:(ALPHA) Export Cloud Datastore entities to Google Cloud Storage.'
	'import:(ALPHA) Import Cloud Datastore entities from Google Cloud Storage.'
)

# groups
local -a _indexes_arguments
_indexes_arguments=(
	'cleanup:(ALPHA) Remove unused datastore indexes based on your local index
configuration.'
	'create:(ALPHA) Create new datastore indexes based on your local index
configuration.'
	'describe:(ALPHA) Show details about an Cloud Datastore index.'
	'list:(ALPHA) List Cloud Datastore indexes.'
)

# groups

__auto-indexes ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Datastore indexes." _indexes_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cleanup)
      __auto-cleanup
      ;;
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(ALPHA) Cancel a currently-running Cloud Datastore admin operation.'
	'delete:(ALPHA) Delete a completed Cloud Datastore admin operation.'
	'describe:(ALPHA) Retrieves information about a Cloud Datastore admin
operation.'
	'list:(ALPHA) List pending Cloud Datastore admin operations and their
status.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Long Running Operations for Cloud Datastore." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-datastore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage your Cloud Datastore indexes." _datastore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (indexes)
      __auto-indexes
      ;;
      (operations)
      __auto-operations
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
    esac
    ;;
	esac
}

local -a _deployment_manager_arguments
_deployment_manager_arguments=(
	'deployments:(ALPHA) Commands for Deployment Manager deployments.'
	'manifests:(ALPHA) Commands for Deployment Manager manifests.'
	'operations:(ALPHA) Commands for Deployment Manager operations.'
	'resources:(ALPHA) Commands for Deployment Manager resources.'
	'type_providers:(ALPHA) Commands for Deployment Manager type providers.'
	'types:(ALPHA) Commands for Deployment Manager types.'
)

# groups
local -a _deployments_arguments
_deployments_arguments=(
	'cancel_preview:(ALPHA) Cancel a pending or running deployment preview.'
	'create:(ALPHA) Create a deployment.'
	'delete:(ALPHA) Delete a deployment.'
	'describe:(ALPHA) Provide information about a deployment.'
	'list:(ALPHA) List deployments in a project.'
	'stop:(ALPHA) Stop a pending or running deployment update or creation.'
	'update:(ALPHA) Update a deployment based on a provided config file.'
)

# groups

__auto-deployments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Deployment Manager deployments." _deployments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel_preview)
      __auto-cancel_preview
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (stop)
      __auto-stop
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _manifests_arguments
_manifests_arguments=(
	'describe:(ALPHA) Provide information about a manifest.'
	'list:(ALPHA) List manifests in a deployment.'
)

# groups

__auto-manifests ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Deployment Manager manifests." _manifests_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Provide information about an operation.'
	'list:(ALPHA) List operations in a project.'
	'wait:(ALPHA) Wait for all operations specified to complete before
returning.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Deployment Manager operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _resources_arguments
_resources_arguments=(
	'describe:(ALPHA) Provide information about a resource.'
	'list:(ALPHA) List resources in a deployment.'
)

# groups

__auto-resources ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Deployment Manager resources." _resources_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _type_providers_arguments
_type_providers_arguments=(
	'create:(ALPHA) Create a type provider.'
	'delete:(ALPHA) Delete a type provider.'
	'describe:(ALPHA) Describe a type provider entry in Type Registry.'
	'list:(ALPHA) List type providers in a project.'
	'update:(ALPHA) Update a type provider.'
)

# groups

__auto-type_providers ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Deployment Manager type providers." _type_providers_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _types_arguments
_types_arguments=(
	'create:(ALPHA) Create a type.'
	'delete:(ALPHA) Delete a composite type.'
	'describe:(ALPHA) Describe a type.'
	'list:(ALPHA) Describe a type provider type.'
	'update:(ALPHA) Update a composite type.'
)

# groups

__auto-types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Deployment Manager types." _types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-deployment_manager ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage deployments of cloud resources." _deployment_manager_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (deployments)
      __auto-deployments
      ;;
      (manifests)
      __auto-manifests
      ;;
      (operations)
      __auto-operations
      ;;
      (resources)
      __auto-resources
      ;;
      (type_providers)
      __auto-type_providers
      ;;
      (types)
      __auto-types
      ;;
    esac
    ;;
	esac
}

local -a _dlp_arguments
_dlp_arguments=(
	'datasources:(ALPHA) Cloud DLP Commands for analyzing Google Cloud data
repositories.'
	'images:(ALPHA) Use Cloud DLP Image capabilities.'
	'job_triggers:(ALPHA) Cloud DLP commands for creating and managing Cloud DLP job
triggers.'
	'jobs:(ALPHA) Manage asynchronous, long-running Cloud DLP jobs.'
	'text:(ALPHA) Use Cloud DLP Text capabilities.'
)

# groups
local -a _datasources_arguments
_datasources_arguments=(
	'bigquery:(ALPHA) Cloud DLP Commands for analyzing data in BigQuery tables.'
	'datastore:(ALPHA) Cloud DLP Commands for analyzing data in Cloud Datastore
repositories.'
	'gcs:(ALPHA) Cloud DLP Commands for analyzing data in Google Cloud
Storage.'
)

# groups
local -a _bigquery_arguments
_bigquery_arguments=(
	'analyze:(ALPHA) Schedule a risk analysis job for content in a BigQuery
table.'
	'inspect:(ALPHA) Schedules a job to inspect content in a BigQuery table.'
)

# groups

__auto-bigquery ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud DLP Commands for analyzing data in BigQuery tables." _bigquery_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (analyze)
      __auto-analyze
      ;;
      (inspect)
      __auto-inspect
      ;;
    esac
    ;;
	esac
}

local -a _datastore_arguments
_datastore_arguments=(
	'inspect:(ALPHA) Schedules a job to inspect content in a Cloud Datastore.'
)

# groups

__auto-datastore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud DLP Commands for analyzing data in Cloud Datastore
repositories." _datastore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (inspect)
      __auto-inspect
      ;;
    esac
    ;;
	esac
}

local -a _gcs_arguments
_gcs_arguments=(
	'inspect:(ALPHA) Schedules a job to inspect content in a Google Cloud
Storage bucket.'
)

# groups

__auto-gcs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud DLP Commands for analyzing data in Google Cloud
Storage." _gcs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (inspect)
      __auto-inspect
      ;;
    esac
    ;;
	esac
}


__auto-datasources ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud DLP Commands for analyzing Google Cloud data
repositories." _datasources_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (bigquery)
      __auto-bigquery
      ;;
      (datastore)
      __auto-datastore
      ;;
      (gcs)
      __auto-gcs
      ;;
    esac
    ;;
	esac
}

local -a _images_arguments
_images_arguments=(
	'inspect:(ALPHA) Finds potentially sensitive data in image content.'
	'redact:(ALPHA) Redact potentially sensitive data from image content.'
)

# groups

__auto-images ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Use Cloud DLP Image capabilities." _images_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (inspect)
      __auto-inspect
      ;;
      (redact)
      __auto-redact
      ;;
    esac
    ;;
	esac
}

local -a _job_triggers_arguments
_job_triggers_arguments=(
	'create:(ALPHA) Creates a Cloud DLP job trigger.'
	'delete:(ALPHA) Delete a Cloud DLP job trigger.'
	'describe:(ALPHA) Get the latest status of a Cloud DLP job trigger.'
	'list:(ALPHA) List Cloud DLP job triggers.'
)

# groups

__auto-job_triggers ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud DLP commands for creating and managing Cloud DLP job
triggers." _job_triggers_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _jobs_arguments
_jobs_arguments=(
	'cancel:(ALPHA) Start the asynchronous cancellation of a Cloud DLP job.'
	'delete:(ALPHA) Delete a Cloud DLP job.'
	'describe:(ALPHA) Get the latest status of a Cloud DLP job.'
	'list:(ALPHA) List Cloud DLP jobs.'
)

# groups

__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage asynchronous, long-running Cloud DLP jobs." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _text_arguments
_text_arguments=(
	'inspect:(ALPHA) Find potentially sensitive data in text content.'
	'redact:(ALPHA) Redact potentially sensitive data from text content.'
)

# groups

__auto-text ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Use Cloud DLP Text capabilities." _text_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (inspect)
      __auto-inspect
      ;;
      (redact)
      __auto-redact
      ;;
    esac
    ;;
	esac
}


__auto-dlp ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage sensitive data with Cloud Data Loss Prevention." _dlp_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (datasources)
      __auto-datasources
      ;;
      (images)
      __auto-images
      ;;
      (job_triggers)
      __auto-job_triggers
      ;;
      (jobs)
      __auto-jobs
      ;;
      (text)
      __auto-text
      ;;
    esac
    ;;
	esac
}

local -a _emulators_arguments
_emulators_arguments=(
	'bigtable:(ALPHA) Manage your local Bigtable emulator.'
	'datastore:(ALPHA) Manage your local datastore emulator.'
	'pubsub:(ALPHA) Manage your local pubsub emulator.'
	'start:(ALPHA) Start a number of emulators behind a proxy.'
)

# groups
local -a _bigtable_arguments
_bigtable_arguments=(
	'env_init:(ALPHA) Print the commands required to export Bigtable emulator&#39;s
env variables.'
	'start:(ALPHA) Start a local Bigtable emulator.'
)

# groups

__auto-bigtable ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage your local Bigtable emulator." _bigtable_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (env_init)
      __auto-env_init
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}

local -a _datastore_arguments
_datastore_arguments=(
	'env_init:(ALPHA) Print the commands required to export env variables of a
datastore.'
	'env_unset:(ALPHA) Print the commands required to unset a datastore emulators
env variables.'
	'start:(ALPHA) Start a local datastore emulator.'
)

# groups

__auto-datastore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage your local datastore emulator." _datastore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (env_init)
      __auto-env_init
      ;;
      (env_unset)
      __auto-env_unset
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}

local -a _pubsub_arguments
_pubsub_arguments=(
	'env_init:(ALPHA) Print the commands required to export pubsub emulator&#39;s env
variables.'
	'start:(ALPHA) Start a local pubsub emulator.'
)

# groups

__auto-pubsub ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage your local pubsub emulator." _pubsub_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (env_init)
      __auto-env_init
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}


__auto-emulators ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Set up your local development environment using emulators." _emulators_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (bigtable)
      __auto-bigtable
      ;;
      (datastore)
      __auto-datastore
      ;;
      (pubsub)
      __auto-pubsub
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}

local -a _endpoints_arguments
_endpoints_arguments=(
	'configs:(ALPHA) View configurations for various services.'
	'operations:(ALPHA) Manage Operation for various services.'
	'services:(ALPHA) Manage Services.'
)

# groups
local -a _configs_arguments
_configs_arguments=(
	'describe:(ALPHA) Describes the configuration for a given version of a
service.'
	'list:(ALPHA) Lists the configurations for a given service.'
)

# groups

__auto-configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) View configurations for various services." _configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Describes an operation resource for a given operation name.'
	'list:(ALPHA) List operations for a project.'
	'wait:(ALPHA) Waits for an operation to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Operation for various services." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _services_arguments
_services_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a service.'
	'check_iam_policy:(ALPHA) Returns information about a member&#39;s permissions on a
service.'
	'delete:(ALPHA) Deletes a service from Google Service Management.'
	'deploy:(ALPHA) Deploys a service configuration for the given service name.'
	'describe:(ALPHA) Describes a service given a service name.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a service.'
	'list:(ALPHA) List services for a project.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a service.'
	'undelete:(ALPHA) Undeletes a service configuration that was previously
deleted.'
)

# groups

__auto-services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Services." _services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (check_iam_policy)
      __auto-check_iam_policy
      ;;
      (delete)
      __auto-delete
      ;;
      (deploy)
      __auto-deploy
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (undelete)
      __auto-undelete
      ;;
    esac
    ;;
	esac
}


__auto-endpoints ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create, enable and manage API services." _endpoints_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configs)
      __auto-configs
      ;;
      (operations)
      __auto-operations
      ;;
      (services)
      __auto-services
      ;;
    esac
    ;;
	esac
}

local -a _filestore_arguments
_filestore_arguments=(
	'instances:(ALPHA) Manage Cloud Filestore instances.'
	'locations:(ALPHA) List locations where Cloud Filestore is available.'
	'operations:(ALPHA) Read and manipulate Cloud Filestore operations.'
)

# groups
local -a _instances_arguments
_instances_arguments=(
	'create:(ALPHA) Create a Cloud Filestore instance.'
	'delete:(ALPHA) Delete a Cloud Filestore instance.'
	'describe:(ALPHA) Show metadata for a Cloud Filestore instance.'
	'list:(ALPHA) List all Cloud Filestore instances.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Filestore instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'describe:(ALPHA) Describe a Cloud Filestore location.'
	'list:(ALPHA) List all Cloud Filestore locations.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List locations where Cloud Filestore is available." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Describe a Cloud Filestore operation.'
	'list:(ALPHA) List all Cloud Filestore operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read and manipulate Cloud Filestore operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-filestore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manipulate Cloud Filestore resources." _filestore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (instances)
      __auto-instances
      ;;
      (locations)
      __auto-locations
      ;;
      (operations)
      __auto-operations
      ;;
    esac
    ;;
	esac
}

local -a _firebase_arguments
_firebase_arguments=(
	'test:(ALPHA) Interact with Firebase Test Lab.'
)

# groups
local -a _test_arguments
_test_arguments=(
	'android:(ALPHA) Command group for Android application testing.'
	'ios:(ALPHA) Command group for iOS application testing.'
	'network_profiles:(ALPHA) Explore network profiles available for testing.'
)

# groups
local -a _android_arguments
_android_arguments=(
	'locales:(ALPHA) Explore Android locales available for testing.'
	'models:(ALPHA) Explore Android models available in the Test Environment
catalog.'
	'versions:(ALPHA) Explore Android versions available for testing.'
	'run:(ALPHA) Invoke a test in Firebase Test Lab for Android and view
test results.'
)

# groups
local -a _locales_arguments
_locales_arguments=(
	'describe:(ALPHA) Describe an Android locale.'
	'list:(ALPHA) List all Android locales available for testing
internationalized apps.'
)

# groups

__auto-locales ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Explore Android locales available for testing." _locales_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _models_arguments
_models_arguments=(
	'describe:(ALPHA) Describe an Android model.'
	'list:(ALPHA) List all Android models available for testing.'
)

# groups

__auto-models ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Explore Android models available in the Test Environment
catalog." _models_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'describe:(ALPHA) Describe an Android OS version.'
	'list:(ALPHA) List all Android OS versions available for testing.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Explore Android versions available for testing." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-android ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Command group for Android application testing." _android_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (locales)
      __auto-locales
      ;;
      (models)
      __auto-models
      ;;
      (versions)
      __auto-versions
      ;;
      (run)
      __auto-run
      ;;
    esac
    ;;
	esac
}

local -a _ios_arguments
_ios_arguments=(
	'locales:(ALPHA) Explore iOS locales available for testing.'
	'models:(ALPHA) Explore iOS models available in the Test Environment
catalog.'
	'versions:(ALPHA) Explore iOS versions available for testing.'
	'run:(ALPHA) Invoke a test in Firebase Test Lab for iOS and view test
results.'
)

# groups
local -a _locales_arguments
_locales_arguments=(
	'describe:(ALPHA) Describe an iOS locale.'
	'list:(ALPHA) List all iOS locales available for testing
internationalized apps.'
)

# groups

__auto-locales ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Explore iOS locales available for testing." _locales_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _models_arguments
_models_arguments=(
	'describe:(ALPHA) Describe an iOS model.'
	'list:(ALPHA) List all iOS models available for testing.'
)

# groups

__auto-models ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Explore iOS models available in the Test Environment
catalog." _models_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'describe:(ALPHA) Describe an iOS operating system version.'
	'list:(ALPHA) List all iOS versions available for testing.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Explore iOS versions available for testing." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-ios ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Command group for iOS application testing." _ios_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (locales)
      __auto-locales
      ;;
      (models)
      __auto-models
      ;;
      (versions)
      __auto-versions
      ;;
      (run)
      __auto-run
      ;;
    esac
    ;;
	esac
}

local -a _network_profiles_arguments
_network_profiles_arguments=(
	'describe:(ALPHA) Describe a network profile.'
	'list:(ALPHA) List all network profiles available for testing.'
)

# groups

__auto-network_profiles ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Explore network profiles available for testing." _network_profiles_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-test ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Interact with Firebase Test Lab." _test_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (android)
      __auto-android
      ;;
      (ios)
      __auto-ios
      ;;
      (network_profiles)
      __auto-network_profiles
      ;;
    esac
    ;;
	esac
}


__auto-firebase ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Work with Google Firebase." _firebase_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (test)
      __auto-test
      ;;
    esac
    ;;
	esac
}

local -a _firestore_arguments
_firestore_arguments=(
	'operations:(ALPHA) Manage Long Running Operations for Cloud Firestore.'
	'export:(ALPHA) export Cloud Firestore documents to Google Cloud Storage.'
	'import:(ALPHA) import Cloud Firestore documents from Google Cloud Storage.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'cancel:(ALPHA) Cancel a currently-running Cloud Firestore admin operation.'
	'delete:(ALPHA) Delete a completed Cloud Firestore admin operation.'
	'describe:(ALPHA) Retrieves information about a Cloud Firestore admin
operation.'
	'list:(ALPHA) List pending Cloud Firestore admin operations and their
status.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Long Running Operations for Cloud Firestore." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-firestore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage your Cloud Firestore imports and exports." _firestore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
    esac
    ;;
	esac
}

local -a _functions_arguments
_functions_arguments=(
	'event_types:(ALPHA) List types of events that can be a trigger for a Google
Cloud Function.'
	'logs:(ALPHA) Display log entries produced by Google Cloud Functions.'
	'regions:(ALPHA) List regions available to Google Cloud Functions.'
	'call:(ALPHA) Trigger execution of a Google Cloud Function.'
	'delete:(ALPHA) Delete a Google Cloud Function.'
	'deploy:(ALPHA) Create or update a Google Cloud Function.'
	'describe:(ALPHA) Display details of a Google Cloud Function.'
	'list:(ALPHA) List Google Cloud Functions.'
)

# groups
local -a _event_types_arguments
_event_types_arguments=(
	'list:(ALPHA) List types of events that can be a trigger for a Google
Cloud Function.'
)

# groups

__auto-event_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List types of events that can be a trigger for a Google
Cloud Function." _event_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _logs_arguments
_logs_arguments=(
	'read:(ALPHA) Display log entries produced by Google Cloud Functions.'
)

# groups

__auto-logs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Display log entries produced by Google Cloud Functions." _logs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (read)
      __auto-read
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'list:(ALPHA) List regions available to Google Cloud Functions.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List regions available to Google Cloud Functions." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-functions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Google Cloud Functions." _functions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (event_types)
      __auto-event_types
      ;;
      (logs)
      __auto-logs
      ;;
      (regions)
      __auto-regions
      ;;
      (call)
      __auto-call
      ;;
      (delete)
      __auto-delete
      ;;
      (deploy)
      __auto-deploy
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _genomics_arguments
_genomics_arguments=(
	'callsets:(ALPHA) Commands for Genomics callsets.'
	'datasets:(ALPHA) Commands for Genomics datasets.'
	'operations:(ALPHA) Commands for Genomics operations.'
	'pipelines:(ALPHA) Commands for Genomics pipelines.'
	'readgroupsets:(ALPHA) Commands for Genomics read group sets.'
	'reads:(ALPHA) Commands for Genomics reads.'
	'references:(ALPHA) Commands for Genomics references.'
	'referencesets:(ALPHA) Commands for Genomics reference sets.'
	'variants:(ALPHA) Commands for Genomics variants.'
	'variantsets:(ALPHA) Commands for Genomics variant sets.'
)

# groups
local -a _callsets_arguments
_callsets_arguments=(
	'create:(ALPHA) Creates a call set with a specified name.'
	'delete:(ALPHA) Deletes a call set.'
	'describe:(ALPHA) Returns details about a call set.'
	'list:(ALPHA) List genomics call sets in a project.'
	'update:(ALPHA) Updates a call set name.'
)

# groups

__auto-callsets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics callsets." _callsets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _datasets_arguments
_datasets_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a dataset.'
	'create:(ALPHA) Creates a dataset with a specified name.'
	'delete:(ALPHA) Deletes a dataset.'
	'describe:(ALPHA) Returns details about a dataset.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a dataset.'
	'list:(ALPHA) List Genomics datasets in a project.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a dataset.'
	'restore:(ALPHA) Restores a deleted dataset.'
	'set_iam_policy:(ALPHA) Set IAM policy for a dataset.'
	'update:(ALPHA) Updates a dataset name.'
)

# groups

__auto-datasets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics datasets." _datasets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (restore)
      __auto-restore
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(ALPHA) Cancels an operation.'
	'describe:(ALPHA) Returns details about an operation.'
	'list:(ALPHA) List Genomics operations in a project.'
	'wait:(ALPHA) Waits for an operation to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _pipelines_arguments
_pipelines_arguments=(
	'run:(ALPHA) Defines and runs a pipeline.'
)

# groups

__auto-pipelines ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics pipelines." _pipelines_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (run)
      __auto-run
      ;;
    esac
    ;;
	esac
}

local -a _readgroupsets_arguments
_readgroupsets_arguments=(
	'delete:(ALPHA) Deletes a read group set.'
	'describe:(ALPHA) Returns details about a read group set.'
	'export:(ALPHA) Exports a read group set to a BAM file in cloud storage.'
	'import:(ALPHA) Imports read group sets into a dataset.'
	'list:(ALPHA) List genomics read group sets in a dataset.'
	'update:(ALPHA) Updates a readgroupset name and/or referenceSetId.'
)

# groups

__auto-readgroupsets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics read group sets." _readgroupsets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _reads_arguments
_reads_arguments=(
	'list:(ALPHA) Lists reads within a given read group set.'
)

# groups

__auto-reads ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics reads." _reads_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _references_arguments
_references_arguments=(
	'describe:(ALPHA) Returns details about a reference.'
	'list:(ALPHA) List genomics references.'
)

# groups

__auto-references ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics references." _references_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _referencesets_arguments
_referencesets_arguments=(
	'describe:(ALPHA) Returns details about a reference set.'
	'list:(ALPHA) List genomics reference sets.'
)

# groups

__auto-referencesets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics reference sets." _referencesets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _variants_arguments
_variants_arguments=(
	'delete:(ALPHA) Deletes a variant.'
	'describe:(ALPHA) Returns details about a variant.'
	'import:(ALPHA) Imports variants into Google Genomics.'
	'list:(ALPHA) Lists variants that match the search criteria.'
	'update:(ALPHA) Updates variant names.'
)

# groups

__auto-variants ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics variants." _variants_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _variantsets_arguments
_variantsets_arguments=(
	'create:(ALPHA) Creates a variant set belonging to a specified dataset.'
	'delete:(ALPHA) Deletes a variant set.'
	'describe:(ALPHA) Gets a variant set by ID.'
	'export:(ALPHA) Exports data from a variant set to an external destination.'
	'list:(ALPHA) List Genomics variant sets in a dataset.'
	'update:(ALPHA) Updates a variant set name or description.'
)

# groups

__auto-variantsets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Commands for Genomics variant sets." _variantsets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (export)
      __auto-export
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-genomics ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Genomics resources using version 1 of the API." _genomics_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (callsets)
      __auto-callsets
      ;;
      (datasets)
      __auto-datasets
      ;;
      (operations)
      __auto-operations
      ;;
      (pipelines)
      __auto-pipelines
      ;;
      (readgroupsets)
      __auto-readgroupsets
      ;;
      (reads)
      __auto-reads
      ;;
      (references)
      __auto-references
      ;;
      (referencesets)
      __auto-referencesets
      ;;
      (variants)
      __auto-variants
      ;;
      (variantsets)
      __auto-variantsets
      ;;
    esac
    ;;
	esac
}

local -a _iam_arguments
_iam_arguments=(
	'roles:(ALPHA) Create and manipulate roles.'
	'service_accounts:(ALPHA) Create and manipulate service accounts.'
	'list_grantable_roles:(ALPHA) List IAM grantable roles for a resource.'
	'list_testable_permissions:(ALPHA) List IAM testable permissions for a resource.'
)

# groups
local -a _roles_arguments
_roles_arguments=(
	'copy:(ALPHA) Create a role from an existing role.'
	'create:(ALPHA) Create a custom role for a project or an organization.'
	'delete:(ALPHA) Delete a custom role from an organization or a project.'
	'describe:(ALPHA) Show metadata for a role.'
	'list:(ALPHA) List the roles defined at a parent organization or a
project.'
	'undelete:(ALPHA) Undelete a custom role from an organization or a project.'
	'update:(ALPHA) Update an IAM custom role.'
)

# groups

__auto-roles ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manipulate roles." _roles_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (copy)
      __auto-copy
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (undelete)
      __auto-undelete
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _service_accounts_arguments
_service_accounts_arguments=(
	'keys:(ALPHA) Manage service account keys.'
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a service account.'
	'create:(ALPHA) Create a service account for a project.'
	'delete:(ALPHA) Delete a service account from a project.'
	'describe:(ALPHA) Show metadata for a service account from a project.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a service account.'
	'list:(ALPHA) List all of a project&#39;s service accounts.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a service account.'
	'set_iam_policy:(ALPHA) Set IAM policy for a service account.'
	'sign_blob:(ALPHA) Sign a blob with a managed service account key.'
	'sign_jwt:(ALPHA) Sign a JWT with a managed service account key.'
	'update:(ALPHA) Update an IAM service account.'
)

# groups
local -a _keys_arguments
_keys_arguments=(
	'create:(ALPHA) Create a private key for a service account.'
	'delete:(ALPHA) Delete a user-managed key from a service account.'
	'get_public_key:(ALPHA) Get the public key for a service account key pair.'
	'list:(ALPHA) List the keys for a service account.'
)

# groups

__auto-keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage service account keys." _keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (get_public_key)
      __auto-get_public_key
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-service_accounts ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manipulate service accounts." _service_accounts_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (keys)
      __auto-keys
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (sign_blob)
      __auto-sign_blob
      ;;
      (sign_jwt)
      __auto-sign_jwt
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-iam ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage IAM service accounts and keys." _iam_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (roles)
      __auto-roles
      ;;
      (service_accounts)
      __auto-service_accounts
      ;;
      (list_grantable_roles)
      __auto-list_grantable_roles
      ;;
      (list_testable_permissions)
      __auto-list_testable_permissions
      ;;
    esac
    ;;
	esac
}

local -a _iot_arguments
_iot_arguments=(
	'devices:(ALPHA) Manage Cloud IoT Devices.'
	'registries:(ALPHA) Manage Cloud IoT Registries.'
)

# groups
local -a _devices_arguments
_devices_arguments=(
	'configs:(ALPHA) Manage configurations for Cloud IoT devices.'
	'credentials:(ALPHA) Manage credentials for Cloud IoT devices.'
	'states:(ALPHA) Manage states for Cloud IoT devices.'
	'create:(ALPHA) Create a new device.'
	'delete:(ALPHA) Delete a device.'
	'describe:(ALPHA) Show details about a device.'
	'list:(ALPHA) List devices.'
	'update:(ALPHA) Update an existing device.'
)

# groups
local -a _configs_arguments
_configs_arguments=(
	'describe:(ALPHA) Show details about the latest configuration for a device.'
	'get_value:(ALPHA) Show the binary data of a device&#39;s latest configuration.'
	'list:(ALPHA) List configs for a device.'
	'update:(ALPHA) Update a specific device configuration.'
)

# groups

__auto-configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage configurations for Cloud IoT devices." _configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (get_value)
      __auto-get_value
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _credentials_arguments
_credentials_arguments=(
	'clear:(ALPHA) Delete all credentials from a device.'
	'create:(ALPHA) Add a new credential to a device.'
	'delete:(ALPHA) Delete a credential from a device.'
	'describe:(ALPHA) Show details about a specific device credential.'
	'list:(ALPHA) List credentials for a device.'
	'update:(ALPHA) Update a specific device credential.'
)

# groups

__auto-credentials ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage credentials for Cloud IoT devices." _credentials_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clear)
      __auto-clear
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _states_arguments
_states_arguments=(
	'list:(ALPHA) List states for a device.'
)

# groups

__auto-states ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage states for Cloud IoT devices." _states_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-devices ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud IoT Devices." _devices_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configs)
      __auto-configs
      ;;
      (credentials)
      __auto-credentials
      ;;
      (states)
      __auto-states
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _registries_arguments
_registries_arguments=(
	'credentials:(ALPHA) Manage credentials for Cloud IoT devices.'
	'add_iam_policy_binding:(ALPHA) add an IAM policy binding to a device registry.'
	'create:(ALPHA) Create a new device registry.'
	'delete:(ALPHA) Delete a device registry.'
	'describe:(ALPHA) Show details about a device registry.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a device registry.'
	'list:(ALPHA) List device registries.'
	'remove_iam_policy_binding:(ALPHA) Remove an IAM policy binding from a device registry.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a device registry.'
	'update:(ALPHA) Update a device registry.'
)

# groups
local -a _credentials_arguments
_credentials_arguments=(
	'clear:(ALPHA) Delete all credentials from a registry.'
	'create:(ALPHA) Add a new credential to a registry.'
	'delete:(ALPHA) Delete a credential from a registry.'
	'describe:(ALPHA) Show details about a specific registry credential.'
	'list:(ALPHA) List credentials for a registry.'
)

# groups

__auto-credentials ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage credentials for Cloud IoT devices." _credentials_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clear)
      __auto-clear
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-registries ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud IoT Registries." _registries_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (credentials)
      __auto-credentials
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-iot ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud IoT resources." _iot_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (devices)
      __auto-devices
      ;;
      (registries)
      __auto-registries
      ;;
    esac
    ;;
	esac
}

local -a _kms_arguments
_kms_arguments=(
	'keyrings:(ALPHA) Create and manage keyrings.'
	'keys:(ALPHA) Create and manage keys.'
	'locations:(ALPHA) View locations available for a project.'
	'asymmetric_decrypt:(ALPHA) Decrypt an input file using an asymmetric-encryption key
version.'
	'asymmetric_sign:(ALPHA) Sign a user input file using an asymmetric-signing key
version.'
	'decrypt:(ALPHA) Decrypt a ciphertext file using a Cloud KMS key.'
	'encrypt:(ALPHA) Encrypt a plaintext file using a key.'
)

# groups
local -a _keyrings_arguments
_keyrings_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding to a keyring.'
	'create:(ALPHA) Create a new keyring.'
	'describe:(ALPHA) Get metadata for a keyring.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a keyring.'
	'list:(ALPHA) List keyrings within a location.'
	'remove_iam_policy_binding:(ALPHA) Remove a policy binding from a keyring.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a keyring.'
)

# groups

__auto-keyrings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage keyrings." _keyrings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _keys_arguments
_keys_arguments=(
	'versions:(ALPHA) Create and manage versions.'
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding to a key.'
	'create:(ALPHA) Create a new key.'
	'describe:(ALPHA) Get metadata for a given key.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a key.'
	'list:(ALPHA) List the keys within a keyring.'
	'remove_iam_policy_binding:(ALPHA) Remove an IAM policy binding from a key.'
	'remove_rotation_schedule:(ALPHA) Remove the rotation schedule for a key.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a key.'
	'set_primary_version:(ALPHA) Set the primary version of a key.'
	'set_rotation_schedule:(ALPHA) Update the rotation schedule for a key.'
	'update:(ALPHA) Update a key.'
)

# groups
local -a _versions_arguments
_versions_arguments=(
	'create:(ALPHA) Create a new version.'
	'describe:(ALPHA) Get metadata for a given version.'
	'destroy:(ALPHA) Schedule a version to be destroyed.'
	'disable:(ALPHA) Disable a given version.'
	'enable:(ALPHA) Enable a given version.'
	'get_public_key:(ALPHA) Get the public key for a given version.'
	'list:(ALPHA) List the versions within a key.'
	'restore:(ALPHA) Restore a version scheduled for destruction.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage versions." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (destroy)
      __auto-destroy
      ;;
      (disable)
      __auto-disable
      ;;
      (enable)
      __auto-enable
      ;;
      (get_public_key)
      __auto-get_public_key
      ;;
      (list)
      __auto-list
      ;;
      (restore)
      __auto-restore
      ;;
    esac
    ;;
	esac
}


__auto-keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage keys." _keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (versions)
      __auto-versions
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_rotation_schedule)
      __auto-remove_rotation_schedule
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (set_primary_version)
      __auto-set_primary_version
      ;;
      (set_rotation_schedule)
      __auto-set_rotation_schedule
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'list:(ALPHA) List the project&#39;s locations.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) View locations available for a project." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-kms ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage cryptographic keys in the cloud." _kms_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (keyrings)
      __auto-keyrings
      ;;
      (keys)
      __auto-keys
      ;;
      (locations)
      __auto-locations
      ;;
      (asymmetric_decrypt)
      __auto-asymmetric_decrypt
      ;;
      (asymmetric_sign)
      __auto-asymmetric_sign
      ;;
      (decrypt)
      __auto-decrypt
      ;;
      (encrypt)
      __auto-encrypt
      ;;
    esac
    ;;
	esac
}

local -a _ml_arguments
_ml_arguments=(
	'language:(ALPHA) Use the Google Cloud Natural Language API to analyze text.'
	'speech:(ALPHA) Use Google Cloud Speech to get transcripts of audio.'
	'video:(ALPHA) Cloud ML Video-Intelligence command groups.'
	'vision:(ALPHA) Use Google Cloud Vision to analyze images.'
)

# groups
local -a _language_arguments
_language_arguments=(
	'analyze_entities:(ALPHA) Use Google Cloud Natural Language API to identify entities
in text.'
	'analyze_entity_sentiment:(ALPHA) Use Google Cloud Natural Language API to identify
entity-level sentiment.'
	'analyze_sentiment:(ALPHA) Use Google Cloud Natural Language API to identify
sentiments in a text.'
	'analyze_syntax:(ALPHA) Use Google Cloud Natural Language API to identify
linguistic information.'
	'classify_text:(ALPHA) Classifies input document into categories.'
)

# groups

__auto-language ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Use the Google Cloud Natural Language API to analyze text." _language_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (analyze_entities)
      __auto-analyze_entities
      ;;
      (analyze_entity_sentiment)
      __auto-analyze_entity_sentiment
      ;;
      (analyze_sentiment)
      __auto-analyze_sentiment
      ;;
      (analyze_syntax)
      __auto-analyze_syntax
      ;;
      (classify_text)
      __auto-classify_text
      ;;
    esac
    ;;
	esac
}

local -a _speech_arguments
_speech_arguments=(
	'operations:(ALPHA) Interact with Google Cloud Speech operations.'
	'recognize:(ALPHA) Get transcripts of short (less than 60 seconds) audio from
an audio file.'
	'recognize_long_running:(ALPHA) Get transcripts of longer audio from an audio file.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Get description of a long-running speech recognition
operation.'
	'wait:(ALPHA) Poll long-running speech recognition operation until it
completes.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Interact with Google Cloud Speech operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-speech ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Use Google Cloud Speech to get transcripts of audio." _speech_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (recognize)
      __auto-recognize
      ;;
      (recognize_long_running)
      __auto-recognize_long_running
      ;;
    esac
    ;;
	esac
}

local -a _video_arguments
_video_arguments=(
	'operations:(ALPHA) Command group for working with Cloud Video Intelligence
operations.'
	'detect_explicit_content:(ALPHA) Detect explicit content in videos.'
	'detect_labels:(ALPHA) Detect general labels for videos.'
	'detect_shot_changes:(ALPHA) Detect shot changes in videos.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Get description of a long-running video analysis operation.'
	'wait:(ALPHA) Poll long-running video analysis operation until it
completes.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Command group for working with Cloud Video Intelligence
operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-video ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud ML Video-Intelligence command groups." _video_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (detect_explicit_content)
      __auto-detect_explicit_content
      ;;
      (detect_labels)
      __auto-detect_labels
      ;;
      (detect_shot_changes)
      __auto-detect_shot_changes
      ;;
    esac
    ;;
	esac
}

local -a _vision_arguments
_vision_arguments=(
	'detect_document:(ALPHA) Detect dense text in an image.'
	'detect_faces:(ALPHA) Detect faces within an image.'
	'detect_image_properties:(ALPHA) Detect general attributes of an image.'
	'detect_labels:(ALPHA) Detect broad sets of categories within an image.'
	'detect_landmarks:(ALPHA) Detect popular natural and man-made structures within an
image.'
	'detect_logos:(ALPHA) Detect popular product logos within an image.'
	'detect_safe_search:(ALPHA) Detect explicit content in an image.'
	'detect_text:(ALPHA) Detect and extract text within an image.'
	'detect_web:(ALPHA) Detect entities in an image from similar images on the web.'
	'suggest_crop:(ALPHA) Suggest a bounding box in an image.'
)

# groups

__auto-vision ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Use Google Cloud Vision to analyze images." _vision_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (detect_document)
      __auto-detect_document
      ;;
      (detect_faces)
      __auto-detect_faces
      ;;
      (detect_image_properties)
      __auto-detect_image_properties
      ;;
      (detect_labels)
      __auto-detect_labels
      ;;
      (detect_landmarks)
      __auto-detect_landmarks
      ;;
      (detect_logos)
      __auto-detect_logos
      ;;
      (detect_safe_search)
      __auto-detect_safe_search
      ;;
      (detect_text)
      __auto-detect_text
      ;;
      (detect_web)
      __auto-detect_web
      ;;
      (suggest_crop)
      __auto-suggest_crop
      ;;
    esac
    ;;
	esac
}


__auto-ml ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Use Google Cloud machine learning capabilities." _ml_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (language)
      __auto-language
      ;;
      (speech)
      __auto-speech
      ;;
      (video)
      __auto-video
      ;;
      (vision)
      __auto-vision
      ;;
    esac
    ;;
	esac
}

local -a _ml_engine_arguments
_ml_engine_arguments=(
	'jobs:(ALPHA) Cloud ML Engine Jobs commands.'
	'local:(ALPHA) Cloud ML Engine Local commands.'
	'locations:(ALPHA) Query Cloud ML Engine location capabilities.'
	'models:(ALPHA) Cloud ML Engine Models commands.'
	'operations:(ALPHA) Manage Cloud ML Engine operations.'
	'versions:(ALPHA) Cloud ML Engine Versions commands.'
	'predict:(ALPHA) Run Cloud ML Engine online prediction.'
)

# groups
local -a _jobs_arguments
_jobs_arguments=(
	'submit:(ALPHA) Cloud ML Engine Jobs submit commands.'
	'cancel:(ALPHA) Cancel a running Cloud ML Engine job.'
	'describe:(ALPHA) Describe a Cloud ML Engine job.'
	'list:(ALPHA) List existing Cloud ML Engine jobs.'
	'stream_logs:(ALPHA) Show logs from a running Cloud ML Engine job.'
	'update:(ALPHA) Update a Cloud ML Engine jobs.'
)

# groups
local -a _submit_arguments
_submit_arguments=(
	'prediction:(ALPHA) Start a Cloud ML Engine batch prediction job.'
	'training:(ALPHA) Submit a Cloud Machine Learning training job.'
)

# groups

__auto-submit ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud ML Engine Jobs submit commands." _submit_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (prediction)
      __auto-prediction
      ;;
      (training)
      __auto-training
      ;;
    esac
    ;;
	esac
}


__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud ML Engine Jobs commands." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (submit)
      __auto-submit
      ;;
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (stream_logs)
      __auto-stream_logs
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _local_arguments
_local_arguments=(
	'predict:(ALPHA) Run prediction locally.'
	'train:(ALPHA) Run a Cloud ML Engine training job locally.'
)

# groups

__auto-local ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud ML Engine Local commands." _local_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (predict)
      __auto-predict
      ;;
      (train)
      __auto-train
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'describe:(ALPHA) Display CMLE capabilities in a location.'
	'list:(ALPHA) List CMLE Locations.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Query Cloud ML Engine location capabilities." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _models_arguments
_models_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding to a model.'
	'create:(ALPHA) Create a new Cloud ML Engine model.'
	'delete:(ALPHA) Delete an existing Cloud ML Engine model.'
	'describe:(ALPHA) Describe an existing Cloud ML Engine model.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a model.'
	'list:(ALPHA) List existing Cloud ML Engine models.'
	'remove_iam_policy_binding:(ALPHA) Remove a policy binding from a model.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a model.'
	'update:(ALPHA) Update an existing Cloud ML Engine model.'
)

# groups

__auto-models ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud ML Engine Models commands." _models_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(ALPHA) Cancel a Cloud ML Engine operation.'
	'delete:(ALPHA) Delete a Cloud ML Engine operation.'
	'describe:(ALPHA) Describe a Cloud ML Engine operation.'
	'list:(ALPHA) List existing Cloud ML Engine jobs.'
	'wait:(ALPHA) Wait for a Cloud ML Engine operation to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud ML Engine operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'create:(ALPHA) Create a new Cloud ML Engine version.'
	'delete:(ALPHA) Delete an existing Cloud ML Engine version.'
	'describe:(ALPHA) Describe an existing Cloud ML Engine version.'
	'list:(ALPHA) List existing Cloud ML Engine versions.'
	'set_default:(ALPHA) Sets an existing Cloud ML Engine version as the default for
its model.'
	'update:(ALPHA) Update a Cloud ML Engine version.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud ML Engine Versions commands." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (set_default)
      __auto-set_default
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-ml_engine ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud ML Engine jobs and models." _ml_engine_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (jobs)
      __auto-jobs
      ;;
      (local)
      __auto-local
      ;;
      (locations)
      __auto-locations
      ;;
      (models)
      __auto-models
      ;;
      (operations)
      __auto-operations
      ;;
      (versions)
      __auto-versions
      ;;
      (predict)
      __auto-predict
      ;;
    esac
    ;;
	esac
}

local -a _monitoring_arguments
_monitoring_arguments=(
	'channel_descriptors:(ALPHA) Read Stackdriver Monitoring notification channel
descriptors.'
	'channels:(ALPHA) Manage Stackdriver Monitoring notification channels.'
	'policies:(ALPHA) Manage Stackdriver Monitoring alerting policies.'
)

# groups
local -a _channel_descriptors_arguments
_channel_descriptors_arguments=(
	'describe:(ALPHA) Describe a notification channel descriptor.'
	'list:(ALPHA) List notification channel descriptors.'
)

# groups

__auto-channel_descriptors ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Read Stackdriver Monitoring notification channel
descriptors." _channel_descriptors_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _channels_arguments
_channels_arguments=(
	'create:(ALPHA) Create a new notification channel.'
	'delete:(ALPHA) Delete a notification channel.'
	'describe:(ALPHA) Describe a notification channel.'
	'list:(ALPHA) List notification channels.'
	'update:(ALPHA) Update a notification channel.'
)

# groups

__auto-channels ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Stackdriver Monitoring notification channels." _channels_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _policies_arguments
_policies_arguments=(
	'conditions:(ALPHA) Manage Stackdriver Monitoring alerting policy conditions.'
	'create:(ALPHA) Create a new alerting policy.'
	'delete:(ALPHA) Delete a Stackdriver alerting policy.'
	'describe:(ALPHA) Describe an alerting policy.'
	'list:(ALPHA) List alerting policies.'
	'update:(ALPHA) Updates an alerting policy.'
)

# groups
local -a _conditions_arguments
_conditions_arguments=(
	'create:(ALPHA) Create a condition in an alerting policy.'
	'delete:(ALPHA) Delete a condition in an alerting policy.'
	'describe:(ALPHA) Describe a condition in a Stackdriver alerting policy.'
	'update:(ALPHA) Update a condition in an alerting policy.'
)

# groups

__auto-conditions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Stackdriver Monitoring alerting policy conditions." _conditions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-policies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Stackdriver Monitoring alerting policies." _policies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (conditions)
      __auto-conditions
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-monitoring ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Stackdriver Monitoring alerting policies and
notification channels." _monitoring_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (channel_descriptors)
      __auto-channel_descriptors
      ;;
      (channels)
      __auto-channels
      ;;
      (policies)
      __auto-policies
      ;;
    esac
    ;;
	esac
}

local -a _organizations_arguments
_organizations_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a organization.'
	'describe:(ALPHA) Show metadata for an organization.'
	'get_iam_policy:(ALPHA) Get the IAM policy for an organization.'
	'list:(ALPHA) List organizations accessible by the active account.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a organization.'
	'set_iam_policy:(ALPHA) Set IAM policy for an organization.'
)

# groups

__auto-organizations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage Google Cloud Platform Organizations." _organizations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _projects_arguments
_projects_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a project.'
	'create:(ALPHA) Create a new project.'
	'delete:(ALPHA) Delete a project.'
	'describe:(ALPHA) Show metadata for a project.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a project.'
	'list:(ALPHA) List projects accessible by the active account.'
	'move:(ALPHA) Move a project into an organization.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a project.'
	'set_iam_policy:(ALPHA) Set IAM policy for a project.'
	'undelete:(ALPHA) Undelete a project.'
	'update:(ALPHA) Update the name and/or labels of a project.'
)

# groups

__auto-projects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage project access policies." _projects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (move)
      __auto-move
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (undelete)
      __auto-undelete
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _pubsub_arguments
_pubsub_arguments=(
	'snapshots:(ALPHA) Manage Cloud Pub/Sub snapshots.'
	'subscriptions:(ALPHA) Manage Cloud Pubsub subscriptions.'
	'topics:(ALPHA) Manage Cloud Pubsub topics.'
)

# groups
local -a _snapshots_arguments
_snapshots_arguments=(
	'create:(ALPHA) Creates one or more Cloud Pub/Sub snapshots.'
	'delete:(ALPHA) Deletes one or more Cloud Pub/Sub snapshots.'
	'describe:(ALPHA) Describes a Cloud Pub/Sub snapshot.'
	'list:(ALPHA) Lists all the snapshots in a given project.'
)

# groups

__auto-snapshots ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Pub/Sub snapshots." _snapshots_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _subscriptions_arguments
_subscriptions_arguments=(
	'ack:(ALPHA) Acknowledges one or more messages on the specified
subscription.'
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a subscription.'
	'create:(ALPHA) Creates one or more Cloud Pub/Sub subscriptions.'
	'delete:(ALPHA) Deletes one or more Cloud Pub/Sub subscriptions.'
	'describe:(ALPHA) Describes a Cloud Pub/Sub subscription.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a subscription.'
	'list:(ALPHA) Lists Cloud Pub/Sub subscriptions.'
	'modify_ack_deadline:(ALPHA) (DEPRECATED) Modifies the ACK deadline for a
specific Cloud Pub/Sub message.'
	'modify_message_ack_deadline:(ALPHA) Modifies the ACK deadline for a specific Cloud Pub/Sub
message.'
	'modify_push_config:(ALPHA) Modifies the push configuration of a Cloud Pub/Sub
subscription.'
	'pull:(ALPHA) Pulls one or more Cloud Pub/Sub messages from a
subscription.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a subscription.'
	'seek:(ALPHA) Resets a subscription&#39;s backlog to a point in time or to a
given snapshot.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Cloud Pub/Sub Subscription.'
	'update:(ALPHA) Updates an existing Cloud Pub/Sub subscription.'
)

# groups

__auto-subscriptions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Pubsub subscriptions." _subscriptions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (ack)
      __auto-ack
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (modify_ack_deadline)
      __auto-modify_ack_deadline
      ;;
      (modify_message_ack_deadline)
      __auto-modify_message_ack_deadline
      ;;
      (modify_push_config)
      __auto-modify_push_config
      ;;
      (pull)
      __auto-pull
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (seek)
      __auto-seek
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _topics_arguments
_topics_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a topic.'
	'create:(ALPHA) Creates one or more Cloud Pub/Sub topics.'
	'delete:(ALPHA) Deletes one or more Cloud Pub/Sub topics.'
	'describe:(ALPHA) Describes a Cloud Pub/Sub topic.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a topic.'
	'list:(ALPHA) Lists Cloud Pub/Sub topics within a project.'
	'list_snapshots:(ALPHA) Lists Cloud Pub/Sub snapshots from a given topic.'
	'list_subscriptions:(ALPHA) Lists Cloud Pub/Sub subscriptions from a given topic.'
	'publish:(ALPHA) Publishes a message to the specified topic.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a topic.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Cloud Pub/Sub Topic.'
	'update:(ALPHA) This feature is part of an invite-only release of the Cloud
Pub/Sub API.'
)

# groups

__auto-topics ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Pubsub topics." _topics_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (list_snapshots)
      __auto-list_snapshots
      ;;
      (list_subscriptions)
      __auto-list_subscriptions
      ;;
      (publish)
      __auto-publish
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-pubsub ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Pub/Sub topics and subscriptions." _pubsub_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (snapshots)
      __auto-snapshots
      ;;
      (subscriptions)
      __auto-subscriptions
      ;;
      (topics)
      __auto-topics
      ;;
    esac
    ;;
	esac
}

local -a _redis_arguments
_redis_arguments=(
	'instances:(ALPHA) Manage Cloud Memorystore Redis instances.'
	'operations:(ALPHA) Manage Cloud Memorystore Redis operations.'
	'regions:(ALPHA) Manage Cloud Memorystore Redis regions.'
	'zones:(ALPHA) Manage Cloud Memorystore Redis zones.'
)

# groups
local -a _instances_arguments
_instances_arguments=(
	'create:(ALPHA) Create a Memorystore Redis instance.'
	'delete:(ALPHA) Delete a Redis instance.'
	'describe:(ALPHA) Show metadata for a Memorystore Redis instance.'
	'list:(ALPHA) List Memorystore Redis instances.'
	'update:(ALPHA) Update Memorystore Redis instances.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Memorystore Redis instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Show metadata for a Memorystore Redis operation.'
	'list:(ALPHA) List Memorystore Redis operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Memorystore Redis operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'describe:(ALPHA) Show metadata for a Memorystore Redis region.'
	'list:(ALPHA) List Memorystore Redis regions.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Memorystore Redis regions." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _zones_arguments
_zones_arguments=(
	'list:(ALPHA) List Memorystore Redis zones.'
)

# groups

__auto-zones ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Memorystore Redis zones." _zones_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-redis ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Memorystore Redis resources." _redis_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (instances)
      __auto-instances
      ;;
      (operations)
      __auto-operations
      ;;
      (regions)
      __auto-regions
      ;;
      (zones)
      __auto-zones
      ;;
    esac
    ;;
	esac
}

local -a _resource_manager_arguments
_resource_manager_arguments=(
	'folders:(ALPHA) Manage Cloud Folders.'
	'liens:(ALPHA) Manage Cloud Resource Manager Liens.'
	'operations:(ALPHA) Query Cloud Resource Manager long-running operations.'
	'org_policies:(ALPHA) Manage Org Policies.'
)

# groups
local -a _folders_arguments
_folders_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a folder.'
	'create:(ALPHA) Create a new folder.'
	'delete:(ALPHA) Delete a folder.'
	'describe:(ALPHA) Show metadata for a folder.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a folder.'
	'list:(ALPHA) List folders accessible by the active account.'
	'move:(ALPHA) Move a folder to a new position within the same
organization.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a folder.'
	'set_iam_policy:(ALPHA) Set IAM policy for a folder.'
	'undelete:(ALPHA) Undelete a folder.'
	'update:(ALPHA) Update the display name of a folder.'
)

# groups

__auto-folders ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Folders." _folders_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (move)
      __auto-move
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (undelete)
      __auto-undelete
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _liens_arguments
_liens_arguments=(
	'create:(ALPHA) Create a new lien.'
	'delete:(ALPHA) Delete a lien.'
	'list:(ALPHA) List liens associated with the specified project.'
)

# groups

__auto-liens ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Resource Manager Liens." _liens_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Show metadata for an operation.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Query Cloud Resource Manager long-running operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
    esac
    ;;
	esac
}

local -a _org_policies_arguments
_org_policies_arguments=(
	'allow:(ALPHA) Add values to an Organization Policy allowed_values list
policy.'
	'delete:(ALPHA) Delete an Organization Policy.'
	'deny:(ALPHA) Add values to an Organization Policy denied_values list
policy.'
	'describe:(ALPHA) Describe an Organization Policy.'
	'disable_enforce:(ALPHA) Turns off enforcement of boolean Organization Policy
constraint.'
	'enable_enforce:(ALPHA) Turns on enforcement of boolean Organization Policy
constraint.'
	'list:(ALPHA) List Organization Policies associated with the specified
resource.'
	'set_policy:(ALPHA) Set Organization Policy.'
)

# groups

__auto-org_policies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Org Policies." _org_policies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (allow)
      __auto-allow
      ;;
      (delete)
      __auto-delete
      ;;
      (deny)
      __auto-deny
      ;;
      (describe)
      __auto-describe
      ;;
      (disable_enforce)
      __auto-disable_enforce
      ;;
      (enable_enforce)
      __auto-enable_enforce
      ;;
      (list)
      __auto-list
      ;;
      (set_policy)
      __auto-set_policy
      ;;
    esac
    ;;
	esac
}


__auto-resource_manager ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Resources." _resource_manager_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (folders)
      __auto-folders
      ;;
      (liens)
      __auto-liens
      ;;
      (operations)
      __auto-operations
      ;;
      (org_policies)
      __auto-org_policies
      ;;
    esac
    ;;
	esac
}

local -a _resources_arguments
_resources_arguments=(
	'list:(ALPHA) List Google Cloud resources accessible from your account.'
)

# groups

__auto-resources ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List and search resources accessible from your account." _resources_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _scheduler_arguments
_scheduler_arguments=(
	'jobs:(ALPHA) Manage Cloud Scheduler jobs.'
)

# groups
local -a _jobs_arguments
_jobs_arguments=(
	'create_app_engine_job:(ALPHA) Create a Cloud Scheduler job with an App Engine target.'
	'create_http_job:(ALPHA) Create a Cloud Scheduler job that triggers an action via
HTTP.'
	'create_pubsub_job:(ALPHA) Create a Cloud Scheduler job with a Pub/Sub target.'
	'delete:(ALPHA) Delete a job.'
	'describe:(ALPHA) Show details about a job.'
	'list:(ALPHA) List jobs.'
	'run:(ALPHA) Trigger an on-demand execution of a job.'
)

# groups

__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Scheduler jobs." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create_app_engine_job)
      __auto-create_app_engine_job
      ;;
      (create_http_job)
      __auto-create_http_job
      ;;
      (create_pubsub_job)
      __auto-create_pubsub_job
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (run)
      __auto-run
      ;;
    esac
    ;;
	esac
}


__auto-scheduler ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Scheduler jobs and schedules." _scheduler_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (jobs)
      __auto-jobs
      ;;
    esac
    ;;
	esac
}

local -a _services_arguments
_services_arguments=(
	'operations:(ALPHA) Manage Operation for various services.'
	'vpc_peerings:(ALPHA) VPC Peerings to various services.'
	'disable:(ALPHA) Disable a service for consumption for a project.'
	'enable:(ALPHA) Enables a service for consumption for a project.'
	'list:(ALPHA) List services for a project.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Describes an operation resource for a given operation name.'
	'list:(ALPHA) (DEPRECATED) List operations for a project.'
	'wait:(ALPHA) Waits for an operation to complete for a given operation
name.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Operation for various services." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _vpc_peerings_arguments
_vpc_peerings_arguments=(
	'operations:(ALPHA) Manage VPC Peering operations.'
	'connect:(ALPHA) Connect to a service via VPC peering for a project network.'
	'list:(ALPHA) List connections to a service via VPC peering for a project
network.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Describes an operation resource for a given operation name.'
	'wait:(ALPHA) Waits for an operation to complete for a given operation
name.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage VPC Peering operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-vpc_peerings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) VPC Peerings to various services." _vpc_peerings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (connect)
      __auto-connect
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) List, enable and disable APIs and services." _services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (vpc_peerings)
      __auto-vpc_peerings
      ;;
      (disable)
      __auto-disable
      ;;
      (enable)
      __auto-enable
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _source_arguments
_source_arguments=(
	'project_configs:(ALPHA) Manage Cloud Source Repositories configuration of a
project.'
	'repos:(ALPHA) Manage cloud source repositories.'
)

# groups
local -a _project_configs_arguments
_project_configs_arguments=(
	'describe:(ALPHA) Show details about the configuration of a project.'
	'update:(ALPHA) Update the Cloud Source Repositories configuration of the
current project.'
)

# groups

__auto-project_configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Source Repositories configuration of a
project." _project_configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _repos_arguments
_repos_arguments=(
	'clone:(ALPHA) Clone a cloud source repository.'
	'create:(ALPHA) Create a cloud source repository.'
	'delete:(ALPHA) Delete a cloud source repository.'
	'describe:(ALPHA) Describe a cloud source repository.'
	'get_iam_policy:(ALPHA) Get the IAM policy for the named cloud source repository.'
	'list:(ALPHA) List the repositories the currently active project.'
	'set_iam_policy:(ALPHA) Set the IAM policy for the named repository.'
	'update:(ALPHA) Update the configuration of a Cloud Source Repository.'
)

# groups

__auto-repos ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage cloud source repositories." _repos_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clone)
      __auto-clone
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-source ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Cloud git repository commands." _source_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (project_configs)
      __auto-project_configs
      ;;
      (repos)
      __auto-repos
      ;;
    esac
    ;;
	esac
}

local -a _spanner_arguments
_spanner_arguments=(
	'databases:(ALPHA) Manage Cloud Spanner databases.'
	'instance_configs:(ALPHA) Manage Cloud Spanner instance configs.'
	'instances:(ALPHA) Manage Cloud Spanner instances.'
	'operations:(ALPHA) Manage Cloud Spanner operations.'
	'rows:(ALPHA) Manage the rows in Cloud Spanner databases.'
)

# groups
local -a _databases_arguments
_databases_arguments=(
	'ddl:(ALPHA) Manage the DDL for Cloud Spanner databases.'
	'sessions:(ALPHA) Manage the sessions for Cloud Spanner databases.'
	'add_iam_policy_binding:(ALPHA) Add an IAM policy binding to a Cloud Spanner database.'
	'create:(ALPHA) Create a Cloud Spanner database.'
	'delete:(ALPHA) Delete a Cloud Spanner database.'
	'describe:(ALPHA) Describe a Cloud Spanner database.'
	'execute_sql:(ALPHA) Executes a read-only SQL query against a Cloud Spanner
database.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Cloud Spanner database.'
	'list:(ALPHA) List the Cloud Spanner databases contained within the given
instance.'
	'remove_iam_policy_binding:(ALPHA) Remove an IAM policy binding from a Cloud Spanner database.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Cloud Spanner database.'
)

# groups
local -a _ddl_arguments
_ddl_arguments=(
	'describe:(ALPHA) Describe the DDL for a Cloud Spanner database.'
	'update:(ALPHA) Update the DDL for a Cloud Spanner database.'
)

# groups

__auto-ddl ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage the DDL for Cloud Spanner databases." _ddl_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _sessions_arguments
_sessions_arguments=(
	'delete:(ALPHA) Delete a Cloud Spanner session.'
	'list:(ALPHA) List the Cloud Spanner sessions contained within the given
database.'
)

# groups

__auto-sessions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage the sessions for Cloud Spanner databases." _sessions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-databases ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Spanner databases." _databases_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (ddl)
      __auto-ddl
      ;;
      (sessions)
      __auto-sessions
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (execute_sql)
      __auto-execute_sql
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _instance_configs_arguments
_instance_configs_arguments=(
	'describe:(ALPHA) Describe a Cloud Spanner instance config.'
	'list:(ALPHA) List the available Cloud Spanner instance configs.'
)

# groups

__auto-instance_configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Spanner instance configs." _instance_configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'add_iam_policy_binding:(ALPHA) Add an IAM policy binding to a Cloud Spanner instance.'
	'create:(ALPHA) Create a Cloud Spanner instance.'
	'delete:(ALPHA) Delete a Cloud Spanner instance.'
	'describe:(ALPHA) Describe a Cloud Spanner instance.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a Cloud Spanner instance.'
	'list:(ALPHA) List the Cloud Spanner instances in this project.'
	'remove_iam_policy_binding:(ALPHA) Remove an IAM policy binding from a Cloud Spanner instance.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a Cloud Spanner instance.'
	'update:(ALPHA) Update a Cloud Spanner instance.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Spanner instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(ALPHA) Cancel a Cloud Spanner operation.'
	'describe:(ALPHA) Describe a Cloud Spanner operation.'
	'list:(ALPHA) List the Cloud Spanner operations on the given instance or
database.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Spanner operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _rows_arguments
_rows_arguments=(
	'delete:(ALPHA) Delete a row in a Cloud Spanner database.'
	'insert:(ALPHA) Insert a row in a Cloud Spanner database.'
	'update:(ALPHA) Update a row in a Cloud Spanner database.'
)

# groups

__auto-rows ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage the rows in Cloud Spanner databases." _rows_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (insert)
      __auto-insert
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-spanner ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Command groups for Cloud Spanner." _spanner_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (databases)
      __auto-databases
      ;;
      (instance_configs)
      __auto-instance_configs
      ;;
      (instances)
      __auto-instances
      ;;
      (operations)
      __auto-operations
      ;;
      (rows)
      __auto-rows
      ;;
    esac
    ;;
	esac
}

local -a _sql_arguments
_sql_arguments=(
	'backups:(ALPHA) Provide commands for working with backups of Cloud SQL
instances.'
	'databases:(ALPHA) Provide commands for managing databases of Cloud SQL
instances.'
	'export:(ALPHA) Provide commands to export Cloud SQL instances.'
	'flags:(ALPHA) Provide a command to list flags.'
	'import:(ALPHA) Provides commands to import Cloud SQL instances.'
	'instances:(ALPHA) Provide commands for managing Cloud SQL instances.'
	'operations:(ALPHA) Provide commands for working with Cloud SQL instance
operations.'
	'ssl:(ALPHA) Provide commands for managing SSL certificates of Cloud SQL
instances.'
	'ssl_certs:(ALPHA) (DEPRECATED) Provide commands for managing SSL
certificates of Cloud SQL instances.'
	'tiers:(ALPHA) Provide a command to list tiers.'
	'users:(ALPHA) Provide commands for managing Cloud SQL users.'
	'connect:(ALPHA) Connects to a Cloud SQL instance.'
)

# groups
local -a _backups_arguments
_backups_arguments=(
	'create:(ALPHA) Creates a backup of a Cloud SQL instance.'
	'delete:(ALPHA) Delete a backup of a Cloud SQL instance.'
	'describe:(ALPHA) Retrieves information about a backup.'
	'list:(ALPHA) Lists all backups associated with a given instance.'
	'restore:(ALPHA) Restores a backup of a Cloud SQL instance.'
)

# groups

__auto-backups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide commands for working with backups of Cloud SQL
instances." _backups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (restore)
      __auto-restore
      ;;
    esac
    ;;
	esac
}

local -a _databases_arguments
_databases_arguments=(
	'create:(ALPHA) Creates a database for a Cloud SQL instance.'
	'delete:(ALPHA) Deletes a Cloud SQL database.'
	'describe:(ALPHA) Displays configuration and metadata about a Cloud SQL
database.'
	'list:(ALPHA) Lists databases for a Cloud SQL instance.'
	'patch:(ALPHA) Patches the settings of a Cloud SQL database.'
)

# groups

__auto-databases ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide commands for managing databases of Cloud SQL
instances." _databases_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (patch)
      __auto-patch
      ;;
    esac
    ;;
	esac
}

local -a _export_arguments
_export_arguments=(
	'csv:(ALPHA) Exports data from a Cloud SQL instance to a CSV file.'
	'sql:(ALPHA) Exports data from a Cloud SQL instance to a SQL file.'
)

# groups

__auto-export ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide commands to export Cloud SQL instances." _export_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (csv)
      __auto-csv
      ;;
      (sql)
      __auto-sql
      ;;
    esac
    ;;
	esac
}

local -a _flags_arguments
_flags_arguments=(
	'list:(ALPHA) List customizable flags for Google Cloud SQL instances.'
)

# groups

__auto-flags ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide a command to list flags." _flags_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _import_arguments
_import_arguments=(
	'csv:(ALPHA) Imports data into a Cloud SQL instance from a CSV file.'
	'sql:(ALPHA) Imports data into a Cloud SQL instance from a SQL dump
file.'
)

# groups

__auto-import ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provides commands to import Cloud SQL instances." _import_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (csv)
      __auto-csv
      ;;
      (sql)
      __auto-sql
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'clone:(ALPHA) Clones a Cloud SQL instance.'
	'create:(ALPHA) Creates a new Cloud SQL instance.'
	'delete:(ALPHA) Deletes a Cloud SQL instance.'
	'describe:(ALPHA) Displays configuration and metadata about a Cloud SQL
instance.'
	'export:(ALPHA) (DEPRECATED) Exports data from a Cloud SQL
instance.'
	'failover:(ALPHA) Causes a high-availability Cloud SQL instance to failover.'
	'import:(ALPHA) (DEPRECATED) Imports data into a Cloud SQL
instance from Google Cloud Storage.'
	'list:(ALPHA) Lists Cloud SQL instances in a given project.'
	'patch:(ALPHA) Updates the settings of a Cloud SQL instance.'
	'promote_replica:(ALPHA) Promotes Cloud SQL read replica to a stand-alone instance.'
	'reset_ssl_config:(ALPHA) Deletes all client certificates and generates a new server
certificate.'
	'restart:(ALPHA) Restarts a Cloud SQL instance.'
	'restore_backup:(ALPHA) Restores a backup of a Cloud SQL instance.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide commands for managing Cloud SQL instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clone)
      __auto-clone
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (export)
      __auto-export
      ;;
      (failover)
      __auto-failover
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
      (patch)
      __auto-patch
      ;;
      (promote_replica)
      __auto-promote_replica
      ;;
      (reset_ssl_config)
      __auto-reset_ssl_config
      ;;
      (restart)
      __auto-restart
      ;;
      (restore_backup)
      __auto-restore_backup
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(ALPHA) Retrieves information about a Cloud SQL instance operation.'
	'list:(ALPHA) Lists all instance operations for the given Cloud SQL
instance.'
	'wait:(ALPHA) Waits for one or more operations to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide commands for working with Cloud SQL instance
operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _ssl_arguments
_ssl_arguments=(
	'client_certs:(ALPHA) Provide commands for managing client certificates of Cloud
SQL instances.'
	'server_ca_certs:(ALPHA) Provide commands for managing server CA certs of Cloud SQL
instances.'
)

# groups
local -a _client_certs_arguments
_client_certs_arguments=(
	'create:(ALPHA) Create a client certificate for a Cloud SQL instance.'
	'delete:(ALPHA) Delete a client certificate for a Cloud SQL instance.'
	'describe:(ALPHA) Retrieve information about a client cert for a Cloud SQL
instance.'
	'list:(ALPHA) List all client certs for a Cloud SQL instance.'
)

# groups

__auto-client_certs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide commands for managing client certificates of Cloud
SQL instances." _client_certs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _server_ca_certs_arguments
_server_ca_certs_arguments=(
	'create:(ALPHA) Create a server CA cert for a Cloud SQL instance.'
	'list:(ALPHA) List all server CA certs for a Cloud SQL instance.'
	'rollback:(ALPHA) Roll back to the previous server CA cert for a Cloud SQL
instance.'
	'rotate:(ALPHA) Rotate in the upcoming server CA cert for a Cloud SQL
instance.'
)

# groups

__auto-server_ca_certs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide commands for managing server CA certs of Cloud SQL
instances." _server_ca_certs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (list)
      __auto-list
      ;;
      (rollback)
      __auto-rollback
      ;;
      (rotate)
      __auto-rotate
      ;;
    esac
    ;;
	esac
}


__auto-ssl ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide commands for managing SSL certificates of Cloud SQL
instances." _ssl_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (client_certs)
      __auto-client_certs
      ;;
      (server_ca_certs)
      __auto-server_ca_certs
      ;;
    esac
    ;;
	esac
}

local -a _ssl_certs_arguments
_ssl_certs_arguments=(
	'create:(ALPHA) (DEPRECATED) Creates an SSL certificate for a
Cloud SQL instance.'
	'delete:(ALPHA) (DEPRECATED) Deletes an SSL certificate for a
Cloud SQL instance.'
	'describe:(ALPHA) (DEPRECATED) Retrieves information about an
SSL cert for a Cloud SQL instance.'
	'list:(ALPHA) (DEPRECATED) Lists all SSL certs for a Cloud
SQL instance.'
)

# groups

__auto-ssl_certs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) (DEPRECATED) Provide commands for managing SSL
certificates of Cloud SQL instances." _ssl_certs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _tiers_arguments
_tiers_arguments=(
	'list:(ALPHA) Lists all available service tiers for Google Cloud SQL.'
)

# groups

__auto-tiers ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide a command to list tiers." _tiers_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _users_arguments
_users_arguments=(
	'create:(ALPHA) Creates a user in a given instance.'
	'delete:(ALPHA) Deletes a Cloud SQL user in a given instance.'
	'list:(ALPHA) Lists Cloud SQL users in a given instance.'
	'set_password:(ALPHA) Changes a user&#39;s password in a given instance.'
)

# groups

__auto-users ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Provide commands for managing Cloud SQL users." _users_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
      (set_password)
      __auto-set_password
      ;;
    esac
    ;;
	esac
}


__auto-sql ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Create and manage Google Cloud SQL databases." _sql_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (backups)
      __auto-backups
      ;;
      (databases)
      __auto-databases
      ;;
      (export)
      __auto-export
      ;;
      (flags)
      __auto-flags
      ;;
      (import)
      __auto-import
      ;;
      (instances)
      __auto-instances
      ;;
      (operations)
      __auto-operations
      ;;
      (ssl)
      __auto-ssl
      ;;
      (ssl_certs)
      __auto-ssl_certs
      ;;
      (tiers)
      __auto-tiers
      ;;
      (users)
      __auto-users
      ;;
      (connect)
      __auto-connect
      ;;
    esac
    ;;
	esac
}

local -a _tasks_arguments
_tasks_arguments=(
	'locations:(ALPHA) Get information about Cloud Tasks locations.'
	'queues:(ALPHA) Manage Cloud Tasks queues.'
	'acknowledge:(ALPHA) Acknowledge the lease on a task in a pull queue.'
	'cancel_lease:(ALPHA) Cancel the lease on a task in a pull queue.'
	'create_app_engine_task:(ALPHA) Create and add a task to an App Engine queue.'
	'create_pull_task:(ALPHA) Create and add a task to a pull queue.'
	'delete:(ALPHA) Delete a task from a queue.'
	'describe:(ALPHA) Show details about a task.'
	'lease:(ALPHA) Leases a list of tasks and displays them.'
	'list:(ALPHA) List tasks.'
	'renew_lease:(ALPHA) Renew the lease on a task in a pull queue.'
	'run:(ALPHA) Force a task to run now.'
)

# groups
local -a _locations_arguments
_locations_arguments=(
	'describe:(ALPHA) Show details about a location.'
	'list:(ALPHA) Lists the locations where Cloud Tasks is available.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Get information about Cloud Tasks locations." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _queues_arguments
_queues_arguments=(
	'add_iam_policy_binding:(ALPHA) Add IAM policy binding for a queue.'
	'create_app_engine_queue:(ALPHA) Create an App Engine queue.'
	'create_pull_queue:(ALPHA) Create a pull queue.'
	'delete:(ALPHA) Delete a queue.'
	'describe:(ALPHA) Show details about a queue.'
	'get_iam_policy:(ALPHA) Get the IAM policy for a queue.'
	'list:(ALPHA) List all queues.'
	'pause:(ALPHA) Pause a queue.'
	'purge:(ALPHA) Purge a queue by deleting all of its tasks.'
	'remove_iam_policy_binding:(ALPHA) Remove IAM policy binding for a queue.'
	'resume:(ALPHA) Request to resume a paused or disabled queue.'
	'set_iam_policy:(ALPHA) Set the IAM policy for a queue.'
	'update_app_engine_queue:(ALPHA) Update an App Engine queue.'
	'update_pull_queue:(ALPHA) Update a pull queue.'
)

# groups

__auto-queues ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Tasks queues." _queues_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create_app_engine_queue)
      __auto-create_app_engine_queue
      ;;
      (create_pull_queue)
      __auto-create_pull_queue
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (pause)
      __auto-pause
      ;;
      (purge)
      __auto-purge
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (resume)
      __auto-resume
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update_app_engine_queue)
      __auto-update_app_engine_queue
      ;;
      (update_pull_queue)
      __auto-update_pull_queue
      ;;
    esac
    ;;
	esac
}


__auto-tasks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Manage Cloud Tasks queues and tasks." _tasks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (locations)
      __auto-locations
      ;;
      (queues)
      __auto-queues
      ;;
      (acknowledge)
      __auto-acknowledge
      ;;
      (cancel_lease)
      __auto-cancel_lease
      ;;
      (create_app_engine_task)
      __auto-create_app_engine_task
      ;;
      (create_pull_task)
      __auto-create_pull_task
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (lease)
      __auto-lease
      ;;
      (list)
      __auto-list
      ;;
      (renew_lease)
      __auto-renew_lease
      ;;
      (run)
      __auto-run
      ;;
    esac
    ;;
	esac
}


__auto-alpha ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(ALPHA) Alpha versions of gcloud commands." _alpha_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (app)
      __auto-app
      ;;
      (auth)
      __auto-auth
      ;;
      (bigtable)
      __auto-bigtable
      ;;
      (billing)
      __auto-billing
      ;;
      (builds)
      __auto-builds
      ;;
      (cloud_shell)
      __auto-cloud_shell
      ;;
      (compute)
      __auto-compute
      ;;
      (config)
      __auto-config
      ;;
      (container)
      __auto-container
      ;;
      (dataflow)
      __auto-dataflow
      ;;
      (datastore)
      __auto-datastore
      ;;
      (deployment_manager)
      __auto-deployment_manager
      ;;
      (dlp)
      __auto-dlp
      ;;
      (emulators)
      __auto-emulators
      ;;
      (endpoints)
      __auto-endpoints
      ;;
      (filestore)
      __auto-filestore
      ;;
      (firebase)
      __auto-firebase
      ;;
      (firestore)
      __auto-firestore
      ;;
      (functions)
      __auto-functions
      ;;
      (genomics)
      __auto-genomics
      ;;
      (iam)
      __auto-iam
      ;;
      (iot)
      __auto-iot
      ;;
      (kms)
      __auto-kms
      ;;
      (ml)
      __auto-ml
      ;;
      (ml_engine)
      __auto-ml_engine
      ;;
      (monitoring)
      __auto-monitoring
      ;;
      (organizations)
      __auto-organizations
      ;;
      (projects)
      __auto-projects
      ;;
      (pubsub)
      __auto-pubsub
      ;;
      (redis)
      __auto-redis
      ;;
      (resource_manager)
      __auto-resource_manager
      ;;
      (resources)
      __auto-resources
      ;;
      (scheduler)
      __auto-scheduler
      ;;
      (services)
      __auto-services
      ;;
      (source)
      __auto-source
      ;;
      (spanner)
      __auto-spanner
      ;;
      (sql)
      __auto-sql
      ;;
      (tasks)
      __auto-tasks
      ;;
      (init)
      __auto-init
      ;;
      (interactive)
      __auto-interactive
      ;;
      (search_help)
      __auto-search_help
      ;;
    esac
    ;;
	esac
}

local -a _app_arguments
_app_arguments=(
	'domain_mappings:View and manage your App Engine domain mappings.'
	'firewall_rules:View and manage your App Engine firewall rules.'
	'instances:View and manage your App Engine instances.'
	'logs:Manage your App Engine logs.'
	'operations:View and manage your App Engine Operations.'
	'regions:View regional availability of App Engine runtime environments.'
	'services:View and manage your App Engine services.'
	'ssl_certificates:View and manage your App Engine SSL certificates.'
	'versions:View and manage your App Engine versions.'
	'browse:Open the current app in a web browser.'
	'create:Create an App Engine app within the current Google Cloud Project.'
	'deploy:Deploy the local code and/or configuration of your app to App Engine.'
	'describe:Display all data about an existing service.'
	'open_console:Open the App Engine dashboard, or log viewer, in a web browser.'
	'update:Updates an App Engine application.'
)

# groups
local -a _domain_mappings_arguments
_domain_mappings_arguments=(
	'create:Creates a domain mapping.'
	'delete:Deletes a specified domain mapping.'
	'describe:Describes a specified domain mapping.'
	'list:Lists domain mappings.'
	'update:Updates a domain mapping.'
)

# groups

__auto-domain_mappings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View and manage your App Engine domain mappings." _domain_mappings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _firewall_rules_arguments
_firewall_rules_arguments=(
	'create:Creates a firewall rule.'
	'delete:Deletes a specified firewall rule.'
	'describe:Prints the fields of a specified firewall rule.'
	'list:Lists the firewall rules.'
	'test_ip:Display firewall rules that match a given IP.'
	'update:Updates a firewall rule.'
)

# groups

__auto-firewall_rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View and manage your App Engine firewall rules." _firewall_rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (test_ip)
      __auto-test_ip
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'delete:Delete a specified instance.'
	'describe:Display all data about an existing instance.'
	'disable_debug:Disable debug mode for an instance.'
	'enable_debug:Enable debug mode for an instance (only works on the flexible environment).'
	'list:List the instances affiliated with the current App Engine project.'
	'scp:SCP from or to the VM of an App Engine Flexible instance.'
	'ssh:SSH into the VM of an App Engine Flexible instance.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View and manage your App Engine instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (disable_debug)
      __auto-disable_debug
      ;;
      (enable_debug)
      __auto-enable_debug
      ;;
      (list)
      __auto-list
      ;;
      (scp)
      __auto-scp
      ;;
      (ssh)
      __auto-ssh
      ;;
    esac
    ;;
	esac
}

local -a _logs_arguments
_logs_arguments=(
	'read:Reads log entries for the current App Engine app.'
	'tail:Streams logs for App Engine apps.'
)

# groups

__auto-logs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage your App Engine logs." _logs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (read)
      __auto-read
      ;;
      (tail)
      __auto-tail
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:Describes the operation.'
	'list:List the operations.'
	'wait:Polls an operation until completion.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View and manage your App Engine Operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'list:List the availability of flex and standard environments for each region.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View regional availability of App Engine runtime environments." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _services_arguments
_services_arguments=(
	'browse:Open the specified service(s) in a browser.'
	'delete:Delete services in the current project.'
	'describe:Display all data about an existing service.'
	'list:List your existing services.'
	'set_traffic:Set traffic splitting settings.'
)

# groups

__auto-services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View and manage your App Engine services." _services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (browse)
      __auto-browse
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (set_traffic)
      __auto-set_traffic
      ;;
    esac
    ;;
	esac
}

local -a _ssl_certificates_arguments
_ssl_certificates_arguments=(
	'create:Uploads a new SSL certificate.'
	'delete:Deletes an SSL certificate.'
	'describe:Describes a specified SSL certificate.'
	'list:Lists the SSL certificates.'
	'update:Updates an SSL certificate.'
)

# groups

__auto-ssl_certificates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View and manage your App Engine SSL certificates." _ssl_certificates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'browse:Open the specified versions in a browser.'
	'delete:Delete a specified version.'
	'describe:Display all data about an existing version.'
	'list:List your existing versions.'
	'migrate:Migrate traffic from one version to another for a set of services.'
	'start:Start serving specified versions.'
	'stop:Stop serving specified versions.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View and manage your App Engine versions." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (browse)
      __auto-browse
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (migrate)
      __auto-migrate
      ;;
      (start)
      __auto-start
      ;;
      (stop)
      __auto-stop
      ;;
    esac
    ;;
	esac
}


__auto-app ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage your App Engine deployments." _app_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (domain_mappings)
      __auto-domain_mappings
      ;;
      (firewall_rules)
      __auto-firewall_rules
      ;;
      (instances)
      __auto-instances
      ;;
      (logs)
      __auto-logs
      ;;
      (operations)
      __auto-operations
      ;;
      (regions)
      __auto-regions
      ;;
      (services)
      __auto-services
      ;;
      (ssl_certificates)
      __auto-ssl_certificates
      ;;
      (versions)
      __auto-versions
      ;;
      (browse)
      __auto-browse
      ;;
      (create)
      __auto-create
      ;;
      (deploy)
      __auto-deploy
      ;;
      (describe)
      __auto-describe
      ;;
      (open_console)
      __auto-open_console
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _auth_arguments
_auth_arguments=(
	'application_default:Manage your active Application Default Credentials.'
	'activate_service_account:Authorize access to Google Cloud Platform with a service account.'
	'configure_docker:Register gcloud as a Docker
credential helper.'
	'list:Lists credentialed accounts.'
	'login:Authorize gcloud to access the Cloud Platform with Google user credentials.'
	'revoke:Revoke access credentials for an account.'
)

# groups
local -a _application_default_arguments
_application_default_arguments=(
	'login:Acquire new user credentials to use for Application Default Credentials.'
	'print_access_token:Print an access token for your current Application Default Credentials.'
	'revoke:Revoke previously generated Application Default Credentials.'
)

# groups

__auto-application_default ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage your active Application Default Credentials." _application_default_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (login)
      __auto-login
      ;;
      (print_access_token)
      __auto-print_access_token
      ;;
      (revoke)
      __auto-revoke
      ;;
    esac
    ;;
	esac
}


__auto-auth ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage oauth2 credentials for the Google Cloud SDK." _auth_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (application_default)
      __auto-application_default
      ;;
      (activate_service_account)
      __auto-activate_service_account
      ;;
      (configure_docker)
      __auto-configure_docker
      ;;
      (list)
      __auto-list
      ;;
      (login)
      __auto-login
      ;;
      (revoke)
      __auto-revoke
      ;;
    esac
    ;;
	esac
}

local -a _beta_arguments
_beta_arguments=(
	'app:(BETA) Manage your App Engine deployments.'
	'auth:(BETA) Manage oauth2 credentials for the Google Cloud SDK.'
	'bigtable:(BETA) Manage your Cloud Bigtable storage.'
	'billing:(BETA) Manage billing accounts and associate them with projects.'
	'builds:(BETA) Create and manage builds for Google Cloud Build.'
	'composer:(BETA) Create and manage Cloud Composer Environments.'
	'compute:(BETA) Create and manipulate Google Compute Engine resources.'
	'config:(BETA) View and edit Cloud SDK properties.'
	'container:(BETA) Deploy and manage clusters of machines for running
containers.'
	'dataflow:(BETA) Manage Google Cloud Dataflow jobs.'
	'dataproc:(BETA) Create and manage Google Cloud Dataproc clusters and jobs.'
	'datastore:(BETA) Manage your Cloud Datastore indexes.'
	'debug:(BETA) Commands for interacting with the Cloud Debugger.'
	'deployment_manager:(BETA) Manage deployments of cloud resources.'
	'dns:(BETA) Manage your Cloud DNS managed-zones and record-sets.'
	'domains:(BETA) Manage domains for your Google Cloud projects.'
	'emulators:(BETA) Set up your local development environment using emulators.'
	'endpoints:(BETA) Create, enable and manage API services.'
	'error_reporting:(BETA) Manage Stackdriver Error Reporting.'
	'filestore:(BETA) Create and manipulate Cloud Filestore resources.'
	'firebase:(BETA) Work with Google Firebase.'
	'firestore:(BETA) Manage your Cloud Firestore imports and exports.'
	'functions:(BETA) Manage Google Cloud Functions.'
	'iam:(BETA) Manage IAM service accounts and keys.'
	'iot:(BETA) Manage Cloud IoT resources.'
	'kms:(BETA) Manage cryptographic keys in the cloud.'
	'logging:(BETA) Manage Stackdriver Logging.'
	'ml:(BETA) Use Google Cloud machine learning capabilities.'
	'ml_engine:(BETA) Manage Cloud ML Engine jobs and models.'
	'organizations:(BETA) Create and manage Google Cloud Platform Organizations.'
	'projects:(BETA) Create and manage project access policies.'
	'pubsub:(BETA) Manage Cloud Pub/Sub topics and subscriptions.'
	'redis:(BETA) Manage Cloud Memorystore Redis resources.'
	'resource_manager:(BETA) Manage Cloud Resources.'
	'runtime_config:(BETA) Manage runtime configuration resources.'
	'services:(BETA) List, enable and disable APIs and services.'
	'source:(BETA) Cloud git repository commands.'
	'spanner:(BETA) Command groups for Cloud Spanner.'
	'sql:(BETA) Create and manage Google Cloud SQL databases.'
	'tasks:(BETA) Manage Cloud Tasks queues and tasks.'
	'init:(BETA) Initialize or reinitialize gcloud.'
)

# groups
local -a _app_arguments
_app_arguments=(
	'domain_mappings:(BETA) View and manage your App Engine domain mappings.'
	'firewall_rules:(BETA) View and manage your App Engine firewall rules.'
	'instances:(BETA) View and manage your App Engine instances.'
	'logs:(BETA) Manage your App Engine logs.'
	'operations:(BETA) View and manage your App Engine Operations.'
	'regions:(BETA) View regional availability of App Engine runtime
environments.'
	'services:(BETA) View and manage your App Engine services.'
	'ssl_certificates:(BETA) View and manage your App Engine SSL certificates.'
	'versions:(BETA) View and manage your App Engine versions.'
	'browse:(BETA) Open the current app in a web browser.'
	'create:(BETA) Create an App Engine app within the current Google Cloud
Project.'
	'deploy:(BETA) Deploy the local code and/or configuration of your app to
App Engine.'
	'describe:(BETA) Display all data about an existing service using the beta
API.'
	'gen_config:(BETA) (DEPRECATED) Generate missing configuration
files for a source directory.'
	'open_console:(BETA) Open the App Engine dashboard, or log viewer, in a web
browser.'
	'repair:(BETA) Restores required App Engine features to the current
application.'
	'update:(BETA) Updates an App Engine application.'
)

# groups
local -a _domain_mappings_arguments
_domain_mappings_arguments=(
	'create:(BETA) Creates a domain mapping.'
	'delete:(BETA) Deletes a specified domain mapping.'
	'describe:(BETA) Describes a specified domain mapping.'
	'list:(BETA) Lists domain mappings.'
	'update:(BETA) Updates a domain mapping.'
)

# groups

__auto-domain_mappings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View and manage your App Engine domain mappings." _domain_mappings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _firewall_rules_arguments
_firewall_rules_arguments=(
	'create:(BETA) Creates a firewall rule.'
	'delete:(BETA) Deletes a specified firewall rule.'
	'describe:(BETA) Prints the fields of a specified firewall rule.'
	'list:(BETA) Lists the firewall rules.'
	'test_ip:(BETA) Display firewall rules that match a given IP.'
	'update:(BETA) Updates a firewall rule.'
)

# groups

__auto-firewall_rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View and manage your App Engine firewall rules." _firewall_rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (test_ip)
      __auto-test_ip
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'delete:(BETA) Delete a specified instance.'
	'describe:(BETA) Display all data about an existing instance.'
	'disable_debug:(BETA) Disable debug mode for an instance.'
	'enable_debug:(BETA) Enable debug mode for an instance (only works on the
flexible environment).'
	'list:(BETA) List the instances affiliated with the current App Engine
project.'
	'scp:(BETA) SCP from or to the VM of an App Engine Flexible instance.'
	'ssh:(BETA) SSH into the VM of an App Engine Flexible instance.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View and manage your App Engine instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (disable_debug)
      __auto-disable_debug
      ;;
      (enable_debug)
      __auto-enable_debug
      ;;
      (list)
      __auto-list
      ;;
      (scp)
      __auto-scp
      ;;
      (ssh)
      __auto-ssh
      ;;
    esac
    ;;
	esac
}

local -a _logs_arguments
_logs_arguments=(
	'read:(BETA) Reads log entries for the current App Engine app.'
	'tail:(BETA) Streams logs for App Engine apps.'
)

# groups

__auto-logs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your App Engine logs." _logs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (read)
      __auto-read
      ;;
      (tail)
      __auto-tail
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Describes the operation.'
	'list:(BETA) List the operations.'
	'wait:(BETA) Polls an operation until completion.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View and manage your App Engine Operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'list:(BETA) List the availability of flex and standard environments for
each region.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View regional availability of App Engine runtime
environments." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _services_arguments
_services_arguments=(
	'browse:(BETA) Open the specified service(s) in a browser.'
	'delete:(BETA) Delete services in the current project.'
	'describe:(BETA) Display all data about an existing service.'
	'list:(BETA) List your existing services.'
	'set_traffic:(BETA) Set traffic splitting settings.'
)

# groups

__auto-services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View and manage your App Engine services." _services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (browse)
      __auto-browse
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (set_traffic)
      __auto-set_traffic
      ;;
    esac
    ;;
	esac
}

local -a _ssl_certificates_arguments
_ssl_certificates_arguments=(
	'create:(BETA) Uploads a new SSL certificate.'
	'delete:(BETA) Deletes an SSL certificate.'
	'describe:(BETA) Describes a specified SSL certificate.'
	'list:(BETA)'
	'update:(BETA) Updates an SSL certificate.'
)

# groups

__auto-ssl_certificates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View and manage your App Engine SSL certificates." _ssl_certificates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'browse:(BETA) Open the specified versions in a browser.'
	'delete:(BETA) Delete a specified version.'
	'describe:(BETA) Display all data about an existing version.'
	'list:(BETA) List your existing versions.'
	'migrate:(BETA) Migrate traffic from one version to another for a set of
services.'
	'start:(BETA) Start serving specified versions.'
	'stop:(BETA) Stop serving specified versions.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View and manage your App Engine versions." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (browse)
      __auto-browse
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (migrate)
      __auto-migrate
      ;;
      (start)
      __auto-start
      ;;
      (stop)
      __auto-stop
      ;;
    esac
    ;;
	esac
}


__auto-app ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your App Engine deployments." _app_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (domain_mappings)
      __auto-domain_mappings
      ;;
      (firewall_rules)
      __auto-firewall_rules
      ;;
      (instances)
      __auto-instances
      ;;
      (logs)
      __auto-logs
      ;;
      (operations)
      __auto-operations
      ;;
      (regions)
      __auto-regions
      ;;
      (services)
      __auto-services
      ;;
      (ssl_certificates)
      __auto-ssl_certificates
      ;;
      (versions)
      __auto-versions
      ;;
      (browse)
      __auto-browse
      ;;
      (create)
      __auto-create
      ;;
      (deploy)
      __auto-deploy
      ;;
      (describe)
      __auto-describe
      ;;
      (gen_config)
      __auto-gen_config
      ;;
      (open_console)
      __auto-open_console
      ;;
      (repair)
      __auto-repair
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _auth_arguments
_auth_arguments=(
	'application_default:(BETA) Manage your active Application Default Credentials.'
	'activate_service_account:(BETA) Authorize access to Google Cloud Platform with a service
account.'
	'configure_docker:(BETA) Register gcloud as a Docker credential helper.'
	'list:(BETA) Lists credentialed accounts.'
	'login:(BETA) Authorize gcloud to access the Cloud Platform with Google
user credentials.'
	'revoke:(BETA) Revoke access credentials for an account.'
)

# groups
local -a _application_default_arguments
_application_default_arguments=(
	'login:(BETA) Acquire new user credentials to use for Application Default
Credentials.'
	'print_access_token:(BETA) Print an access token for your current Application Default
Credentials.'
	'revoke:(BETA) Revoke previously generated Application Default Credentials.'
)

# groups

__auto-application_default ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your active Application Default Credentials." _application_default_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (login)
      __auto-login
      ;;
      (print_access_token)
      __auto-print_access_token
      ;;
      (revoke)
      __auto-revoke
      ;;
    esac
    ;;
	esac
}


__auto-auth ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage oauth2 credentials for the Google Cloud SDK." _auth_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (application_default)
      __auto-application_default
      ;;
      (activate_service_account)
      __auto-activate_service_account
      ;;
      (configure_docker)
      __auto-configure_docker
      ;;
      (list)
      __auto-list
      ;;
      (login)
      __auto-login
      ;;
      (revoke)
      __auto-revoke
      ;;
    esac
    ;;
	esac
}

local -a _bigtable_arguments
_bigtable_arguments=(
	'app_profiles:(BETA) Manage Cloud Bigtable app_profiles.'
	'clusters:(BETA) Manage Cloud Bigtable clusters.'
	'instances:(BETA) Manage Cloud Bigtable instances.'
)

# groups
local -a _app_profiles_arguments
_app_profiles_arguments=(
	'create:(BETA) Create a new Bigtable app_profile.'
	'delete:(BETA) Delete a Bigtable app-profile.'
	'describe:(BETA) Describe an existing Bigtable app-profile.'
	'list:(BETA) List Bigtable app-profiles.'
	'update:(BETA) Update a Bigtable app_profile.'
)

# groups

__auto-app_profiles ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Bigtable app_profiles." _app_profiles_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _clusters_arguments
_clusters_arguments=(
	'create:(BETA) Create a bigtable cluster.'
	'delete:(BETA) Delete a bigtable cluster.'
	'describe:(BETA) Describe an existing Bigtable cluster.'
	'list:(BETA) List existing Bigtable clusters.'
	'update:(BETA) Update a Bigtable cluster&#39;s number of nodes.'
)

# groups

__auto-clusters ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Bigtable clusters." _clusters_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'add_iam_policy_binding:(BETA) Add an IAM policy binding to a Cloud Bigtable instance.'
	'create:(BETA) Create a new Bigtable instance.'
	'delete:(BETA) Delete an existing Bigtable instance.'
	'describe:(BETA) Describe an existing Bigtable instance.'
	'get_iam_policy:(BETA) Get the IAM policy for a Cloud Bigtable instance.'
	'list:(BETA) List existing Bigtable instances.'
	'remove_iam_policy_binding:(BETA) Remove an IAM policy binding from a Cloud Bigtable instance.'
	'set_iam_policy:(BETA) Set the IAM policy for a Cloud Bigtable instance.'
	'update:(BETA) Modify an existing Bigtable instance.'
	'upgrade:(BETA) Upgrade an existing instance&#39;s type from development to
production.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Bigtable instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
      (upgrade)
      __auto-upgrade
      ;;
    esac
    ;;
	esac
}


__auto-bigtable ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your Cloud Bigtable storage." _bigtable_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (app_profiles)
      __auto-app_profiles
      ;;
      (clusters)
      __auto-clusters
      ;;
      (instances)
      __auto-instances
      ;;
    esac
    ;;
	esac
}

local -a _billing_arguments
_billing_arguments=(
	'accounts:(BETA) Manage billing accounts.'
	'projects:(BETA) Manage the billing account configuration of your projects.'
)

# groups
local -a _accounts_arguments
_accounts_arguments=(
	'describe:(BETA) Show metadata for a billing account.'
	'get_iam_policy:(BETA) Get the IAM policy for a Cloud Billing account.'
	'list:(BETA) List all active billing accounts.'
	'set_iam_policy:(BETA) Set the IAM policy for a Cloud Billing account.'
)

# groups

__auto-accounts ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage billing accounts." _accounts_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _projects_arguments
_projects_arguments=(
	'describe:(BETA) Show detailed billing information for a project.'
	'link:(BETA) Link a project with a billing account.'
	'list:(BETA) List all active projects associated with the specified
billing account.'
	'unlink:(BETA) Unlink the account (if any) linked with a project.'
)

# groups

__auto-projects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage the billing account configuration of your projects." _projects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (link)
      __auto-link
      ;;
      (list)
      __auto-list
      ;;
      (unlink)
      __auto-unlink
      ;;
    esac
    ;;
	esac
}


__auto-billing ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage billing accounts and associate them with projects." _billing_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (accounts)
      __auto-accounts
      ;;
      (projects)
      __auto-projects
      ;;
    esac
    ;;
	esac
}

local -a _builds_arguments
_builds_arguments=(
	'cancel:(BETA) Cancel an ongoing build.'
	'describe:(BETA) Get information about a particular build.'
	'list:(BETA) List builds.'
	'log:(BETA) Stream the logs for a build.'
	'submit:(BETA) Submit a build using Google Cloud Build.'
)

# groups

__auto-builds ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage builds for Google Cloud Build." _builds_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (log)
      __auto-log
      ;;
      (submit)
      __auto-submit
      ;;
    esac
    ;;
	esac
}

local -a _composer_arguments
_composer_arguments=(
	'environments:(BETA) Create and manage Cloud Composer environments.'
	'operations:(BETA) Manage Cloud Composer operations.'
)

# groups
local -a _environments_arguments
_environments_arguments=(
	'storage:(BETA) Manage Cloud Storage objects stored as part of Cloud
Composer environments.'
	'create:(BETA) Create and initialize a Cloud Composer environment.'
	'delete:(BETA) Delete one or more Cloud Composer environments.'
	'describe:(BETA) Get details about a Cloud Composer environment.'
	'list:(BETA) List the Cloud Composer environments under a project and
location.'
	'run:(BETA) Run an Airflow sub-command remotely in a Cloud Composer
environment.'
	'update:(BETA) Update properties of a Cloud Composer environment.'
)

# groups
local -a _storage_arguments
_storage_arguments=(
	'dags:(BETA) Manage DAGs for Cloud Composer environments.'
	'data:(BETA) Manage data for Cloud Composer environments.'
	'plugins:(BETA) Manage plugins for Cloud Composer environments.'
)

# groups
local -a _dags_arguments
_dags_arguments=(
	'delete:(BETA) Delete DAG files from an Cloud Composer environment&#39;s Cloud
Storage bucket.'
	'export:(BETA) Export DAGs from an environment into local storage or Cloud
Storage.'
	'import:(BETA) Import DAGs from local storage or Cloud Storage into an
environment.'
	'list:(BETA) List the DAG files for a Cloud Composer environment.'
)

# groups

__auto-dags ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage DAGs for Cloud Composer environments." _dags_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _data_arguments
_data_arguments=(
	'delete:(BETA) Delete data from an Cloud Composer environment&#39;s Cloud
Storage bucket.'
	'export:(BETA) Export data from an environment into local storage or Cloud
Storage.'
	'import:(BETA) Import data from local storage or Cloud Storage into an
environment.'
	'list:(BETA) List the data for a Cloud Composer environment.'
)

# groups

__auto-data ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage data for Cloud Composer environments." _data_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _plugins_arguments
_plugins_arguments=(
	'delete:(BETA) Delete plugins from an Cloud Composer environment&#39;s Cloud
Storage bucket.'
	'export:(BETA) Export plugins from an environment into local storage or
Cloud Storage.'
	'import:(BETA) Import plugins from local storage or Cloud Storage into an
environment.'
	'list:(BETA) List the plugins for a Cloud Composer environment.'
)

# groups

__auto-plugins ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage plugins for Cloud Composer environments." _plugins_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-storage ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Storage objects stored as part of Cloud
Composer environments." _storage_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (dags)
      __auto-dags
      ;;
      (data)
      __auto-data
      ;;
      (plugins)
      __auto-plugins
      ;;
    esac
    ;;
	esac
}


__auto-environments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Cloud Composer environments." _environments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (storage)
      __auto-storage
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (run)
      __auto-run
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'delete:(BETA) Delete one or more completed Cloud Composer operations.'
	'describe:(BETA) Get details about an asynchronous operation.'
	'list:(BETA) Lists environment operations.'
	'wait:(BETA) Wait for asynchronous operation to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Composer operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-composer ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Cloud Composer Environments." _composer_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (environments)
      __auto-environments
      ;;
      (operations)
      __auto-operations
      ;;
    esac
    ;;
	esac
}

local -a _compute_arguments
_compute_arguments=(
	'accelerator_types:(BETA) Read Google Compute Engine accelerator types.'
	'addresses:(BETA) Read and manipulate Google Compute Engine addresses.'
	'backend_buckets:(BETA) Read and manipulate backend buckets.'
	'backend_services:(BETA) List, create, and delete backend services.'
	'commitments:(BETA) Manage Google Compute Engine commitments.'
	'disk_types:(BETA) Read Google Compute Engine virtual disk types.'
	'disks:(BETA) Read and manipulate Google Compute Engine disks.'
	'firewall_rules:(BETA) List, create, update, and delete Google Compute Engine
firewall rules.'
	'forwarding_rules:(BETA) Read and manipulate traffic forwarding rules to network load
balancers.'
	'health_checks:(BETA) Read and manipulate health checks for load balanced
instances.'
	'http_health_checks:(BETA) Read and manipulate HTTP health checks for load balanced
instances.'
	'https_health_checks:(BETA) Read and manipulate HTTPS health checks for load balanced
instances.'
	'images:(BETA) List, create, and delete Google Compute Engine images.'
	'instance_groups:(BETA) Read and manipulate Google Compute Engine instance groups.'
	'instance_templates:(BETA) Read and manipulate Google Compute Engine instances
templates.'
	'instances:(BETA) Read and manipulate Google Compute Engine virtual machine
instances.'
	'interconnects:(BETA) Read and manipulate Google Compute Engine interconnects.'
	'machine_types:(BETA) Read Google Compute Engine virtual machine types.'
	'network_endpoint_groups:(BETA) Read and manipulate Google Compute Engine network endpoint
groups.'
	'networks:(BETA) List, create, and delete Google Compute Engine networks.'
	'operations:(BETA) Read and manipulate Google Compute Engine operations.'
	'os_login:(BETA) Create and manipulate Google Compute Engine OS Login
resources.'
	'project_info:(BETA) Read and manipulate project-level data like quotas and
metadata.'
	'regions:(BETA) List Google Compute Engine regions.'
	'routers:(BETA) List, create, and delete Google Compute Engine routers.'
	'routes:(BETA) Read and manipulate routes.'
	'security_policies:(BETA) Read and manipulate Google Compute Engine security policies.
Security policies are used to control access to Google Cloud HTTP/HTTPS load
balancers.'
	'shared_vpc:(BETA) Configure shared VPC.'
	'snapshots:(BETA) List, describe, and delete Google Compute Engine snapshots.'
	'sole_tenancy:(BETA) Read and manage Google Compute Engine sole-tenancy
resources.'
	'ssl_certificates:(BETA) List, create, and delete Google Compute Engine SSL
certificates.'
	'ssl_policies:(BETA) List, create, delete and update Google Compute Engine SSL
policies.'
	'target_http_proxies:(BETA) List, create, and delete target HTTP proxies.'
	'target_https_proxies:(BETA) List, create, and delete target HTTPS proxies.'
	'target_instances:(BETA) Read and manipulate Google Compute Engine virtual target
instances.'
	'target_pools:(BETA) Control Compute Engine target pools for network load
balancing.'
	'target_ssl_proxies:(BETA) List, create, and delete target SSL proxies.'
	'target_tcp_proxies:(BETA) List, create, and delete target TCP proxies.'
	'target_vpn_gateways:(BETA) Read and manipulate Google Compute Engine VPN Gateways.'
	'tpus:(BETA) List, create, and delete Cloud TPUs.'
	'url_maps:(BETA) List, create, and delete URL maps.'
	'vpn_tunnels:(BETA) Read and manipulate Google Compute Engine VPN Tunnels.'
	'zones:(BETA) List Google Compute Engine zones.'
	'config_ssh:(BETA) Populate SSH config files with Host entries from each
instance.'
	'connect_to_serial_port:(BETA) Connect to the serial port of an instance.'
	'copy_files:(BETA) (DEPRECATED) Copy files to and from Google
Compute Engine virtual machines via scp.'
	'reset_windows_password:(BETA) Reset and return a password for a Windows machine instance.'
	'scp:(BETA) Copy files to and from Google Compute Engine virtual
machines via scp.'
	'sign_url:(BETA) Sign specified URL for use with Cloud CDN Signed URLs.'
	'ssh:(BETA) SSH into a virtual machine instance.'
)

# groups
local -a _accelerator_types_arguments
_accelerator_types_arguments=(
	'describe:(BETA) Describe Google Compute Engine accelerator types.'
	'list:(BETA) List Google Compute Engine accelerator types.'
)

# groups

__auto-accelerator_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read Google Compute Engine accelerator types." _accelerator_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _addresses_arguments
_addresses_arguments=(
	'create:(BETA) Reserve IP addresses.'
	'delete:(BETA) Release reserved IP addresses.'
	'describe:(BETA) Display detailed information about an address.'
	'list:(BETA) List addresses.'
	'update:(BETA) Update a Google Compute Engine address.'
)

# groups

__auto-addresses ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine addresses." _addresses_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _backend_buckets_arguments
_backend_buckets_arguments=(
	'add_signed_url_key:(BETA) Add Cloud CDN Signed URL key to a backend bucket.'
	'create:(BETA) Create a backend bucket.'
	'delete:(BETA) Delete backend buckets.'
	'delete_signed_url_key:(BETA) Delete Cloud CDN Signed URL key from a backend bucket.'
	'describe:(BETA) Describe a backend bucket.'
	'list:(BETA) List Google Compute Engine backend buckets.'
	'update:(BETA) Update a backend bucket.'
)

# groups

__auto-backend_buckets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate backend buckets." _backend_buckets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_signed_url_key)
      __auto-add_signed_url_key
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_signed_url_key)
      __auto-delete_signed_url_key
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _backend_services_arguments
_backend_services_arguments=(
	'add_backend:(BETA) Add a backend to a backend service.'
	'add_signed_url_key:(BETA) Add Cloud CDN Signed URL key to a backend service.'
	'create:(BETA) Create a backend service.'
	'delete:(BETA) Delete backend services.'
	'delete_signed_url_key:(BETA) Delete Cloud CDN Signed URL key from a backend service.'
	'describe:(BETA) Display detailed information about a backend service.'
	'edit:(BETA) Modify backend services.'
	'get_health:(BETA) Get backend health statuses from a backend service.'
	'list:(BETA) List Google Compute Engine backend services.'
	'remove_backend:(BETA) Remove a backend from a backend service.'
	'update:(BETA) Update a backend service.'
	'update_backend:(BETA) Update an existing backend in a backend service.'
)

# groups

__auto-backend_services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete backend services." _backend_services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_backend)
      __auto-add_backend
      ;;
      (add_signed_url_key)
      __auto-add_signed_url_key
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_signed_url_key)
      __auto-delete_signed_url_key
      ;;
      (describe)
      __auto-describe
      ;;
      (edit)
      __auto-edit
      ;;
      (get_health)
      __auto-get_health
      ;;
      (list)
      __auto-list
      ;;
      (remove_backend)
      __auto-remove_backend
      ;;
      (update)
      __auto-update
      ;;
      (update_backend)
      __auto-update_backend
      ;;
    esac
    ;;
	esac
}

local -a _commitments_arguments
_commitments_arguments=(
	'create:(BETA) Create Google Compute Engine commitments.'
	'describe:(BETA) Describe a Google Compute Engine commitment.'
	'list:(BETA) List Google Compute Engine commitments.'
)

# groups

__auto-commitments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Google Compute Engine commitments." _commitments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _disk_types_arguments
_disk_types_arguments=(
	'describe:(BETA) Describe a Google Compute Engine disk type.'
	'list:(BETA) List Google Compute Engine disk types.'
)

# groups

__auto-disk_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read Google Compute Engine virtual disk types." _disk_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _disks_arguments
_disks_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding for a disk.'
	'add_labels:(BETA) Add labels to Google Compute Engine persistent disks.'
	'create:(BETA) Create Google Compute Engine persistent disks.'
	'delete:(BETA) Delete Google Compute Engine persistent disks.'
	'describe:(BETA) Describe a Google Compute Engine disk.'
	'get_iam_policy:(BETA) Get the IAM policy for a Google Compute Engine disk.'
	'list:(BETA) List Google Compute Engine disks.'
	'move:(BETA) Move a disk between zones.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for a disk.'
	'remove_labels:(BETA) Remove labels from Google Compute Engine persistent disks.'
	'resize:(BETA) Resize a disk or disks.'
	'set_iam_policy:(BETA) Set IAM policy for a disk.'
	'snapshot:(BETA) Create snapshots of Google Compute Engine persistent disks.'
	'update:(BETA) Update a Google Compute Engine persistent disk.'
)

# groups

__auto-disks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine disks." _disks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (add_labels)
      __auto-add_labels
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (move)
      __auto-move
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (resize)
      __auto-resize
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (snapshot)
      __auto-snapshot
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _firewall_rules_arguments
_firewall_rules_arguments=(
	'create:(BETA) Create a Google Compute Engine firewall rule.'
	'delete:(BETA) Delete Google Compute Engine firewall rules.'
	'describe:(BETA) Describe a Google Compute Engine firewall rule.'
	'list:(BETA) List Google Compute Engine firewall rules.'
	'update:(BETA) Update a firewall rule.'
)

# groups

__auto-firewall_rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, update, and delete Google Compute Engine
firewall rules." _firewall_rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _forwarding_rules_arguments
_forwarding_rules_arguments=(
	'create:(BETA) Create a forwarding rule to direct network traffic to a load
balancer.'
	'delete:(BETA) Delete forwarding rules.'
	'describe:(BETA) Display detailed information about a forwarding rule.'
	'list:(BETA) List Google Compute Engine forwarding rules.'
	'set_target:(BETA) Modify a forwarding rule to direct network traffic to a new
target.'
	'update:(BETA) Update a Google Compute Engine forwarding rule.'
)

# groups

__auto-forwarding_rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate traffic forwarding rules to network load
balancers." _forwarding_rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (set_target)
      __auto-set_target
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _health_checks_arguments
_health_checks_arguments=(
	'create:(BETA) Create health checks for load balanced instances.'
	'update:(BETA) Update health checks for load balanced instances.'
	'delete:(BETA) Delete health checks.'
	'describe:(BETA) Display detailed information about a health check.'
	'list:(BETA) List Google Compute Engine health checks.'
)

# groups
local -a _create_arguments
_create_arguments=(
	'http:(BETA) Create a HTTP health check to monitor load balanced
instances.'
	'http2:(BETA) Create a HTTP2 health check to monitor load balanced
instances.'
	'https:(BETA) Create a HTTPS health check to monitor load balanced
instances.'
	'ssl:(BETA) Create a SSL health check to monitor load balanced
instances.'
	'tcp:(BETA) Create a TCP health check to monitor load balanced
instances.'
)

# groups

__auto-create ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create health checks for load balanced instances." _create_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (http)
      __auto-http
      ;;
      (http2)
      __auto-http2
      ;;
      (https)
      __auto-https
      ;;
      (ssl)
      __auto-ssl
      ;;
      (tcp)
      __auto-tcp
      ;;
    esac
    ;;
	esac
}

local -a _update_arguments
_update_arguments=(
	'http:(BETA) Update a HTTP health check.'
	'http2:(BETA) Update a HTTP2 health check.'
	'https:(BETA) Update a HTTPS health check.'
	'ssl:(BETA) Update a SSL health check.'
	'tcp:(BETA) Update a TCP health check.'
)

# groups

__auto-update ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Update health checks for load balanced instances." _update_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (http)
      __auto-http
      ;;
      (http2)
      __auto-http2
      ;;
      (https)
      __auto-https
      ;;
      (ssl)
      __auto-ssl
      ;;
      (tcp)
      __auto-tcp
      ;;
    esac
    ;;
	esac
}


__auto-health_checks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate health checks for load balanced
instances." _health_checks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (update)
      __auto-update
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _http_health_checks_arguments
_http_health_checks_arguments=(
	'create:(BETA) Create an HTTP health check to monitor load balanced
instances.'
	'delete:(BETA) Delete HTTP health checks.'
	'describe:(BETA) Display detailed information about an HTTP health check.'
	'list:(BETA) List Google Compute Engine health checks.'
	'update:(BETA) Update an HTTP health check.'
)

# groups

__auto-http_health_checks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate HTTP health checks for load balanced
instances." _http_health_checks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _https_health_checks_arguments
_https_health_checks_arguments=(
	'create:(BETA) Create an HTTPS health check to monitor load balanced
instances.'
	'delete:(BETA) Delete HTTPS health checks.'
	'describe:(BETA) Display detailed information about an HTTPS health check.'
	'list:(BETA) List Google Compute Engine HTTPS health checks.'
	'update:(BETA) Update an HTTPS health check.'
)

# groups

__auto-https_health_checks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate HTTPS health checks for load balanced
instances." _https_health_checks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _images_arguments
_images_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding for an image.'
	'add_labels:(BETA) Add labels to Google Compute Engine images.'
	'create:(BETA) Create Google Compute Engine images.'
	'delete:(BETA) Delete Google Compute Engine images.'
	'deprecate:(BETA) Manage deprecation status of Google Compute Engine images.'
	'describe:(BETA) Describe a Google Compute Engine image.'
	'describe_from_family:(BETA) Describe the latest image from an image family.'
	'export:(BETA) Export a Google Compute Engine image.'
	'get_iam_policy:(BETA) Get the IAM policy for a Google Compute Engine image.'
	'import:(BETA) Import an image into Google Compute Engine.'
	'list:(BETA) List Google Compute Engine images.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for an image.'
	'remove_labels:(BETA) Remove labels from Google Compute Engine images.'
	'set_iam_policy:(BETA) Set IAM policy for a disk image.'
	'update:(BETA) Update a Google Compute Engine image.'
)

# groups

__auto-images ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete Google Compute Engine images." _images_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (add_labels)
      __auto-add_labels
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (deprecate)
      __auto-deprecate
      ;;
      (describe)
      __auto-describe
      ;;
      (describe_from_family)
      __auto-describe_from_family
      ;;
      (export)
      __auto-export
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _instance_groups_arguments
_instance_groups_arguments=(
	'managed:(BETA) Read and manipulate Google Compute Engine managed instance
groups.'
	'unmanaged:(BETA) Read and manipulate Google Compute Engine unmanaged instance
group.'
	'describe:(BETA) Display detailed information about an instance group.'
	'get_named_ports:(BETA) Lists the named ports for an instance group resource.'
	'list:(BETA) List Google Compute Engine instance groups.'
	'list_instances:(BETA) List instances present in the instance group.'
	'set_named_ports:(BETA) Sets the list of named ports for an instance group.'
)

# groups
local -a _managed_arguments
_managed_arguments=(
	'rolling_action:(BETA) Manipulate rolling actions on Google Compute Engine managed
instance groups.'
	'abandon_instances:(BETA) Abandon instances owned by a managed instance group.'
	'create:(BETA) Create a Compute Engine managed instance group.'
	'delete:(BETA) Delete Google Compute Engine managed instance groups.'
	'delete_instances:(BETA) Delete instances managed by managed instance group.'
	'describe:(BETA) Display detailed information about an instance group.'
	'export_autoscaling:(BETA) Export autoscaling parameters of a managed instance group.'
	'get_named_ports:(BETA) Lists the named ports for an instance group resource.'
	'list:(BETA) List Google Compute Engine managed instance groups.'
	'list_instances:(BETA) List instances present in the managed instance group.'
	'recreate_instances:(BETA) Recreate instances managed by a managed instance group.'
	'resize:(BETA) Set managed instance group size.'
	'set_autohealing:(BETA) Set autohealing policy for managed instance group.'
	'set_autoscaling:(BETA) Set autoscaling parameters of a managed instance group.'
	'set_instance_template:(BETA) Set instance template for managed instance group.'
	'set_named_ports:(BETA) Sets the list of named ports for an instance group.'
	'set_target_pools:(BETA) Set target pools of managed instance group.'
	'stop_autoscaling:(BETA) Stop autoscaling a managed instance group.'
	'wait_until_stable:(BETA) Waits until state of managed instance group is stable.'
)

# groups
local -a _rolling_action_arguments
_rolling_action_arguments=(
	'replace:(BETA) Replaces instances in a managed instance group.'
	'restart:(BETA) Restarts instances in a managed instance group.'
	'start_update:(BETA) Updates instances in a managed instance group.'
	'stop_proactive_update:(BETA) Stop the proactive update process of managed instance group.'
)

# groups

__auto-rolling_action ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manipulate rolling actions on Google Compute Engine managed
instance groups." _rolling_action_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (replace)
      __auto-replace
      ;;
      (restart)
      __auto-restart
      ;;
      (start_update)
      __auto-start_update
      ;;
      (stop_proactive_update)
      __auto-stop_proactive_update
      ;;
    esac
    ;;
	esac
}


__auto-managed ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine managed instance
groups." _managed_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (rolling_action)
      __auto-rolling_action
      ;;
      (abandon_instances)
      __auto-abandon_instances
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_instances)
      __auto-delete_instances
      ;;
      (describe)
      __auto-describe
      ;;
      (export_autoscaling)
      __auto-export_autoscaling
      ;;
      (get_named_ports)
      __auto-get_named_ports
      ;;
      (list)
      __auto-list
      ;;
      (list_instances)
      __auto-list_instances
      ;;
      (recreate_instances)
      __auto-recreate_instances
      ;;
      (resize)
      __auto-resize
      ;;
      (set_autohealing)
      __auto-set_autohealing
      ;;
      (set_autoscaling)
      __auto-set_autoscaling
      ;;
      (set_instance_template)
      __auto-set_instance_template
      ;;
      (set_named_ports)
      __auto-set_named_ports
      ;;
      (set_target_pools)
      __auto-set_target_pools
      ;;
      (stop_autoscaling)
      __auto-stop_autoscaling
      ;;
      (wait_until_stable)
      __auto-wait_until_stable
      ;;
    esac
    ;;
	esac
}

local -a _unmanaged_arguments
_unmanaged_arguments=(
	'add_instances:(BETA) Adds instances to an unmanaged instance group by name.'
	'create:(BETA) Create a Compute Engine unmanaged instance group.'
	'delete:(BETA) Delete Google Compute Engine unmanaged instance groups.'
	'describe:(BETA) Describe an instance group.'
	'get_named_ports:(BETA) Lists the named ports for an instance group resource.'
	'list:(BETA) List Google Compute Engine unmanaged instance groups.'
	'list_instances:(BETA) List instances present in the instance group.'
	'remove_instances:(BETA) Removes resources from an unmanaged instance group by
instance name.'
	'set_named_ports:(BETA) Sets the list of named ports for an instance group.'
)

# groups

__auto-unmanaged ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine unmanaged instance
group." _unmanaged_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_instances)
      __auto-add_instances
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_named_ports)
      __auto-get_named_ports
      ;;
      (list)
      __auto-list
      ;;
      (list_instances)
      __auto-list_instances
      ;;
      (remove_instances)
      __auto-remove_instances
      ;;
      (set_named_ports)
      __auto-set_named_ports
      ;;
    esac
    ;;
	esac
}


__auto-instance_groups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine instance groups." _instance_groups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (managed)
      __auto-managed
      ;;
      (unmanaged)
      __auto-unmanaged
      ;;
      (describe)
      __auto-describe
      ;;
      (get_named_ports)
      __auto-get_named_ports
      ;;
      (list)
      __auto-list
      ;;
      (list_instances)
      __auto-list_instances
      ;;
      (set_named_ports)
      __auto-set_named_ports
      ;;
    esac
    ;;
	esac
}

local -a _instance_templates_arguments
_instance_templates_arguments=(
	'add_iam_policy_binding:(BETA) Add an IAM policy binding to an instance template.'
	'create:(BETA) Create a Compute Engine virtual machine instance template.'
	'create_with_container:(BETA) Creates Google Compute Engine virtual machine instance
template running Docker images.'
	'delete:(BETA) Delete Google Compute Engine virtual machine instance
templates.'
	'describe:(BETA) Describe a virtual machine instance template.'
	'get_iam_policy:(BETA) Get the IAM policy for a Google Compute Engine instance
template.'
	'list:(BETA) List Google Compute Engine instance templates.'
	'remove_iam_policy_binding:(BETA) Remove an IAM policy binding from an instance template.'
	'set_iam_policy:(BETA) Set the IAM policy for a Google Compute Engine instance
template.'
)

# groups

__auto-instance_templates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine instances
templates." _instance_templates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (create_with_container)
      __auto-create_with_container
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'network_interfaces:(BETA) Read and manipulate Google Compute Engine instance network
interfaces.'
	'add_access_config:(BETA) Create a Google Compute Engine virtual machine access
configuration.'
	'add_iam_policy_binding:(BETA) Add IAM policy binding for an instance.'
	'add_labels:(BETA) Add labels to Google Compute Engine virtual machine
instances.'
	'add_metadata:(BETA) Add or update instance metadata.'
	'add_tags:(BETA) Add tags to Google Compute Engine virtual machine instances.'
	'attach_disk:(BETA) Attach a disk to an instance.'
	'create:(BETA) Create Google Compute Engine virtual machine instances.'
	'create_with_container:(BETA) Creates Google Compute engine virtual machine instances
running container images.'
	'delete:(BETA) Delete Google Compute Engine virtual machine instances.'
	'delete_access_config:(BETA) Delete an access configuration from a virtual machine
network interface.'
	'describe:(BETA) Describe a virtual machine instance.'
	'detach_disk:(BETA) Detach disks from Compute Engine virtual machine instances.'
	'get_iam_policy:(BETA) Get the IAM policy for a Google Compute Engine instance.'
	'get_serial_port_output:(BETA) Read output from a virtual machine instance&#39;s serial port.'
	'list:(BETA) List Google Compute Engine instances.'
	'move:(BETA) Move an instance and its attached persistent disks between
zones.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for an instance.'
	'remove_labels:(BETA) Remove labels from Google Compute Engine virtual machine
instances.'
	'remove_metadata:(BETA) Remove instance metadata.'
	'remove_tags:(BETA) Remove tags from Google Compute Engine virtual machine
instances.'
	'reset:(BETA) Reset a virtual machine instance.'
	'set_disk_auto_delete:(BETA) Set auto-delete behavior for disks.'
	'set_iam_policy:(BETA) Set IAM policy for an instance.'
	'set_machine_type:(BETA) Set machine type for Google Compute Engine virtual machines.'
	'set_scheduling:(BETA) Set scheduling options for Google Compute Engine virtual
machines.'
	'set_scopes:(BETA) Set scopes and service account for a Google Compute Engine
instance.'
	'simulate_maintenance_event:(BETA) Simulate maintenance of virtual machine instances.'
	'start:(BETA) Start a stopped virtual machine instance.'
	'stop:(BETA) Stop a virtual machine instance.'
	'tail_serial_port_output:(BETA) Periodically fetch new output from a virtual machine
instance&#39;s serial port and display it as it becomes available.'
	'update:(BETA) Update a Google Compute Engine virtual machine.'
	'update_access_config:(BETA) Update a Google Compute Engine virtual machine access
configuration.'
	'update_container:(BETA) Updates Google Compute engine virtual machine instances
running container images.'
)

# groups
local -a _network_interfaces_arguments
_network_interfaces_arguments=(
	'update:(BETA) Update a Google Compute Engine virtual machine network
interface.'
)

# groups

__auto-network_interfaces ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine instance network
interfaces." _network_interfaces_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine virtual machine
instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (network_interfaces)
      __auto-network_interfaces
      ;;
      (add_access_config)
      __auto-add_access_config
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (add_labels)
      __auto-add_labels
      ;;
      (add_metadata)
      __auto-add_metadata
      ;;
      (add_tags)
      __auto-add_tags
      ;;
      (attach_disk)
      __auto-attach_disk
      ;;
      (create)
      __auto-create
      ;;
      (create_with_container)
      __auto-create_with_container
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_access_config)
      __auto-delete_access_config
      ;;
      (describe)
      __auto-describe
      ;;
      (detach_disk)
      __auto-detach_disk
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (get_serial_port_output)
      __auto-get_serial_port_output
      ;;
      (list)
      __auto-list
      ;;
      (move)
      __auto-move
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (remove_metadata)
      __auto-remove_metadata
      ;;
      (remove_tags)
      __auto-remove_tags
      ;;
      (reset)
      __auto-reset
      ;;
      (set_disk_auto_delete)
      __auto-set_disk_auto_delete
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (set_machine_type)
      __auto-set_machine_type
      ;;
      (set_scheduling)
      __auto-set_scheduling
      ;;
      (set_scopes)
      __auto-set_scopes
      ;;
      (simulate_maintenance_event)
      __auto-simulate_maintenance_event
      ;;
      (start)
      __auto-start
      ;;
      (stop)
      __auto-stop
      ;;
      (tail_serial_port_output)
      __auto-tail_serial_port_output
      ;;
      (update)
      __auto-update
      ;;
      (update_access_config)
      __auto-update_access_config
      ;;
      (update_container)
      __auto-update_container
      ;;
    esac
    ;;
	esac
}

local -a _interconnects_arguments
_interconnects_arguments=(
	'attachments:(BETA) Read and manipulate Google Compute Engine interconnect
attachments.'
	'locations:(BETA) Read and manipulate Google Compute Engine interconnect
locations.'
	'create:(BETA) Create a Google Compute Engine interconnect.'
	'delete:(BETA) Delete Google Compute Engine interconnects.'
	'describe:(BETA) Describe a Google Compute Engine interconnect.'
	'list:(BETA) List Google Compute Engine interconnects.'
	'update:(BETA) Update a Google Compute Engine interconnect.'
)

# groups
local -a _attachments_arguments
_attachments_arguments=(
	'dedicated:(BETA) Create or manipulate dedicated interconnect attachments.'
	'partner:(BETA) Create or manipulate partner interconnect attachments.'
	'delete:(BETA) Delete interconnects.'
	'describe:(BETA) Describe a Google Compute Engine interconnect attachment.'
	'list:(BETA) List Google Compute Engine interconnect attachments.'
)

# groups
local -a _dedicated_arguments
_dedicated_arguments=(
	'create:(BETA) Create a Google Compute Engine dedicated interconnect
attachment.'
	'update:(BETA) Update a Google Compute Engine dedicated interconnect
attachment.'
)

# groups

__auto-dedicated ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create or manipulate dedicated interconnect attachments." _dedicated_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _partner_arguments
_partner_arguments=(
	'create:(BETA) Create a Google Compute Engine partner interconnect
attachment.'
	'update:(BETA) Update a Google Compute Engine partner interconnect
attachment.'
)

# groups

__auto-partner ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create or manipulate partner interconnect attachments." _partner_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-attachments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine interconnect
attachments." _attachments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (dedicated)
      __auto-dedicated
      ;;
      (partner)
      __auto-partner
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'describe:(BETA) Describe a Google Compute Engine interconnect location.'
	'list:(BETA) List Google Compute Engine interconnect locations.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine interconnect
locations." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-interconnects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine interconnects." _interconnects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (attachments)
      __auto-attachments
      ;;
      (locations)
      __auto-locations
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _machine_types_arguments
_machine_types_arguments=(
	'describe:(BETA) Describe a Google Compute Engine machine type.'
	'list:(BETA) List Google Compute Engine machine types.'
)

# groups

__auto-machine_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read Google Compute Engine virtual machine types." _machine_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _network_endpoint_groups_arguments
_network_endpoint_groups_arguments=(
	'create:(BETA) Creates a Google Compute Engine network endpoint group.'
	'delete:(BETA) Deletes a Google Compute Engine network endpoint group.'
	'describe:(BETA) Describes a Google Compute Engine network endpoint group.'
	'list:(BETA) List Google Compute Engine network endpoint groups.'
	'list_network_endpoints:(BETA) List network endpoints in a network endpoint group.'
	'update:(BETA) Updates a Google Compute Engine network endpoint group.'
)

# groups

__auto-network_endpoint_groups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine network endpoint
groups." _network_endpoint_groups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_network_endpoints)
      __auto-list_network_endpoints
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _networks_arguments
_networks_arguments=(
	'peerings:(BETA) List, create, and delete Google Compute Engine network
peerings.'
	'subnets:(BETA) List, describe, and delete Google Compute Engine
subnetworks.'
	'create:(BETA) Create a Google Compute Engine network.'
	'delete:(BETA) Delete Google Compute Engine networks.'
	'describe:(BETA) Describe a Google Compute Engine network.'
	'list:(BETA) List Google Compute Engine networks.'
	'update:(BETA) Update a Google Compute Engine network.'
)

# groups
local -a _peerings_arguments
_peerings_arguments=(
	'create:(BETA) Create a Google Compute Engine network peering.'
	'delete:(BETA) Delete a Google Compute Engine network peering.'
	'list:(BETA) List Google Compute Engine peerings.'
)

# groups

__auto-peerings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete Google Compute Engine network
peerings." _peerings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _subnets_arguments
_subnets_arguments=(
	'create:(BETA) Define a subnet for a network in custom subnet mode.'
	'delete:(BETA) Delete Google Compute Engine subnetworks.'
	'describe:(BETA) Describe a Google Compute Engine subnetwork.'
	'expand_ip_range:(BETA) Expand the IP range of a Google Compute Engine subnetwork.'
	'get_iam_policy:(BETA) Get the IAM Policy for a Google Compute Engine subnetwork.'
	'list:(BETA) List Google Compute Engine subnetworks.'
	'list_usable:(BETA) List Google Compute Engine subnetworks permitted for use.'
	'set_iam_policy:(BETA) Set the IAM Policy for a Google Compute Engine subnetwork.'
	'update:(BETA) Updates properties of an existing Google Compute Engine
subnetwork.'
)

# groups

__auto-subnets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, describe, and delete Google Compute Engine
subnetworks." _subnets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (expand_ip_range)
      __auto-expand_ip_range
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (list_usable)
      __auto-list_usable
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-networks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete Google Compute Engine networks." _networks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (peerings)
      __auto-peerings
      ;;
      (subnets)
      __auto-subnets
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Describe a Google Compute Engine operation.'
	'list:(BETA) List Google Compute Engine operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _os_login_arguments
_os_login_arguments=(
	'ssh_keys:(BETA) List, add, update, and remove OS Login SSH Keys.'
	'describe_profile:(BETA) Describe the OS Login profile for the current user.'
	'remove_profile:(BETA) Remove the posix account information for the current user.'
)

# groups
local -a _ssh_keys_arguments
_ssh_keys_arguments=(
	'add:(BETA) Add an SSH public key to an OS Login profile.'
	'describe:(BETA) Describe an SSH Public Key from an OS Login Profile.'
	'list:(BETA) List SSH public keys from an OS Login profile.'
	'remove:(BETA) Remove an SSH public key from an OS Login profile.'
	'update:(BETA) Update an SSH public key in an OS Login profile.'
)

# groups

__auto-ssh_keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, add, update, and remove OS Login SSH Keys." _ssh_keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add)
      __auto-add
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (remove)
      __auto-remove
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-os_login ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manipulate Google Compute Engine OS Login
resources." _os_login_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (ssh_keys)
      __auto-ssh_keys
      ;;
      (describe_profile)
      __auto-describe_profile
      ;;
      (remove_profile)
      __auto-remove_profile
      ;;
    esac
    ;;
	esac
}

local -a _project_info_arguments
_project_info_arguments=(
	'add_metadata:(BETA) Add or update project-wide metadata.'
	'describe:(BETA) Describe the Google Compute Engine project resource.'
	'remove_metadata:(BETA) Remove project-wide metadata entries.'
	'set_usage_bucket:(BETA) Set usage reporting bucket for a project.'
	'update:(BETA) Update a Google Compute Engine project resource.'
)

# groups

__auto-project_info ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate project-level data like quotas and
metadata." _project_info_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_metadata)
      __auto-add_metadata
      ;;
      (describe)
      __auto-describe
      ;;
      (remove_metadata)
      __auto-remove_metadata
      ;;
      (set_usage_bucket)
      __auto-set_usage_bucket
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'describe:(BETA) Describe a Google Compute Engine region.'
	'list:(BETA) List Google Compute Engine regions.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List Google Compute Engine regions." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _routers_arguments
_routers_arguments=(
	'add_bgp_peer:(BETA) Add a BGP peer to a Google Compute Engine router.'
	'add_interface:(BETA) Add an interface to a Google Compute Engine router.'
	'create:(BETA) Create a Google Compute Engine router.'
	'delete:(BETA) Delete Google Compute Engine routers.'
	'describe:(BETA) Describe a Google Compute Engine router.'
	'get_status:(BETA) Get status of a Google Compute Engine router.'
	'list:(BETA) List Google Compute Engine routers.'
	'remove_bgp_peer:(BETA) Remove a BGP peer from a Google Compute Engine router.'
	'remove_interface:(BETA) Remove an interface from a Google Compute Engine router.'
	'update:(BETA) Update a Google Compute Engine router.'
	'update_bgp_peer:(BETA) Update a BGP peer on a Google Compute Engine router.'
	'update_interface:(BETA) Update an interface on a Google Compute Engine router.'
)

# groups

__auto-routers ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete Google Compute Engine routers." _routers_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_bgp_peer)
      __auto-add_bgp_peer
      ;;
      (add_interface)
      __auto-add_interface
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_status)
      __auto-get_status
      ;;
      (list)
      __auto-list
      ;;
      (remove_bgp_peer)
      __auto-remove_bgp_peer
      ;;
      (remove_interface)
      __auto-remove_interface
      ;;
      (update)
      __auto-update
      ;;
      (update_bgp_peer)
      __auto-update_bgp_peer
      ;;
      (update_interface)
      __auto-update_interface
      ;;
    esac
    ;;
	esac
}

local -a _routes_arguments
_routes_arguments=(
	'create:(BETA) Create a new route.'
	'delete:(BETA) Delete routes.'
	'describe:(BETA) Describe a route.'
	'list:(BETA) List Google Compute Engine routes.'
)

# groups

__auto-routes ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate routes." _routes_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _security_policies_arguments
_security_policies_arguments=(
	'rules:(BETA) Read and manipulate Google Compute Engine security policies
rules.'
	'create:(BETA) Create a Google Compute Engine security policy.'
	'delete:(BETA) Delete security policies.'
	'describe:(BETA) Describe a Google Compute Engine security policy.'
	'export:(BETA) Export security policy configs into yaml files.'
	'import:(BETA) Import security policy configs into your project.'
	'list:(BETA) List Google Compute Engine security policies.'
)

# groups
local -a _rules_arguments
_rules_arguments=(
	'create:(BETA) Create a Google Compute Engine security policy rule.'
	'delete:(BETA) Delete Google Compute Engine security policy rules.'
	'describe:(BETA) Describe a Google Compute Engine security policy rule.'
	'update:(BETA) Update a Google Compute Engine security policy rule.'
)

# groups

__auto-rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine security policies
rules." _rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-security_policies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine security policies.
Security policies are used to control access to Google Cloud HTTP/HTTPS load
balancers." _security_policies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (rules)
      __auto-rules
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _shared_vpc_arguments
_shared_vpc_arguments=(
	'associated_projects:(BETA) Configure associated projects for cross-project networking
(XPN).'
	'organizations:(BETA) Configure organizations for cross-project networking (XPN).'
	'disable:(BETA) Disable the given project as a shared VPC host.'
	'enable:(BETA) Enable the given project as a shared VPC host.'
	'get_host_project:(BETA) Get the shared VPC host project that the given project is
associated with.'
	'list_associated_resources:(BETA) List the resources associated with the given shared VPC host
project.'
)

# groups
local -a _associated_projects_arguments
_associated_projects_arguments=(
	'add:(BETA) Associate the given project with a given shared VPC host
project.'
	'list:(BETA) List the associated service projects of the given host
project.'
	'remove:(BETA) Disassociate the given project from the given shared VPC
host project.'
)

# groups

__auto-associated_projects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Configure associated projects for cross-project networking
(XPN)." _associated_projects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add)
      __auto-add
      ;;
      (list)
      __auto-list
      ;;
      (remove)
      __auto-remove
      ;;
    esac
    ;;
	esac
}

local -a _organizations_arguments
_organizations_arguments=(
	'list_host_projects:(BETA) List shared VPC host projects in a given organization.'
)

# groups

__auto-organizations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Configure organizations for cross-project networking (XPN)." _organizations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list_host_projects)
      __auto-list_host_projects
      ;;
    esac
    ;;
	esac
}


__auto-shared_vpc ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Configure shared VPC." _shared_vpc_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (associated_projects)
      __auto-associated_projects
      ;;
      (organizations)
      __auto-organizations
      ;;
      (disable)
      __auto-disable
      ;;
      (enable)
      __auto-enable
      ;;
      (get_host_project)
      __auto-get_host_project
      ;;
      (list_associated_resources)
      __auto-list_associated_resources
      ;;
    esac
    ;;
	esac
}

local -a _snapshots_arguments
_snapshots_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding to a Google Compute Engine snapshot.'
	'add_labels:(BETA) Add labels to Google Compute Engine snapshots.'
	'delete:(BETA) Delete Google Compute Engine snapshots.'
	'describe:(BETA) Describe a Google Compute Engine snapshot.'
	'get_iam_policy:(BETA) Get the IAM policy for a Google Compute Engine snapshot.'
	'list:(BETA) List Google Compute Engine snapshots.'
	'remove_iam_policy_binding:(BETA) Remove a policy binding from a Google Compute Engine
snapshot.'
	'remove_labels:(BETA) Remove labels from Google Compute Engine snapshots.'
	'set_iam_policy:(BETA) Set the IAM policy for a Google Compute Engine snapshot.'
	'update:(BETA) Update a Google Compute Engine snapshot.'
)

# groups

__auto-snapshots ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, describe, and delete Google Compute Engine snapshots." _snapshots_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (add_labels)
      __auto-add_labels
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _sole_tenancy_arguments
_sole_tenancy_arguments=(
	'node_groups:(BETA) Read Google Compute Engine sole-tenancy node groups.'
	'node_templates:(BETA) Read and manage Google Compute Engine sole-tenancy node
templates.'
	'node_types:(BETA) Read Google Compute Engine sole-tenancy node types.'
)

# groups
local -a _node_groups_arguments
_node_groups_arguments=(
	'add_iam_policy_binding:(BETA) Add an IAM policy binding to a node group.'
	'create:(BETA) Creates a Google Compute Engine node group.'
	'delete:(BETA) Deletes a Google Compute Engine node group.'
	'describe:(BETA) Describes a Google Compute Engine node group.'
	'get_iam_policy:(BETA) Get the IAM Policy for a Google Compute Engine node group.'
	'list:(BETA) List Google Compute Engine node groups.'
	'list_nodes:(BETA) List Google Compute Engine sole-tenant nodes present in a
node group.'
	'remove_iam_policy_binding:(BETA) Remove an IAM policy binding from a node group.'
	'set_iam_policy:(BETA) Set the IAM policy for a Google Compute Engine node group.'
	'update:(BETA) Updates a Google Compute Engine node group.'
)

# groups

__auto-node_groups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read Google Compute Engine sole-tenancy node groups." _node_groups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (list_nodes)
      __auto-list_nodes
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _node_templates_arguments
_node_templates_arguments=(
	'add_iam_policy_binding:(BETA) Add an IAM policy binding to a node template.'
	'create:(BETA) Creates a Google Compute Engine node template.'
	'delete:(BETA) Deletes a Google Compute Engine node template.'
	'describe:(BETA) Describes a Google Compute Engine node template.'
	'get_iam_policy:(BETA) Get the IAM Policy for a Google Compute Engine node
template.'
	'list:(BETA) List Google Compute Engine node templates.'
	'remove_iam_policy_binding:(BETA) Remove an IAM policy binding from a node template.'
	'set_iam_policy:(BETA) Set the IAM policy for a Google Compute Engine node
template.'
)

# groups

__auto-node_templates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manage Google Compute Engine sole-tenancy node
templates." _node_templates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _node_types_arguments
_node_types_arguments=(
	'describe:(BETA) Describes a Google Compute Engine node type.'
	'list:(BETA) List Google Compute Engine node types.'
)

# groups

__auto-node_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read Google Compute Engine sole-tenancy node types." _node_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-sole_tenancy ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manage Google Compute Engine sole-tenancy
resources." _sole_tenancy_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (node_groups)
      __auto-node_groups
      ;;
      (node_templates)
      __auto-node_templates
      ;;
      (node_types)
      __auto-node_types
      ;;
    esac
    ;;
	esac
}

local -a _ssl_certificates_arguments
_ssl_certificates_arguments=(
	'create:(BETA) Create a Google Compute Engine SSL certificate.'
	'delete:(BETA) Delete Google Compute Engine SSL certificates.'
	'describe:(BETA) Describe a Google Compute Engine SSL certificate.'
	'list:(BETA) List Google Compute Engine SSL certificates.'
)

# groups

__auto-ssl_certificates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete Google Compute Engine SSL
certificates." _ssl_certificates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _ssl_policies_arguments
_ssl_policies_arguments=(
	'create:(BETA) Create a new Google Compute Engine SSL policy.'
	'delete:(BETA) Delete Google Compute Engine SSL policies.'
	'describe:(BETA) Describe a Google Compute Engine ssl policy.'
	'list:(BETA) List Google Compute Engine SSL policies.'
	'list_available_features:(BETA) List available features that can be specified in an SSL
policy.'
	'update:(BETA) Update a Google Compute Engine SSL policy.'
)

# groups

__auto-ssl_policies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, delete and update Google Compute Engine SSL
policies." _ssl_policies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_available_features)
      __auto-list_available_features
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_http_proxies_arguments
_target_http_proxies_arguments=(
	'create:(BETA) Create a target HTTP proxy.'
	'delete:(BETA) Delete target HTTP proxies.'
	'describe:(BETA) Display detailed information about a target HTTP proxy.'
	'list:(BETA) List Google Compute Engine target HTTP proxies.'
	'update:(BETA) Update a target HTTP proxy.'
)

# groups

__auto-target_http_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete target HTTP proxies." _target_http_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_https_proxies_arguments
_target_https_proxies_arguments=(
	'create:(BETA) Create a target HTTPS proxy.'
	'delete:(BETA) Delete target HTTPS proxies.'
	'describe:(BETA) Display detailed information about a target HTTPS proxy.'
	'list:(BETA) List Google Compute Engine target HTTPS proxies.'
	'update:(BETA) Update a target HTTPS proxy.'
)

# groups

__auto-target_https_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete target HTTPS proxies." _target_https_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_instances_arguments
_target_instances_arguments=(
	'create:(BETA) Create a target instance for handling traffic from a
forwarding rule.'
	'delete:(BETA) Delete target instances.'
	'describe:(BETA) Describe a target instance.'
	'list:(BETA) List Google Compute Engine target instances.'
)

# groups

__auto-target_instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine virtual target
instances." _target_instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _target_pools_arguments
_target_pools_arguments=(
	'add_health_checks:(BETA) Add an HTTP health check to a target pool.'
	'add_instances:(BETA) Add instances to a target pool.'
	'create:(BETA) Define a load-balanced pool of virtual machine instances.'
	'delete:(BETA) Delete target pools.'
	'describe:(BETA) Describe a Google Compute Engine target pool.'
	'get_health:(BETA) Get the health of instances in a target pool.'
	'list:(BETA) List Google Compute Engine target pools.'
	'remove_health_checks:(BETA) Remove an HTTP health check from a target pool.'
	'remove_instances:(BETA) Remove instances from a target pool.'
	'set_backup:(BETA) Set a backup pool for a target pool.'
)

# groups

__auto-target_pools ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Control Compute Engine target pools for network load
balancing." _target_pools_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_health_checks)
      __auto-add_health_checks
      ;;
      (add_instances)
      __auto-add_instances
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_health)
      __auto-get_health
      ;;
      (list)
      __auto-list
      ;;
      (remove_health_checks)
      __auto-remove_health_checks
      ;;
      (remove_instances)
      __auto-remove_instances
      ;;
      (set_backup)
      __auto-set_backup
      ;;
    esac
    ;;
	esac
}

local -a _target_ssl_proxies_arguments
_target_ssl_proxies_arguments=(
	'create:(BETA) Create a target SSL proxy.'
	'delete:(BETA) Delete target SSL proxies.'
	'describe:(BETA) Display detailed information about a target SSL proxy.'
	'list:(BETA) List Google Compute Engine target SSL proxies.'
	'update:(BETA) Update a target SSL proxy.'
)

# groups

__auto-target_ssl_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete target SSL proxies." _target_ssl_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_tcp_proxies_arguments
_target_tcp_proxies_arguments=(
	'create:(BETA) Create a target TCP proxy.'
	'delete:(BETA) Delete target TCP proxies.'
	'describe:(BETA) Display detailed information about a target TCP proxy.'
	'list:(BETA) List Google Compute Engine target TCP proxies.'
	'update:(BETA) Update a target TCP proxy.'
)

# groups

__auto-target_tcp_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete target TCP proxies." _target_tcp_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_vpn_gateways_arguments
_target_vpn_gateways_arguments=(
	'create:(BETA) Create a target VPN Gateway.'
	'delete:(BETA) Delete target vpn gateways.'
	'describe:(BETA) Describe a Google Compute Engine target vpn gateway.'
	'list:(BETA) List Google Compute Engine target VPN gateways.'
	'update:(BETA) Update a Google Compute Engine target VPN gateway.'
)

# groups

__auto-target_vpn_gateways ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine VPN Gateways." _target_vpn_gateways_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _tpus_arguments
_tpus_arguments=(
	'accelerator_types:(BETA) List or Describe Available Cloud TPU accelerator types.'
	'locations:(BETA) List or Describe Available Cloud TPU Locations.'
	'versions:(BETA) Explore Available Tensorflow versions for Cloud TPUs.'
	'create:(BETA) Create a new Cloud TPU.'
	'delete:(BETA) Deletes a Cloud TPU.'
	'describe:(BETA) Describe a Cloud TPU.'
	'list:(BETA) List Cloud TPUs.'
	'reimage:(BETA) Reimages the OS on a Cloud TPU.'
	'start:(BETA) Start a Cloud TPU.'
	'stop:(BETA) Stop a Cloud TPU.'
)

# groups
local -a _accelerator_types_arguments
_accelerator_types_arguments=(
	'describe:(BETA) Describe an accelerator type available for Cloud TPUs.'
	'list:(BETA) List available accelerator types for Cloud TPUs.'
)

# groups

__auto-accelerator_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List or Describe Available Cloud TPU accelerator types." _accelerator_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'describe:(BETA) Describe a Cloud TPU Location.'
	'list:(BETA) List available locations for Cloud TPUs.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List or Describe Available Cloud TPU Locations." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'describe:(BETA) Describe a Tensorflow version available for Cloud TPUs.'
	'list:(BETA) List available Tensorflow versions.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Explore Available Tensorflow versions for Cloud TPUs." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-tpus ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete Cloud TPUs." _tpus_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (accelerator_types)
      __auto-accelerator_types
      ;;
      (locations)
      __auto-locations
      ;;
      (versions)
      __auto-versions
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (reimage)
      __auto-reimage
      ;;
      (start)
      __auto-start
      ;;
      (stop)
      __auto-stop
      ;;
    esac
    ;;
	esac
}

local -a _url_maps_arguments
_url_maps_arguments=(
	'add_host_rule:(BETA) Add a rule to a URL map to map hosts to a path matcher.'
	'add_path_matcher:(BETA) Add a path matcher to a URL map.'
	'create:(BETA) Create a URL map.'
	'delete:(BETA) Delete URL maps.'
	'describe:(BETA) Describe a URL map.'
	'edit:(BETA) Modify URL maps.'
	'invalidate_cdn_cache:(BETA) Invalidate specified objects for a URL map in Cloud CDN
caches.'
	'list:(BETA) List Google Compute Engine URL maps.'
	'list_cdn_cache_invalidations:(BETA) List Cloud CDN cache invalidations for a URL map.'
	'remove_host_rule:(BETA) Remove a host rule from a URL map.'
	'remove_path_matcher:(BETA) Remove a path matcher from a URL map.'
	'set_default_service:(BETA) Change the default service or default bucket of a URL map.'
)

# groups

__auto-url_maps ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, create, and delete URL maps." _url_maps_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_host_rule)
      __auto-add_host_rule
      ;;
      (add_path_matcher)
      __auto-add_path_matcher
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (edit)
      __auto-edit
      ;;
      (invalidate_cdn_cache)
      __auto-invalidate_cdn_cache
      ;;
      (list)
      __auto-list
      ;;
      (list_cdn_cache_invalidations)
      __auto-list_cdn_cache_invalidations
      ;;
      (remove_host_rule)
      __auto-remove_host_rule
      ;;
      (remove_path_matcher)
      __auto-remove_path_matcher
      ;;
      (set_default_service)
      __auto-set_default_service
      ;;
    esac
    ;;
	esac
}

local -a _vpn_tunnels_arguments
_vpn_tunnels_arguments=(
	'create:(BETA) Create a VPN tunnel.'
	'delete:(BETA) Delete vpn tunnels.'
	'describe:(BETA) Describe a Google Compute Engine vpn tunnel.'
	'list:(BETA) List Google Compute Engine VPN tunnels.'
	'update:(BETA) Update a Google Compute Engine VPN tunnel.'
)

# groups

__auto-vpn_tunnels ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Google Compute Engine VPN Tunnels." _vpn_tunnels_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _zones_arguments
_zones_arguments=(
	'describe:(BETA) Describe a Google Compute Engine zone.'
	'list:(BETA) List Google Compute Engine zones.'
)

# groups

__auto-zones ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List Google Compute Engine zones." _zones_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-compute ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manipulate Google Compute Engine resources." _compute_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (accelerator_types)
      __auto-accelerator_types
      ;;
      (addresses)
      __auto-addresses
      ;;
      (backend_buckets)
      __auto-backend_buckets
      ;;
      (backend_services)
      __auto-backend_services
      ;;
      (commitments)
      __auto-commitments
      ;;
      (disk_types)
      __auto-disk_types
      ;;
      (disks)
      __auto-disks
      ;;
      (firewall_rules)
      __auto-firewall_rules
      ;;
      (forwarding_rules)
      __auto-forwarding_rules
      ;;
      (health_checks)
      __auto-health_checks
      ;;
      (http_health_checks)
      __auto-http_health_checks
      ;;
      (https_health_checks)
      __auto-https_health_checks
      ;;
      (images)
      __auto-images
      ;;
      (instance_groups)
      __auto-instance_groups
      ;;
      (instance_templates)
      __auto-instance_templates
      ;;
      (instances)
      __auto-instances
      ;;
      (interconnects)
      __auto-interconnects
      ;;
      (machine_types)
      __auto-machine_types
      ;;
      (network_endpoint_groups)
      __auto-network_endpoint_groups
      ;;
      (networks)
      __auto-networks
      ;;
      (operations)
      __auto-operations
      ;;
      (os_login)
      __auto-os_login
      ;;
      (project_info)
      __auto-project_info
      ;;
      (regions)
      __auto-regions
      ;;
      (routers)
      __auto-routers
      ;;
      (routes)
      __auto-routes
      ;;
      (security_policies)
      __auto-security_policies
      ;;
      (shared_vpc)
      __auto-shared_vpc
      ;;
      (snapshots)
      __auto-snapshots
      ;;
      (sole_tenancy)
      __auto-sole_tenancy
      ;;
      (ssl_certificates)
      __auto-ssl_certificates
      ;;
      (ssl_policies)
      __auto-ssl_policies
      ;;
      (target_http_proxies)
      __auto-target_http_proxies
      ;;
      (target_https_proxies)
      __auto-target_https_proxies
      ;;
      (target_instances)
      __auto-target_instances
      ;;
      (target_pools)
      __auto-target_pools
      ;;
      (target_ssl_proxies)
      __auto-target_ssl_proxies
      ;;
      (target_tcp_proxies)
      __auto-target_tcp_proxies
      ;;
      (target_vpn_gateways)
      __auto-target_vpn_gateways
      ;;
      (tpus)
      __auto-tpus
      ;;
      (url_maps)
      __auto-url_maps
      ;;
      (vpn_tunnels)
      __auto-vpn_tunnels
      ;;
      (zones)
      __auto-zones
      ;;
      (config_ssh)
      __auto-config_ssh
      ;;
      (connect_to_serial_port)
      __auto-connect_to_serial_port
      ;;
      (copy_files)
      __auto-copy_files
      ;;
      (reset_windows_password)
      __auto-reset_windows_password
      ;;
      (scp)
      __auto-scp
      ;;
      (sign_url)
      __auto-sign_url
      ;;
      (ssh)
      __auto-ssh
      ;;
    esac
    ;;
	esac
}

local -a _config_arguments
_config_arguments=(
	'configurations:(BETA) Manage the set of gcloud named configurations.'
	'get_value:(BETA) Print the value of a Cloud SDK property.'
	'list:(BETA) List Cloud SDK properties for the currently active
configuration.'
	'set:(BETA) Set a Cloud SDK property.'
	'unset:(BETA) Unset a Cloud SDK property.'
)

# groups
local -a _configurations_arguments
_configurations_arguments=(
	'activate:(BETA) Activates an existing named configuration.'
	'create:(BETA) Creates a new named configuration.'
	'delete:(BETA) Deletes a named configuration.'
	'describe:(BETA) Describes a named configuration by listing its properties.'
	'list:(BETA) Lists existing named configurations.'
)

# groups

__auto-configurations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage the set of gcloud named configurations." _configurations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (activate)
      __auto-activate
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-config ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View and edit Cloud SDK properties." _config_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configurations)
      __auto-configurations
      ;;
      (get_value)
      __auto-get_value
      ;;
      (list)
      __auto-list
      ;;
      (set)
      __auto-set
      ;;
      (unset)
      __auto-unset
      ;;
    esac
    ;;
	esac
}

local -a _container_arguments
_container_arguments=(
	'binauthz:(BETA) Manage attestations for Binary Authorization on Google Cloud
Platform.'
	'builds:(BETA) (DEPRECATED) Create and manage builds.'
	'clusters:(BETA) Deploy and teardown Google Kubernetes Engine clusters.'
	'images:(BETA) List and manipulate Google Container Registry images.'
	'node_pools:(BETA) Create and delete operations for Google Kubernetes Engine
node pools.'
	'operations:(BETA) Get and list operations for Google Kubernetes Engine
clusters.'
	'subnets:(BETA) Manage subnets to be used by Google Kubernetes Engine
clusters.'
	'get_server_config:(BETA) Get Kubernetes Engine server config.'
)

# groups
local -a _binauthz_arguments
_binauthz_arguments=(
	'attestations:(BETA) Create and manage Google Binary Authorization attestations.'
	'attestors:(BETA) Create and manage Google Binary Authorization Attestation
Authorities.'
	'policy:(BETA) Create and manage Google Binary Authorization policy.'
	'create_signature_payload:(BETA) Create a JSON container image signature object.'
)

# groups
local -a _attestations_arguments
_attestations_arguments=(
	'create:(BETA) Create a Binary Authorization attestation.'
	'list:(BETA) List Binary Authorization attestations.'
)

# groups

__auto-attestations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Google Binary Authorization attestations." _attestations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _attestors_arguments
_attestors_arguments=(
	'public_keys:(BETA) Create and manage public keys associated with Attestation
Authorities.'
	'add_iam_policy_binding:(BETA) Add IAM policy binding to an attestor.'
	'create:(BETA) Create an Attestor.'
	'delete:(BETA) Delete an Attestor.'
	'describe:(BETA) Describe an Attestor.'
	'get_iam_policy:(BETA) Get the IAM policy for an attestor.'
	'list:(BETA) List Attestors associated with the current project.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding to an attestor.'
	'set_iam_policy:(BETA) Set the IAM policy for an attestor.'
	'update:(BETA) Update an existing Attestor.'
)

# groups
local -a _public_keys_arguments
_public_keys_arguments=(
	'add:(BETA) Add a public key to an Attestor.'
	'remove:(BETA) Remove a public key from an Attestor.'
	'update:(BETA) Update a public key on an Attestor.'
)

# groups

__auto-public_keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage public keys associated with Attestation
Authorities." _public_keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add)
      __auto-add
      ;;
      (remove)
      __auto-remove
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-attestors ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Google Binary Authorization Attestation
Authorities." _attestors_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (public_keys)
      __auto-public_keys
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _policy_arguments
_policy_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding to a Binary Authorization policy.'
	'export:(BETA) Export the Binary Authorization policy for the current
project.'
	'get_iam_policy:(BETA) Get the IAM policy for a Binary Authorization policy.'
	'import:(BETA) Import a Binary Authorization policy to the current project.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding to a Binary Authorization policy.'
	'set_iam_policy:(BETA) Set the IAM policy for a Binary Authorization policy.'
)

# groups

__auto-policy ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Google Binary Authorization policy." _policy_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (export)
      __auto-export
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (import)
      __auto-import
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}


__auto-binauthz ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage attestations for Binary Authorization on Google Cloud
Platform." _binauthz_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (attestations)
      __auto-attestations
      ;;
      (attestors)
      __auto-attestors
      ;;
      (policy)
      __auto-policy
      ;;
      (create_signature_payload)
      __auto-create_signature_payload
      ;;
    esac
    ;;
	esac
}

local -a _builds_arguments
_builds_arguments=(
	'cancel:(BETA) (DEPRECATED) Cancel an ongoing build.'
	'describe:(BETA) (DEPRECATED) Get information about a particular
build.'
	'list:(BETA) (DEPRECATED) List builds.'
	'log:(BETA) (DEPRECATED) Stream the logs for a build.'
	'submit:(BETA) (DEPRECATED) Submit a build using the Google
Cloud Build service.'
)

# groups

__auto-builds ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) (DEPRECATED) Create and manage builds." _builds_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (log)
      __auto-log
      ;;
      (submit)
      __auto-submit
      ;;
    esac
    ;;
	esac
}

local -a _clusters_arguments
_clusters_arguments=(
	'create:(BETA) Create a cluster for running containers.'
	'delete:(BETA) Delete an existing cluster for running containers.'
	'describe:(BETA) Describe an existing cluster for running containers.'
	'get_credentials:(BETA) Fetch credentials for a running cluster.'
	'list:(BETA) List existing clusters for running containers.'
	'resize:(BETA) Resizes an existing cluster for running containers.'
	'update:(BETA) Update cluster settings for an existing container cluster.'
	'upgrade:(BETA) Upgrade the Kubernetes version of an existing container
cluster.'
)

# groups

__auto-clusters ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Deploy and teardown Google Kubernetes Engine clusters." _clusters_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_credentials)
      __auto-get_credentials
      ;;
      (list)
      __auto-list
      ;;
      (resize)
      __auto-resize
      ;;
      (update)
      __auto-update
      ;;
      (upgrade)
      __auto-upgrade
      ;;
    esac
    ;;
	esac
}

local -a _images_arguments
_images_arguments=(
	'add_tag:(BETA) Adds tags to existing image.'
	'delete:(BETA) Delete existing images.'
	'describe:(BETA) Lists information about the specified image.'
	'list:(BETA) List existing images.'
	'list_tags:(BETA) List tags and digests for the specified image.'
	'untag:(BETA) Remove existing image tags.'
)

# groups

__auto-images ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List and manipulate Google Container Registry images." _images_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_tag)
      __auto-add_tag
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_tags)
      __auto-list_tags
      ;;
      (untag)
      __auto-untag
      ;;
    esac
    ;;
	esac
}

local -a _node_pools_arguments
_node_pools_arguments=(
	'create:(BETA) Create a node pool in a running cluster.'
	'delete:(BETA) Delete an existing node pool in a running cluster.'
	'describe:(BETA) Describe an existing node pool for a cluster.'
	'list:(BETA) List existing node pools for a cluster.'
	'rollback:(BETA) Rollback a node-pool upgrade.'
	'update:(BETA) Updates a node pool in a running cluster.'
)

# groups

__auto-node_pools ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and delete operations for Google Kubernetes Engine
node pools." _node_pools_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (rollback)
      __auto-rollback
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(BETA) Cancel a running operation.'
	'describe:(BETA) Describe an operation.'
	'list:(BETA) List operations for container clusters.'
	'wait:(BETA) Poll an operation for completion.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Get and list operations for Google Kubernetes Engine
clusters." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _subnets_arguments
_subnets_arguments=(
	'list_usable:(BETA) List subnets usable for cluster creation in a specific
project.'
)

# groups

__auto-subnets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage subnets to be used by Google Kubernetes Engine
clusters." _subnets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list_usable)
      __auto-list_usable
      ;;
    esac
    ;;
	esac
}


__auto-container ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Deploy and manage clusters of machines for running
containers." _container_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (binauthz)
      __auto-binauthz
      ;;
      (builds)
      __auto-builds
      ;;
      (clusters)
      __auto-clusters
      ;;
      (images)
      __auto-images
      ;;
      (node_pools)
      __auto-node_pools
      ;;
      (operations)
      __auto-operations
      ;;
      (subnets)
      __auto-subnets
      ;;
      (get_server_config)
      __auto-get_server_config
      ;;
    esac
    ;;
	esac
}

local -a _dataflow_arguments
_dataflow_arguments=(
	'jobs:(BETA) A group of subcommands for working with Dataflow jobs.'
	'logs:(BETA) A group of subcommands for working with Dataflow logs.'
	'metrics:(BETA) A group of subcommands for working with Dataflow metrics.'
)

# groups
local -a _jobs_arguments
_jobs_arguments=(
	'cancel:(BETA) Cancels all jobs that match the command line arguments.'
	'describe:(BETA) Outputs the Job object resulting from the Get API.'
	'drain:(BETA) Drains all jobs that match the command line arguments.'
	'export_steps:(BETA) Exports information about the steps for the given job.'
	'list:(BETA) Lists all jobs in a particular project, optionally filtered
by region.'
	'run:(BETA) Runs a job from the specified path.'
	'show:(BETA) Shows a short description of the given job.'
)

# groups

__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) A group of subcommands for working with Dataflow jobs." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (drain)
      __auto-drain
      ;;
      (export_steps)
      __auto-export_steps
      ;;
      (list)
      __auto-list
      ;;
      (run)
      __auto-run
      ;;
      (show)
      __auto-show
      ;;
    esac
    ;;
	esac
}

local -a _logs_arguments
_logs_arguments=(
	'list:(BETA) Retrieve the job logs for a specific job.'
)

# groups

__auto-logs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) A group of subcommands for working with Dataflow logs." _logs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _metrics_arguments
_metrics_arguments=(
	'list:(BETA) Retrieves the metrics from a specific job.'
)

# groups

__auto-metrics ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) A group of subcommands for working with Dataflow metrics." _metrics_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-dataflow ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Google Cloud Dataflow jobs." _dataflow_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (jobs)
      __auto-jobs
      ;;
      (logs)
      __auto-logs
      ;;
      (metrics)
      __auto-metrics
      ;;
    esac
    ;;
	esac
}

local -a _dataproc_arguments
_dataproc_arguments=(
	'clusters:(BETA) Create and manage Google Cloud Dataproc clusters.'
	'jobs:(BETA) Submit and manage Google Cloud Dataproc jobs.'
	'operations:(BETA) View and manage Google Cloud Dataproc operations.'
	'workflow_templates:(BETA) Create and manage Google Cloud Dataproc workflow templates.'
)

# groups
local -a _clusters_arguments
_clusters_arguments=(
	'create:(BETA) Create a cluster.'
	'create_from_file:(BETA) Create a cluster from a file.'
	'delete:(BETA) Delete a cluster.'
	'describe:(BETA) View the details of a cluster.'
	'diagnose:(BETA) Run a detailed diagnostic on a cluster.'
	'get_iam_policy:(BETA) Get IAM policy for a cluster.'
	'list:(BETA) View a list of clusters in a project.'
	'set_iam_policy:(BETA) Set IAM policy for a cluster.'
	'update:(BETA) Update labels and/or the number of worker nodes in a
cluster.'
)

# groups

__auto-clusters ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Google Cloud Dataproc clusters." _clusters_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (create_from_file)
      __auto-create_from_file
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (diagnose)
      __auto-diagnose
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _jobs_arguments
_jobs_arguments=(
	'submit:(BETA) Submit Google Cloud Dataproc jobs to execute on a cluster.'
	'delete:(BETA) Delete the record of an inactive job.'
	'describe:(BETA) View the details of a job.'
	'get_iam_policy:(BETA) Get IAM policy for a job.'
	'kill:(BETA) Kill an active job.'
	'list:(BETA) List jobs in a project.'
	'set_iam_policy:(BETA) Set IAM policy for a job.'
	'update:(BETA) Update the labels for a job.'
	'wait:(BETA) View the output of a job as it runs or after it completes.'
)

# groups
local -a _submit_arguments
_submit_arguments=(
	'hadoop:(BETA) Submit a Hadoop job to a cluster.'
	'hive:(BETA) Submit a Hive job to a cluster.'
	'pig:(BETA) Submit a Pig job to a cluster.'
	'pyspark:(BETA) Submit a PySpark job to a cluster.'
	'spark:(BETA) Submit a Spark job to a cluster.'
	'spark_sql:(BETA) Submit a Spark SQL job to a cluster.'
)

# groups

__auto-submit ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Submit Google Cloud Dataproc jobs to execute on a cluster." _submit_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (hadoop)
      __auto-hadoop
      ;;
      (hive)
      __auto-hive
      ;;
      (pig)
      __auto-pig
      ;;
      (pyspark)
      __auto-pyspark
      ;;
      (spark)
      __auto-spark
      ;;
      (spark_sql)
      __auto-spark_sql
      ;;
    esac
    ;;
	esac
}


__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Submit and manage Google Cloud Dataproc jobs." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (submit)
      __auto-submit
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (kill)
      __auto-kill
      ;;
      (list)
      __auto-list
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(BETA) Cancel an active operation.'
	'delete:(BETA) Delete the record of an inactive operation.'
	'describe:(BETA) View the details of an operation.'
	'get_iam_policy:(BETA) Get IAM policy for an operation.'
	'list:(BETA) View the list of all operations.'
	'set_iam_policy:(BETA) Set IAM policy for an operation.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View and manage Google Cloud Dataproc operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _workflow_templates_arguments
_workflow_templates_arguments=(
	'add_job:(BETA) Add Google Cloud Dataproc jobs to workflow template.'
	'create:(BETA) Create a workflow template.'
	'delete:(BETA) Delete a workflow template.'
	'describe:(BETA) Describe a workflow template.'
	'export:(BETA) Export a workflow template.'
	'get_iam_policy:(BETA) Get IAM policy for a workflow template.'
	'import:(BETA) Import a workflow template.'
	'instantiate:(BETA) Instantiate a workflow template.'
	'instantiate_from_file:(BETA) Instantiate a workflow template from a file.'
	'list:(BETA) List workflow templates.'
	'remove_job:(BETA) Remove a job from workflow template.'
	'run:(BETA) (DEPRECATED) Run a workflow template.'
	'set_cluster_selector:(BETA) Set cluster selector for the workflow template.'
	'set_iam_policy:(BETA) Set IAM policy for a template.'
	'set_managed_cluster:(BETA) Set a managed cluster for the workflow template.'
)

# groups
local -a _add_job_arguments
_add_job_arguments=(
	'hadoop:(BETA) Add a hadoop job to the workflow template.'
	'hive:(BETA) Add a Hive job to the workflow template.'
	'pig:(BETA) Add a Pig job to the workflow template.'
	'pyspark:(BETA) Add a PySPark job to the workflow template.'
	'spark:(BETA) Add a Spark job to the workflow template.'
	'spark_sql:(BETA) Add a SparkSql job to the workflow template.'
)

# groups

__auto-add_job ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Add Google Cloud Dataproc jobs to workflow template." _add_job_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (hadoop)
      __auto-hadoop
      ;;
      (hive)
      __auto-hive
      ;;
      (pig)
      __auto-pig
      ;;
      (pyspark)
      __auto-pyspark
      ;;
      (spark)
      __auto-spark
      ;;
      (spark_sql)
      __auto-spark_sql
      ;;
    esac
    ;;
	esac
}


__auto-workflow_templates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Google Cloud Dataproc workflow templates." _workflow_templates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_job)
      __auto-add_job
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (export)
      __auto-export
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (import)
      __auto-import
      ;;
      (instantiate)
      __auto-instantiate
      ;;
      (instantiate_from_file)
      __auto-instantiate_from_file
      ;;
      (list)
      __auto-list
      ;;
      (remove_job)
      __auto-remove_job
      ;;
      (run)
      __auto-run
      ;;
      (set_cluster_selector)
      __auto-set_cluster_selector
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (set_managed_cluster)
      __auto-set_managed_cluster
      ;;
    esac
    ;;
	esac
}


__auto-dataproc ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Google Cloud Dataproc clusters and jobs." _dataproc_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clusters)
      __auto-clusters
      ;;
      (jobs)
      __auto-jobs
      ;;
      (operations)
      __auto-operations
      ;;
      (workflow_templates)
      __auto-workflow_templates
      ;;
    esac
    ;;
	esac
}

local -a _datastore_arguments
_datastore_arguments=(
	'indexes:(BETA) Manage Cloud Datastore indexes.'
	'operations:(BETA) Manage Long Running Operations for Cloud Datastore.'
	'export:(BETA) Export Cloud Datastore entities to Google Cloud Storage.'
	'import:(BETA) Import Cloud Datastore entities from Google Cloud Storage.'
)

# groups
local -a _indexes_arguments
_indexes_arguments=(
	'cleanup:(BETA) Remove unused datastore indexes based on your local index
configuration.'
	'create:(BETA) Create new datastore indexes based on your local index
configuration.'
	'describe:(BETA) Show details about an Cloud Datastore index.'
	'list:(BETA) List Cloud Datastore indexes.'
)

# groups

__auto-indexes ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Datastore indexes." _indexes_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cleanup)
      __auto-cleanup
      ;;
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(BETA) Cancel a currently-running Cloud Datastore admin operation.'
	'delete:(BETA) Delete a completed Cloud Datastore admin operation.'
	'describe:(BETA) Retrieves information about a Cloud Datastore admin
operation.'
	'list:(BETA) List pending Cloud Datastore admin operations and their
status.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Long Running Operations for Cloud Datastore." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-datastore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your Cloud Datastore indexes." _datastore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (indexes)
      __auto-indexes
      ;;
      (operations)
      __auto-operations
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
    esac
    ;;
	esac
}

local -a _debug_arguments
_debug_arguments=(
	'logpoints:(BETA) Commands for interacting with Cloud Debugger logpoints.'
	'snapshots:(BETA) Commands for interacting with Cloud Debugger snapshots.'
	'source:(BETA) Commands to manage source information for Stackdriver tools.'
	'targets:(BETA) Commands for interacting with Cloud Debugger debug targets.'
)

# groups
local -a _logpoints_arguments
_logpoints_arguments=(
	'create:(BETA) Create debug logpoints.'
	'delete:(BETA) Delete debug logpoints.'
	'list:(BETA) List debug logpoints.'
)

# groups

__auto-logpoints ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for interacting with Cloud Debugger logpoints." _logpoints_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _snapshots_arguments
_snapshots_arguments=(
	'create:(BETA) Create debug snapshots.'
	'delete:(BETA) Delete debug snapshots.'
	'describe:(BETA) Describe debug snapshots.'
	'list:(BETA) List debug snapshots.'
	'wait:(BETA) Wait for debug snapshots to complete.'
)

# groups

__auto-snapshots ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for interacting with Cloud Debugger snapshots." _snapshots_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _source_arguments
_source_arguments=(
	'gen_repo_info_file:(BETA) Generates repository information files for the Stackdriver
Debugger.'
	'upload:(BETA) Upload a directory tree.'
)

# groups

__auto-source ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands to manage source information for Stackdriver tools." _source_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (gen_repo_info_file)
      __auto-gen_repo_info_file
      ;;
      (upload)
      __auto-upload
      ;;
    esac
    ;;
	esac
}

local -a _targets_arguments
_targets_arguments=(
	'list:(BETA) List debug targets.'
)

# groups

__auto-targets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for interacting with Cloud Debugger debug targets." _targets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-debug ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for interacting with the Cloud Debugger." _debug_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (logpoints)
      __auto-logpoints
      ;;
      (snapshots)
      __auto-snapshots
      ;;
      (source)
      __auto-source
      ;;
      (targets)
      __auto-targets
      ;;
    esac
    ;;
	esac
}

local -a _deployment_manager_arguments
_deployment_manager_arguments=(
	'deployments:(BETA) Commands for Deployment Manager deployments.'
	'manifests:(BETA) Commands for Deployment Manager manifests.'
	'operations:(BETA) Commands for Deployment Manager operations.'
	'resources:(BETA) Commands for Deployment Manager resources.'
	'type_providers:(BETA) Commands for Deployment Manager type providers.'
	'types:(BETA) Commands for Deployment Manager types.'
)

# groups
local -a _deployments_arguments
_deployments_arguments=(
	'cancel_preview:(BETA) Cancel a pending or running deployment preview.'
	'create:(BETA) Create a deployment.'
	'delete:(BETA) Delete a deployment.'
	'describe:(BETA) Provide information about a deployment.'
	'list:(BETA) List deployments in a project.'
	'stop:(BETA) Stop a pending or running deployment update or creation.'
	'update:(BETA) Update a deployment based on a provided config file.'
)

# groups

__auto-deployments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for Deployment Manager deployments." _deployments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel_preview)
      __auto-cancel_preview
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (stop)
      __auto-stop
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _manifests_arguments
_manifests_arguments=(
	'describe:(BETA) Provide information about a manifest.'
	'list:(BETA) List manifests in a deployment.'
)

# groups

__auto-manifests ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for Deployment Manager manifests." _manifests_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Provide information about an operation.'
	'list:(BETA) List operations in a project.'
	'wait:(BETA) Wait for all operations specified to complete before
returning.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for Deployment Manager operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _resources_arguments
_resources_arguments=(
	'describe:(BETA) Provide information about a resource.'
	'list:(BETA) List resources in a deployment.'
)

# groups

__auto-resources ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for Deployment Manager resources." _resources_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _type_providers_arguments
_type_providers_arguments=(
	'create:(BETA) Create a type provider.'
	'delete:(BETA) Delete a type provider.'
	'describe:(BETA) Describe a type provider entry in Type Registry.'
	'list:(BETA) List type providers in a project.'
	'update:(BETA) Update a type provider.'
)

# groups

__auto-type_providers ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for Deployment Manager type providers." _type_providers_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _types_arguments
_types_arguments=(
	'create:(BETA) Create a type.'
	'delete:(BETA) Delete a composite type.'
	'describe:(BETA) Describe a type.'
	'list:(BETA) Describe a type provider type.'
	'update:(BETA) Update a composite type.'
)

# groups

__auto-types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for Deployment Manager types." _types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-deployment_manager ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage deployments of cloud resources." _deployment_manager_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (deployments)
      __auto-deployments
      ;;
      (manifests)
      __auto-manifests
      ;;
      (operations)
      __auto-operations
      ;;
      (resources)
      __auto-resources
      ;;
      (type_providers)
      __auto-type_providers
      ;;
      (types)
      __auto-types
      ;;
    esac
    ;;
	esac
}

local -a _dns_arguments
_dns_arguments=(
	'dns_keys:(BETA) Manage Cloud DNS DNSKEY records.'
	'managed_zones:(BETA) Manage your Cloud DNS managed-zones.'
	'operations:(BETA) Manage your Cloud DNS operations.'
	'project_info:(BETA) View Cloud DNS related information for a project.'
	'record_sets:(BETA) Manage the record-sets within your managed-zones.'
)

# groups
local -a _dns_keys_arguments
_dns_keys_arguments=(
	'describe:(BETA) Show details about a DNS key resource.'
	'list:(BETA) List DNS key resources.'
)

# groups

__auto-dns_keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud DNS DNSKEY records." _dns_keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _managed_zones_arguments
_managed_zones_arguments=(
	'create:(BETA) Create a Cloud DNS managed-zone.'
	'delete:(BETA) Delete an empty Cloud DNS managed-zone.'
	'describe:(BETA) View the details of a Cloud DNS managed-zone.'
	'list:(BETA) View the list of all your managed-zones.'
	'update:(BETA) Update an existing Cloud DNS managed-zone.'
)

# groups

__auto-managed_zones ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your Cloud DNS managed-zones." _managed_zones_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Describe an operation.'
	'list:(BETA) List Cloud DNS operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your Cloud DNS operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _project_info_arguments
_project_info_arguments=(
	'describe:(BETA) View Cloud DNS related information for a project.'
)

# groups

__auto-project_info ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View Cloud DNS related information for a project." _project_info_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
    esac
    ;;
	esac
}

local -a _record_sets_arguments
_record_sets_arguments=(
	'changes:(BETA) View details about changes to your Cloud DNS record-sets.'
	'transaction:(BETA) Make scriptable and transactional changes to your
record-sets.'
	'export:(BETA) Export your record-sets into a file.'
	'import:(BETA) Import record-sets into your managed-zone.'
	'list:(BETA) View the list of record-sets in a managed-zone.'
)

# groups
local -a _changes_arguments
_changes_arguments=(
	'describe:(BETA) View the details of a change.'
	'list:(BETA) View the list of changes that have been made to your
record-sets.'
)

# groups

__auto-changes ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View details about changes to your Cloud DNS record-sets." _changes_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _transaction_arguments
_transaction_arguments=(
	'abort:(BETA) Abort transaction.'
	'add:(BETA) Append a record-set addition to the transaction.'
	'describe:(BETA) Describe the transaction.'
	'execute:(BETA) Execute the transaction on Cloud DNS.'
	'remove:(BETA) Append a record-set deletion to the transaction.'
	'start:(BETA) Start a transaction.'
)

# groups

__auto-transaction ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Make scriptable and transactional changes to your
record-sets." _transaction_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (abort)
      __auto-abort
      ;;
      (add)
      __auto-add
      ;;
      (describe)
      __auto-describe
      ;;
      (execute)
      __auto-execute
      ;;
      (remove)
      __auto-remove
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}


__auto-record_sets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage the record-sets within your managed-zones." _record_sets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (changes)
      __auto-changes
      ;;
      (transaction)
      __auto-transaction
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-dns ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your Cloud DNS managed-zones and record-sets." _dns_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (dns_keys)
      __auto-dns_keys
      ;;
      (managed_zones)
      __auto-managed_zones
      ;;
      (operations)
      __auto-operations
      ;;
      (project_info)
      __auto-project_info
      ;;
      (record_sets)
      __auto-record_sets
      ;;
    esac
    ;;
	esac
}

local -a _domains_arguments
_domains_arguments=(
	'list_user_verified:(BETA) Lists the user&#39;s verified domains.'
	'verify:(BETA) Verifies a domain via an in-browser workflow.'
)

# groups

__auto-domains ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage domains for your Google Cloud projects." _domains_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list_user_verified)
      __auto-list_user_verified
      ;;
      (verify)
      __auto-verify
      ;;
    esac
    ;;
	esac
}

local -a _emulators_arguments
_emulators_arguments=(
	'bigtable:(BETA) Manage your local Bigtable emulator.'
	'datastore:(BETA) Manage your local datastore emulator.'
	'pubsub:(BETA) Manage your local pubsub emulator.'
)

# groups
local -a _bigtable_arguments
_bigtable_arguments=(
	'env_init:(BETA) Print the commands required to export Bigtable emulator&#39;s
env variables.'
	'start:(BETA) Start a local Bigtable emulator.'
)

# groups

__auto-bigtable ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your local Bigtable emulator." _bigtable_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (env_init)
      __auto-env_init
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}

local -a _datastore_arguments
_datastore_arguments=(
	'env_init:(BETA) Print the commands required to export env variables of a
datastore.'
	'env_unset:(BETA) Print the commands required to unset a datastore emulators
env variables.'
	'start:(BETA) Start a local datastore emulator.'
)

# groups

__auto-datastore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your local datastore emulator." _datastore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (env_init)
      __auto-env_init
      ;;
      (env_unset)
      __auto-env_unset
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}

local -a _pubsub_arguments
_pubsub_arguments=(
	'env_init:(BETA) Print the commands required to export pubsub emulator&#39;s env
variables.'
	'start:(BETA) Start a local pubsub emulator.'
)

# groups

__auto-pubsub ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your local pubsub emulator." _pubsub_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (env_init)
      __auto-env_init
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}


__auto-emulators ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Set up your local development environment using emulators." _emulators_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (bigtable)
      __auto-bigtable
      ;;
      (datastore)
      __auto-datastore
      ;;
      (pubsub)
      __auto-pubsub
      ;;
    esac
    ;;
	esac
}

local -a _endpoints_arguments
_endpoints_arguments=(
	'configs:(BETA) View configurations for various services.'
	'operations:(BETA) Manage Operation for various services.'
	'services:(BETA) Manage Services.'
)

# groups
local -a _configs_arguments
_configs_arguments=(
	'describe:(BETA) Describes the configuration for a given version of a
service.'
	'list:(BETA) Lists the configurations for a given service.'
)

# groups

__auto-configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View configurations for various services." _configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Describes an operation resource for a given operation name.'
	'list:(BETA) List operations for a project.'
	'wait:(BETA) Waits for an operation to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Operation for various services." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _services_arguments
_services_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding for a service.'
	'check_iam_policy:(BETA) Returns information about a member&#39;s permissions on a
service.'
	'delete:(BETA) Deletes a service from Google Service Management.'
	'deploy:(BETA) Deploys a service configuration for the given service name.'
	'describe:(BETA) Describes a service given a service name.'
	'get_iam_policy:(BETA) Describes the IAM policy for a service.'
	'list:(BETA) List services for a project.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for a service.'
	'undelete:(BETA) Undeletes a service configuration that was previously
deleted.'
)

# groups

__auto-services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Services." _services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (check_iam_policy)
      __auto-check_iam_policy
      ;;
      (delete)
      __auto-delete
      ;;
      (deploy)
      __auto-deploy
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (undelete)
      __auto-undelete
      ;;
    esac
    ;;
	esac
}


__auto-endpoints ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create, enable and manage API services." _endpoints_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configs)
      __auto-configs
      ;;
      (operations)
      __auto-operations
      ;;
      (services)
      __auto-services
      ;;
    esac
    ;;
	esac
}

local -a _error_reporting_arguments
_error_reporting_arguments=(
	'events:(BETA) Manages your project&#39;s events data.'
)

# groups
local -a _events_arguments
_events_arguments=(
	'delete:(BETA) Deletes all error events of the project.'
	'report:(BETA) Report an error.'
)

# groups

__auto-events ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manages your project&#39;s events data." _events_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (report)
      __auto-report
      ;;
    esac
    ;;
	esac
}


__auto-error_reporting ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Stackdriver Error Reporting." _error_reporting_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (events)
      __auto-events
      ;;
    esac
    ;;
	esac
}

local -a _filestore_arguments
_filestore_arguments=(
	'instances:(BETA) Manage Cloud Filestore instances.'
	'locations:(BETA) List locations where Cloud Filestore is available.'
	'operations:(BETA) Read and manipulate Cloud Filestore operations.'
)

# groups
local -a _instances_arguments
_instances_arguments=(
	'create:(BETA) Create a Cloud Filestore instance.'
	'delete:(BETA) Delete a Cloud Filestore instance.'
	'describe:(BETA) Show metadata for a Cloud Filestore instance.'
	'list:(BETA) List all Cloud Filestore instances.'
	'update:(BETA) Update a Cloud Filestore instance.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Filestore instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'describe:(BETA) Describe a Cloud Filestore location.'
	'list:(BETA) List all Cloud Filestore locations.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List locations where Cloud Filestore is available." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Describe a Cloud Filestore operation.'
	'list:(BETA) List all Cloud Filestore operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Read and manipulate Cloud Filestore operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-filestore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manipulate Cloud Filestore resources." _filestore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (instances)
      __auto-instances
      ;;
      (locations)
      __auto-locations
      ;;
      (operations)
      __auto-operations
      ;;
    esac
    ;;
	esac
}

local -a _firebase_arguments
_firebase_arguments=(
	'test:(BETA) Interact with Firebase Test Lab.'
)

# groups
local -a _test_arguments
_test_arguments=(
	'android:(BETA) Command group for Android application testing.'
	'ios:(BETA) Command group for iOS application testing.'
	'network_profiles:(BETA) Explore network profiles available for testing.'
)

# groups
local -a _android_arguments
_android_arguments=(
	'locales:(BETA) Explore Android locales available for testing.'
	'models:(BETA) Explore Android models available in the Test Environment
catalog.'
	'versions:(BETA) Explore Android versions available for testing.'
	'run:(BETA) Invoke a test in Firebase Test Lab for Android and view test
results.'
)

# groups
local -a _locales_arguments
_locales_arguments=(
	'describe:(BETA) Describe an Android locale.'
	'list:(BETA) List all Android locales available for testing
internationalized apps.'
)

# groups

__auto-locales ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Explore Android locales available for testing." _locales_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _models_arguments
_models_arguments=(
	'describe:(BETA) Describe an Android model.'
	'list:(BETA) List all Android models available for testing.'
)

# groups

__auto-models ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Explore Android models available in the Test Environment
catalog." _models_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'describe:(BETA) Describe an Android OS version.'
	'list:(BETA) List all Android OS versions available for testing.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Explore Android versions available for testing." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-android ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Command group for Android application testing." _android_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (locales)
      __auto-locales
      ;;
      (models)
      __auto-models
      ;;
      (versions)
      __auto-versions
      ;;
      (run)
      __auto-run
      ;;
    esac
    ;;
	esac
}

local -a _ios_arguments
_ios_arguments=(
	'models:(BETA) Explore iOS models available in the Test Environment
catalog.'
	'versions:(BETA) Explore iOS versions available for testing.'
)

# groups
local -a _models_arguments
_models_arguments=(
	'describe:(BETA) Describe an iOS model.'
	'list:(BETA) List all iOS models available for testing.'
)

# groups

__auto-models ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Explore iOS models available in the Test Environment
catalog." _models_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'describe:(BETA) Describe an iOS operating system version.'
	'list:(BETA) List all iOS versions available for testing.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Explore iOS versions available for testing." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-ios ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Command group for iOS application testing." _ios_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (models)
      __auto-models
      ;;
      (versions)
      __auto-versions
      ;;
    esac
    ;;
	esac
}

local -a _network_profiles_arguments
_network_profiles_arguments=(
	'describe:(BETA) Describe a network profile.'
	'list:(BETA) List all network profiles available for testing.'
)

# groups

__auto-network_profiles ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Explore network profiles available for testing." _network_profiles_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-test ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Interact with Firebase Test Lab." _test_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (android)
      __auto-android
      ;;
      (ios)
      __auto-ios
      ;;
      (network_profiles)
      __auto-network_profiles
      ;;
    esac
    ;;
	esac
}


__auto-firebase ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Work with Google Firebase." _firebase_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (test)
      __auto-test
      ;;
    esac
    ;;
	esac
}

local -a _firestore_arguments
_firestore_arguments=(
	'operations:(BETA) Manage Long Running Operations for Cloud Firestore.'
	'export:(BETA) export Cloud Firestore documents to Google Cloud Storage.'
	'import:(BETA) import Cloud Firestore documents from Google Cloud Storage.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'cancel:(BETA) Cancel a currently-running Cloud Firestore admin operation.'
	'delete:(BETA) Delete a completed Cloud Firestore admin operation.'
	'describe:(BETA) Retrieves information about a Cloud Firestore admin
operation.'
	'list:(BETA) List pending Cloud Firestore admin operations and their
status.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Long Running Operations for Cloud Firestore." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-firestore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage your Cloud Firestore imports and exports." _firestore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
    esac
    ;;
	esac
}

local -a _functions_arguments
_functions_arguments=(
	'event_types:(BETA) List types of events that can be a trigger for a Google
Cloud Function.'
	'logs:(BETA) Display log entries produced by Google Cloud Functions.'
	'regions:(BETA) List regions available to Google Cloud Functions.'
	'call:(BETA) Trigger execution of a Google Cloud Function.'
	'delete:(BETA) Delete a Google Cloud Function.'
	'deploy:(BETA) Create or update a Google Cloud Function.'
	'describe:(BETA) Display details of a Google Cloud Function.'
	'list:(BETA) List Google Cloud Functions.'
)

# groups
local -a _event_types_arguments
_event_types_arguments=(
	'list:(BETA) List types of events that can be a trigger for a Google
Cloud Function.'
)

# groups

__auto-event_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List types of events that can be a trigger for a Google
Cloud Function." _event_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _logs_arguments
_logs_arguments=(
	'read:(BETA) Display log entries produced by Google Cloud Functions.'
)

# groups

__auto-logs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Display log entries produced by Google Cloud Functions." _logs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (read)
      __auto-read
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'list:(BETA) List regions available to Google Cloud Functions.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List regions available to Google Cloud Functions." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-functions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Google Cloud Functions." _functions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (event_types)
      __auto-event_types
      ;;
      (logs)
      __auto-logs
      ;;
      (regions)
      __auto-regions
      ;;
      (call)
      __auto-call
      ;;
      (delete)
      __auto-delete
      ;;
      (deploy)
      __auto-deploy
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _iam_arguments
_iam_arguments=(
	'roles:(BETA) Create and manipulate roles.'
	'service_accounts:(BETA) Create and manipulate service accounts.'
	'list_grantable_roles:(BETA) List IAM grantable roles for a resource.'
	'list_testable_permissions:(BETA) List IAM testable permissions for a resource.'
)

# groups
local -a _roles_arguments
_roles_arguments=(
	'copy:(BETA) Create a role from an existing role.'
	'create:(BETA) Create a custom role for a project or an organization.'
	'delete:(BETA) Delete a custom role from an organization or a project.'
	'describe:(BETA) Show metadata for a role.'
	'list:(BETA) List the roles defined at a parent organization or a
project.'
	'undelete:(BETA) Undelete a custom role from an organization or a project.'
	'update:(BETA) Update an IAM custom role.'
)

# groups

__auto-roles ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manipulate roles." _roles_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (copy)
      __auto-copy
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (undelete)
      __auto-undelete
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _service_accounts_arguments
_service_accounts_arguments=(
	'keys:(BETA) Manage service account keys.'
	'add_iam_policy_binding:(BETA) Add IAM policy binding for a service account.'
	'create:(BETA) Create a service account for a project.'
	'delete:(BETA) Delete a service account from a project.'
	'describe:(BETA) Show metadata for a service account from a project.'
	'get_iam_policy:(BETA) Get the IAM policy for a service account.'
	'list:(BETA) List all of a project&#39;s service accounts.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for a service account.'
	'set_iam_policy:(BETA) Set IAM policy for a service account.'
	'sign_blob:(BETA) Sign a blob with a managed service account key.'
	'sign_jwt:(BETA) Sign a JWT with a managed service account key.'
	'update:(BETA) Update an IAM service account.'
)

# groups
local -a _keys_arguments
_keys_arguments=(
	'create:(BETA) Create a private key for a service account.'
	'delete:(BETA) Delete a user-managed key from a service account.'
	'get_public_key:(BETA) Get the public key for a service account key pair.'
	'list:(BETA) List the keys for a service account.'
)

# groups

__auto-keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage service account keys." _keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (get_public_key)
      __auto-get_public_key
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-service_accounts ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manipulate service accounts." _service_accounts_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (keys)
      __auto-keys
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (sign_blob)
      __auto-sign_blob
      ;;
      (sign_jwt)
      __auto-sign_jwt
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-iam ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage IAM service accounts and keys." _iam_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (roles)
      __auto-roles
      ;;
      (service_accounts)
      __auto-service_accounts
      ;;
      (list_grantable_roles)
      __auto-list_grantable_roles
      ;;
      (list_testable_permissions)
      __auto-list_testable_permissions
      ;;
    esac
    ;;
	esac
}

local -a _iot_arguments
_iot_arguments=(
	'devices:(BETA) Manage Cloud IoT Devices.'
	'registries:(BETA) Manage Cloud IoT Registries.'
)

# groups
local -a _devices_arguments
_devices_arguments=(
	'configs:(BETA) Manage configurations for Cloud IoT devices.'
	'credentials:(BETA) Manage credentials for Cloud IoT devices.'
	'states:(BETA) Manage states for Cloud IoT devices.'
	'create:(BETA) Create a new device.'
	'delete:(BETA) Delete a device.'
	'describe:(BETA) Show details about a device.'
	'list:(BETA) List devices.'
	'update:(BETA) Update an existing device.'
)

# groups
local -a _configs_arguments
_configs_arguments=(
	'describe:(BETA) Show details about the latest configuration for a device.'
	'get_value:(BETA) Show the binary data of a device&#39;s latest configuration.'
	'list:(BETA) List configs for a device.'
	'update:(BETA) Update a specific device configuration.'
)

# groups

__auto-configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage configurations for Cloud IoT devices." _configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (get_value)
      __auto-get_value
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _credentials_arguments
_credentials_arguments=(
	'clear:(BETA) Delete all credentials from a device.'
	'create:(BETA) Add a new credential to a device.'
	'delete:(BETA) Delete a credential from a device.'
	'describe:(BETA) Show details about a specific device credential.'
	'list:(BETA) List credentials for a device.'
	'update:(BETA) Update a specific device credential.'
)

# groups

__auto-credentials ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage credentials for Cloud IoT devices." _credentials_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clear)
      __auto-clear
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _states_arguments
_states_arguments=(
	'list:(BETA) List states for a device.'
)

# groups

__auto-states ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage states for Cloud IoT devices." _states_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-devices ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud IoT Devices." _devices_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configs)
      __auto-configs
      ;;
      (credentials)
      __auto-credentials
      ;;
      (states)
      __auto-states
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _registries_arguments
_registries_arguments=(
	'credentials:(BETA) Manage credentials for Cloud IoT devices.'
	'add_iam_policy_binding:(BETA) add an IAM policy binding to a device registry.'
	'create:(BETA) Create a new device registry.'
	'delete:(BETA) Delete a device registry.'
	'describe:(BETA) Show details about a device registry.'
	'get_iam_policy:(BETA) Get the IAM policy for a device registry.'
	'list:(BETA) List device registries.'
	'remove_iam_policy_binding:(BETA) Remove an IAM policy binding from a device registry.'
	'set_iam_policy:(BETA) Set IAM policy for a device registry.'
	'update:(BETA) Update a device registry.'
)

# groups
local -a _credentials_arguments
_credentials_arguments=(
	'clear:(BETA) Delete all credentials from a registry.'
	'create:(BETA) Add a new credential to a registry.'
	'delete:(BETA) Delete a credential from a registry.'
	'describe:(BETA) Show details about a specific registry credential.'
	'list:(BETA) List credentials for a registry.'
)

# groups

__auto-credentials ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage credentials for Cloud IoT devices." _credentials_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clear)
      __auto-clear
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-registries ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud IoT Registries." _registries_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (credentials)
      __auto-credentials
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-iot ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud IoT resources." _iot_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (devices)
      __auto-devices
      ;;
      (registries)
      __auto-registries
      ;;
    esac
    ;;
	esac
}

local -a _kms_arguments
_kms_arguments=(
	'keyrings:(BETA) Create and manage keyrings.'
	'keys:(BETA) Create and manage keys.'
	'locations:(BETA) View locations available for a project.'
	'decrypt:(BETA) Decrypt a ciphertext file using a Cloud KMS key.'
	'encrypt:(BETA) Encrypt a plaintext file using a key.'
)

# groups
local -a _keyrings_arguments
_keyrings_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding to a keyring.'
	'create:(BETA) Create a new keyring.'
	'describe:(BETA) Get metadata for a keyring.'
	'get_iam_policy:(BETA) Get the IAM policy for a keyring.'
	'list:(BETA) List keyrings within a location.'
	'remove_iam_policy_binding:(BETA) Remove a policy binding from a keyring.'
	'set_iam_policy:(BETA) Set the IAM policy for a keyring.'
)

# groups

__auto-keyrings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage keyrings." _keyrings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _keys_arguments
_keys_arguments=(
	'versions:(BETA) Create and manage versions.'
	'add_iam_policy_binding:(BETA) Add IAM policy binding to a key.'
	'create:(BETA) Create a new key.'
	'describe:(BETA) Get metadata for a given key.'
	'get_iam_policy:(BETA) Get the IAM policy for a key.'
	'list:(BETA) List the keys within a keyring.'
	'remove_iam_policy_binding:(BETA) Remove an IAM policy binding from a key.'
	'remove_rotation_schedule:(BETA) Remove the rotation schedule for a key.'
	'set_iam_policy:(BETA) Set the IAM policy for a key.'
	'set_primary_version:(BETA) Set the primary version of a key.'
	'set_rotation_schedule:(BETA) Update the rotation schedule for a key.'
	'update:(BETA) Update a key.'
)

# groups
local -a _versions_arguments
_versions_arguments=(
	'create:(BETA) Create a new version.'
	'describe:(BETA) Get metadata for a given version.'
	'destroy:(BETA) Schedule a version to be destroyed.'
	'disable:(BETA) Disable a given version.'
	'enable:(BETA) Enable a given version.'
	'list:(BETA) List the versions within a key.'
	'restore:(BETA) Restore a version scheduled for destruction.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage versions." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (destroy)
      __auto-destroy
      ;;
      (disable)
      __auto-disable
      ;;
      (enable)
      __auto-enable
      ;;
      (list)
      __auto-list
      ;;
      (restore)
      __auto-restore
      ;;
    esac
    ;;
	esac
}


__auto-keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage keys." _keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (versions)
      __auto-versions
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_rotation_schedule)
      __auto-remove_rotation_schedule
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (set_primary_version)
      __auto-set_primary_version
      ;;
      (set_rotation_schedule)
      __auto-set_rotation_schedule
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'list:(BETA) List the project&#39;s locations.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) View locations available for a project." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-kms ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage cryptographic keys in the cloud." _kms_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (keyrings)
      __auto-keyrings
      ;;
      (keys)
      __auto-keys
      ;;
      (locations)
      __auto-locations
      ;;
      (decrypt)
      __auto-decrypt
      ;;
      (encrypt)
      __auto-encrypt
      ;;
    esac
    ;;
	esac
}

local -a _logging_arguments
_logging_arguments=(
	'logs:(BETA) Manages your project&#39;s logs.'
	'metrics:(BETA) Manages logs-based metrics.'
	'resource_descriptors:(BETA) Get information about resource descriptors.'
	'sinks:(BETA) Manages sinks used to export logs.'
	'read:(BETA) Read log entries.'
	'write:(BETA) Write a log entry.'
)

# groups
local -a _logs_arguments
_logs_arguments=(
	'delete:(BETA) Deletes all entries from a log.'
	'list:(BETA) Lists your project&#39;s logs.'
)

# groups

__auto-logs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manages your project&#39;s logs." _logs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _metrics_arguments
_metrics_arguments=(
	'create:(BETA) Creates a logs-based metric.'
	'delete:(BETA) Deletes a logs-based metric.'
	'describe:(BETA) Shows the definition of a logs-based metric.'
	'list:(BETA) Displays all logs-based metrics.'
	'update:(BETA) Updates the definition of a logs-based metric.'
)

# groups

__auto-metrics ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manages logs-based metrics." _metrics_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _resource_descriptors_arguments
_resource_descriptors_arguments=(
	'list:(BETA) Lists all available resource descriptors.'
)

# groups

__auto-resource_descriptors ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Get information about resource descriptors." _resource_descriptors_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _sinks_arguments
_sinks_arguments=(
	'create:(BETA) Creates a sink.'
	'delete:(BETA) Deletes a sink.'
	'describe:(BETA) Displays information about a sink.'
	'list:(BETA) Lists the defined sinks.'
	'update:(BETA) Updates a sink.'
)

# groups

__auto-sinks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manages sinks used to export logs." _sinks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-logging ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Stackdriver Logging." _logging_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (logs)
      __auto-logs
      ;;
      (metrics)
      __auto-metrics
      ;;
      (resource_descriptors)
      __auto-resource_descriptors
      ;;
      (sinks)
      __auto-sinks
      ;;
      (read)
      __auto-read
      ;;
      (write)
      __auto-write
      ;;
    esac
    ;;
	esac
}

local -a _ml_arguments
_ml_arguments=(
	'language:(BETA) Use the Google Cloud Natural Language API to analyze text.'
	'speech:(BETA) Use Google Cloud Speech to get transcripts of audio.'
	'video:(BETA) Cloud ML Video-Intelligence command groups.'
	'vision:(BETA) Use Google Cloud Vision to analyze images.'
)

# groups
local -a _language_arguments
_language_arguments=(
	'analyze_entities:(BETA) Use Google Cloud Natural Language API to identify entities
in text.'
	'analyze_entity_sentiment:(BETA) Use Google Cloud Natural Language API to identify
entity-level sentiment.'
	'analyze_sentiment:(BETA) Use Google Cloud Natural Language API to identify sentiments
in a text.'
	'analyze_syntax:(BETA) Use Google Cloud Natural Language API to identify linguistic
information.'
	'classify_text:(BETA) Classifies input document into categories.'
)

# groups

__auto-language ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Use the Google Cloud Natural Language API to analyze text." _language_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (analyze_entities)
      __auto-analyze_entities
      ;;
      (analyze_entity_sentiment)
      __auto-analyze_entity_sentiment
      ;;
      (analyze_sentiment)
      __auto-analyze_sentiment
      ;;
      (analyze_syntax)
      __auto-analyze_syntax
      ;;
      (classify_text)
      __auto-classify_text
      ;;
    esac
    ;;
	esac
}

local -a _speech_arguments
_speech_arguments=(
	'operations:(BETA) Interact with Google Cloud Speech operations.'
	'recognize:(BETA) Get transcripts of short (less than 60 seconds) audio from
an audio file.'
	'recognize_long_running:(BETA) Get transcripts of longer audio from an audio file.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Get description of a long-running speech recognition
operation.'
	'wait:(BETA) Poll long-running speech recognition operation until it
completes.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Interact with Google Cloud Speech operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-speech ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Use Google Cloud Speech to get transcripts of audio." _speech_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (recognize)
      __auto-recognize
      ;;
      (recognize_long_running)
      __auto-recognize_long_running
      ;;
    esac
    ;;
	esac
}

local -a _video_arguments
_video_arguments=(
	'operations:(BETA) Command group for working with Cloud Video Intelligence
operations.'
	'detect_explicit_content:(BETA) Detect explicit content in videos.'
	'detect_labels:(BETA) Detect general labels for videos.'
	'detect_shot_changes:(BETA) Detect shot changes in videos.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Get description of a long-running video analysis operation.'
	'wait:(BETA) Poll long-running video analysis operation until it
completes.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Command group for working with Cloud Video Intelligence
operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-video ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Cloud ML Video-Intelligence command groups." _video_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (detect_explicit_content)
      __auto-detect_explicit_content
      ;;
      (detect_labels)
      __auto-detect_labels
      ;;
      (detect_shot_changes)
      __auto-detect_shot_changes
      ;;
    esac
    ;;
	esac
}

local -a _vision_arguments
_vision_arguments=(
	'detect_document:(BETA) Detect dense text in an image.'
	'detect_faces:(BETA) Detect faces within an image.'
	'detect_image_properties:(BETA) Detect general attributes of an image.'
	'detect_labels:(BETA) Detect broad sets of categories within an image.'
	'detect_landmarks:(BETA) Detect popular natural and man-made structures within an
image.'
	'detect_logos:(BETA) Detect popular product logos within an image.'
	'detect_safe_search:(BETA) Detect explicit content in an image.'
	'detect_text:(BETA) Detect and extract text within an image.'
	'detect_web:(BETA) Detect entities in an image from similar images on the web.'
	'suggest_crop:(BETA) Suggest a bounding box in an image.'
)

# groups

__auto-vision ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Use Google Cloud Vision to analyze images." _vision_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (detect_document)
      __auto-detect_document
      ;;
      (detect_faces)
      __auto-detect_faces
      ;;
      (detect_image_properties)
      __auto-detect_image_properties
      ;;
      (detect_labels)
      __auto-detect_labels
      ;;
      (detect_landmarks)
      __auto-detect_landmarks
      ;;
      (detect_logos)
      __auto-detect_logos
      ;;
      (detect_safe_search)
      __auto-detect_safe_search
      ;;
      (detect_text)
      __auto-detect_text
      ;;
      (detect_web)
      __auto-detect_web
      ;;
      (suggest_crop)
      __auto-suggest_crop
      ;;
    esac
    ;;
	esac
}


__auto-ml ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Use Google Cloud machine learning capabilities." _ml_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (language)
      __auto-language
      ;;
      (speech)
      __auto-speech
      ;;
      (video)
      __auto-video
      ;;
      (vision)
      __auto-vision
      ;;
    esac
    ;;
	esac
}

local -a _ml_engine_arguments
_ml_engine_arguments=(
	'jobs:(BETA) Cloud ML Engine Jobs commands.'
	'local:(BETA) Cloud ML Engine Local commands.'
	'models:(BETA) Cloud ML Engine Models commands.'
	'operations:(BETA) Manage Cloud ML Engine operations.'
	'versions:(BETA) Cloud ML Engine Versions commands.'
	'predict:(BETA) Run Cloud ML Engine online prediction.'
)

# groups
local -a _jobs_arguments
_jobs_arguments=(
	'submit:(BETA) Cloud ML Engine Jobs submit commands.'
	'cancel:(BETA) Cancel a running Cloud ML Engine job.'
	'describe:(BETA) Describe a Cloud ML Engine job.'
	'list:(BETA) List existing Cloud ML Engine jobs.'
	'stream_logs:(BETA) Show logs from a running Cloud ML Engine job.'
	'update:(BETA) Update a Cloud ML Engine jobs.'
)

# groups
local -a _submit_arguments
_submit_arguments=(
	'prediction:(BETA) Start a Cloud ML Engine batch prediction job.'
	'training:(BETA) Submit a Cloud Machine Learning training job.'
)

# groups

__auto-submit ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Cloud ML Engine Jobs submit commands." _submit_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (prediction)
      __auto-prediction
      ;;
      (training)
      __auto-training
      ;;
    esac
    ;;
	esac
}


__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Cloud ML Engine Jobs commands." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (submit)
      __auto-submit
      ;;
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (stream_logs)
      __auto-stream_logs
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _local_arguments
_local_arguments=(
	'predict:(BETA) Run prediction locally.'
	'train:(BETA) Run a Cloud ML Engine training job locally.'
)

# groups

__auto-local ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Cloud ML Engine Local commands." _local_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (predict)
      __auto-predict
      ;;
      (train)
      __auto-train
      ;;
    esac
    ;;
	esac
}

local -a _models_arguments
_models_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding to a model.'
	'create:(BETA) Create a new Cloud ML Engine model.'
	'delete:(BETA) Delete an existing Cloud ML Engine model.'
	'describe:(BETA) Describe an existing Cloud ML Engine model.'
	'get_iam_policy:(BETA) Get the IAM policy for a model.'
	'list:(BETA) List existing Cloud ML Engine models.'
	'remove_iam_policy_binding:(BETA) Remove a policy binding from a model.'
	'set_iam_policy:(BETA) Set the IAM policy for a model.'
	'update:(BETA) Update an existing Cloud ML Engine model.'
)

# groups

__auto-models ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Cloud ML Engine Models commands." _models_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(BETA) Cancel a Cloud ML Engine operation.'
	'delete:(BETA) Delete a Cloud ML Engine operation.'
	'describe:(BETA) Describe a Cloud ML Engine operation.'
	'list:(BETA) List existing Cloud ML Engine jobs.'
	'wait:(BETA) Wait for a Cloud ML Engine operation to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud ML Engine operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'create:(BETA) Create a new Cloud ML Engine version.'
	'delete:(BETA) Delete an existing Cloud ML Engine version.'
	'describe:(BETA) Describe an existing Cloud ML Engine version.'
	'list:(BETA) List existing Cloud ML Engine versions.'
	'set_default:(BETA) Sets an existing Cloud ML Engine version as the default for
its model.'
	'update:(BETA) Update a Cloud ML Engine version.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Cloud ML Engine Versions commands." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (set_default)
      __auto-set_default
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-ml_engine ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud ML Engine jobs and models." _ml_engine_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (jobs)
      __auto-jobs
      ;;
      (local)
      __auto-local
      ;;
      (models)
      __auto-models
      ;;
      (operations)
      __auto-operations
      ;;
      (versions)
      __auto-versions
      ;;
      (predict)
      __auto-predict
      ;;
    esac
    ;;
	esac
}

local -a _organizations_arguments
_organizations_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding for a organization.'
	'describe:(BETA) Show metadata for an organization.'
	'get_iam_policy:(BETA) Get IAM policy for an organization.'
	'list:(BETA) List organizations accessible by the active account.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for a organization.'
	'set_iam_policy:(BETA) Set IAM policy for an organization.'
)

# groups

__auto-organizations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Google Cloud Platform Organizations." _organizations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _projects_arguments
_projects_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding for a project.'
	'delete:(BETA) Delete a project.'
	'describe:(BETA) Show metadata for a project.'
	'get_iam_policy:(BETA) Get IAM policy for a project.'
	'list:(BETA) List projects accessible by the active account.'
	'move:(BETA) Move a project into an organization.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for a project.'
	'set_iam_policy:(BETA) Set IAM policy for a project.'
	'undelete:(BETA) Undelete a project.'
	'update:(BETA) Update the name of a project.'
)

# groups

__auto-projects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage project access policies." _projects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (move)
      __auto-move
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (undelete)
      __auto-undelete
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _pubsub_arguments
_pubsub_arguments=(
	'snapshots:(BETA) Manage Cloud Pub/Sub snapshots.'
	'subscriptions:(BETA) Manage Cloud Pubsub subscriptions.'
	'topics:(BETA) Manage Cloud Pubsub topics.'
)

# groups
local -a _snapshots_arguments
_snapshots_arguments=(
	'create:(BETA) Creates one or more Cloud Pub/Sub snapshots.'
	'delete:(BETA) Deletes one or more Cloud Pub/Sub snapshots.'
	'describe:(BETA) Describes a Cloud Pub/Sub snapshot.'
	'list:(BETA) Lists all the snapshots in a given project.'
)

# groups

__auto-snapshots ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Pub/Sub snapshots." _snapshots_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _subscriptions_arguments
_subscriptions_arguments=(
	'ack:(BETA) Acknowledges one or more messages on the specified
subscription.'
	'add_iam_policy_binding:(BETA) Add IAM policy binding for a subscription.'
	'create:(BETA) Creates one or more Cloud Pub/Sub subscriptions.'
	'delete:(BETA) Deletes one or more Cloud Pub/Sub subscriptions.'
	'describe:(BETA) Describes a Cloud Pub/Sub subscription.'
	'get_iam_policy:(BETA) Get the IAM policy for a Cloud Pub/Sub Subscription.'
	'list:(BETA) Lists Cloud Pub/Sub subscriptions.'
	'modify_ack_deadline:(BETA) (DEPRECATED) Modifies the ACK deadline for a
specific Cloud Pub/Sub message.'
	'modify_message_ack_deadline:(BETA) Modifies the ACK deadline for a specific Cloud Pub/Sub
message.'
	'modify_push_config:(BETA) Modifies the push configuration of a Cloud Pub/Sub
subscription.'
	'pull:(BETA) Pulls one or more Cloud Pub/Sub messages from a
subscription.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for a subscription.'
	'seek:(BETA) Resets a subscription&#39;s backlog to a point in time or to a
given snapshot.'
	'set_iam_policy:(BETA) Set IAM policy for a subscription.'
	'update:(BETA) Updates an existing Cloud Pub/Sub subscription.'
)

# groups

__auto-subscriptions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Pubsub subscriptions." _subscriptions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (ack)
      __auto-ack
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (modify_ack_deadline)
      __auto-modify_ack_deadline
      ;;
      (modify_message_ack_deadline)
      __auto-modify_message_ack_deadline
      ;;
      (modify_push_config)
      __auto-modify_push_config
      ;;
      (pull)
      __auto-pull
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (seek)
      __auto-seek
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _topics_arguments
_topics_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding for a topic.'
	'create:(BETA) Creates one or more Cloud Pub/Sub topics.'
	'delete:(BETA) Deletes one or more Cloud Pub/Sub topics.'
	'describe:(BETA) Describes a Cloud Pub/Sub topic.'
	'get_iam_policy:(BETA) Get the IAM policy for a Cloud Pub/Sub Topic.'
	'list:(BETA) Lists Cloud Pub/Sub topics within a project.'
	'list_subscriptions:(BETA) Lists Cloud Pub/Sub subscriptions from a given topic.'
	'publish:(BETA) Publishes a message to the specified topic.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for a topic.'
	'set_iam_policy:(BETA) Set IAM policy for a topic.'
)

# groups

__auto-topics ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Pubsub topics." _topics_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (list_subscriptions)
      __auto-list_subscriptions
      ;;
      (publish)
      __auto-publish
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}


__auto-pubsub ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Pub/Sub topics and subscriptions." _pubsub_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (snapshots)
      __auto-snapshots
      ;;
      (subscriptions)
      __auto-subscriptions
      ;;
      (topics)
      __auto-topics
      ;;
    esac
    ;;
	esac
}

local -a _redis_arguments
_redis_arguments=(
	'instances:(BETA) Manage Cloud Memorystore Redis instances.'
	'operations:(BETA) Manage Cloud Memorystore Redis operations.'
	'regions:(BETA) Manage Cloud Memorystore Redis regions.'
	'zones:(BETA) Manage Cloud Memorystore Redis zones.'
)

# groups
local -a _instances_arguments
_instances_arguments=(
	'create:(BETA) Create a Memorystore Redis instance.'
	'delete:(BETA) Delete a Redis instance.'
	'describe:(BETA) Show metadata for a Memorystore Redis instance.'
	'list:(BETA) List Memorystore Redis instances.'
	'update:(BETA) Update Memorystore Redis instances.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Memorystore Redis instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Show metadata for a Memorystore Redis operation.'
	'list:(BETA) List Memorystore Redis operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Memorystore Redis operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'describe:(BETA) Show metadata for a Memorystore Redis region.'
	'list:(BETA) List Memorystore Redis regions.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Memorystore Redis regions." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _zones_arguments
_zones_arguments=(
	'list:(BETA) List Memorystore Redis zones.'
)

# groups

__auto-zones ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Memorystore Redis zones." _zones_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-redis ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Memorystore Redis resources." _redis_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (instances)
      __auto-instances
      ;;
      (operations)
      __auto-operations
      ;;
      (regions)
      __auto-regions
      ;;
      (zones)
      __auto-zones
      ;;
    esac
    ;;
	esac
}

local -a _resource_manager_arguments
_resource_manager_arguments=(
	'folders:(BETA) Manage Cloud Folders.'
	'org_policies:(BETA) Manage Org Policies.'
)

# groups
local -a _folders_arguments
_folders_arguments=(
	'get_iam_policy:(BETA) Get IAM policy for a folder.'
)

# groups

__auto-folders ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Folders." _folders_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _org_policies_arguments
_org_policies_arguments=(
	'allow:(BETA) Add values to an Organization Policy allowed_values list
policy.'
	'delete:(BETA) Delete an Organization Policy.'
	'deny:(BETA) Add values to an Organization Policy denied_values list
policy.'
	'describe:(BETA) Describe an Organization Policy.'
	'disable_enforce:(BETA) Turns off enforcement of boolean Organization Policy
constraint.'
	'enable_enforce:(BETA) Turns on enforcement of boolean Organization Policy
constraint.'
	'list:(BETA) List Organization Policies associated with the specified
resource.'
	'set_policy:(BETA) Set Organization Policy.'
)

# groups

__auto-org_policies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Org Policies." _org_policies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (allow)
      __auto-allow
      ;;
      (delete)
      __auto-delete
      ;;
      (deny)
      __auto-deny
      ;;
      (describe)
      __auto-describe
      ;;
      (disable_enforce)
      __auto-disable_enforce
      ;;
      (enable_enforce)
      __auto-enable_enforce
      ;;
      (list)
      __auto-list
      ;;
      (set_policy)
      __auto-set_policy
      ;;
    esac
    ;;
	esac
}


__auto-resource_manager ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Resources." _resource_manager_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (folders)
      __auto-folders
      ;;
      (org_policies)
      __auto-org_policies
      ;;
    esac
    ;;
	esac
}

local -a _runtime_config_arguments
_runtime_config_arguments=(
	'configs:(BETA) Commands for RuntimeConfig configs.'
)

# groups
local -a _configs_arguments
_configs_arguments=(
	'variables:(BETA) Manage variable resources.'
	'waiters:(BETA) Manage waiter resources.'
	'create:(BETA) Create runtime-config resources.'
	'delete:(BETA) Delete runtime-config resources.'
	'describe:(BETA) Describe runtime-config resources.'
	'list:(BETA) List runtime-config resources within the current project.'
	'update:(BETA) Update runtime-config resources.'
)

# groups
local -a _variables_arguments
_variables_arguments=(
	'describe:(BETA) Describe variable resources.'
	'get_value:(BETA) Output values of variable resources.'
	'list:(BETA) List variable resources within a configuration.'
	'set:(BETA) Create or update variable resources.'
	'unset:(BETA) Delete variable resources.'
	'watch:(BETA) Wait for a variable resources to change.'
)

# groups

__auto-variables ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage variable resources." _variables_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (get_value)
      __auto-get_value
      ;;
      (list)
      __auto-list
      ;;
      (set)
      __auto-set
      ;;
      (unset)
      __auto-unset
      ;;
      (watch)
      __auto-watch
      ;;
    esac
    ;;
	esac
}

local -a _waiters_arguments
_waiters_arguments=(
	'create:(BETA) Create waiter resources.'
	'delete:(BETA) Delete waiter resources.'
	'describe:(BETA) Describe waiter resources.'
	'list:(BETA) List waiter resources within a configuration.'
	'wait:(BETA) Wait for a waiter to end in success or failure.'
)

# groups

__auto-waiters ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage waiter resources." _waiters_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Commands for RuntimeConfig configs." _configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (variables)
      __auto-variables
      ;;
      (waiters)
      __auto-waiters
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-runtime_config ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage runtime configuration resources." _runtime_config_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configs)
      __auto-configs
      ;;
    esac
    ;;
	esac
}

local -a _services_arguments
_services_arguments=(
	'operations:(BETA) Manage Operation for various services.'
	'vpc_peerings:(BETA) VPC Peerings to various services.'
	'disable:(BETA) Disable a service for consumption for a project.'
	'enable:(BETA) Enables a service for consumption for a project.'
	'list:(BETA) List services for a project.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Describes an operation resource for a given operation name.'
	'list:(BETA) (DEPRECATED) List operations for a project.'
	'wait:(BETA) Waits for an operation to complete for a given operation
name.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Operation for various services." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _vpc_peerings_arguments
_vpc_peerings_arguments=(
	'operations:(BETA) Manage VPC Peering operations.'
	'connect:(BETA) Connect to a service via VPC peering for a project network.'
	'list:(BETA) List connections to a service via VPC peering for a project
network.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Describes an operation resource for a given operation name.'
	'wait:(BETA) Waits for an operation to complete for a given operation
name.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage VPC Peering operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-vpc_peerings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) VPC Peerings to various services." _vpc_peerings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (connect)
      __auto-connect
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) List, enable and disable APIs and services." _services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (vpc_peerings)
      __auto-vpc_peerings
      ;;
      (disable)
      __auto-disable
      ;;
      (enable)
      __auto-enable
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _source_arguments
_source_arguments=(
	'project_configs:(BETA) Manage Cloud Source Repositories configuration of a project.'
	'repos:(BETA) Manage cloud source repositories.'
)

# groups
local -a _project_configs_arguments
_project_configs_arguments=(
	'describe:(BETA) Show details about the configuration of a project.'
	'update:(BETA) Update the Cloud Source Repositories configuration of the
current project.'
)

# groups

__auto-project_configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Source Repositories configuration of a project." _project_configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _repos_arguments
_repos_arguments=(
	'clone:(BETA) Clone a cloud source repository.'
	'create:(BETA) Create a cloud source repository.'
	'delete:(BETA) Delete a cloud source repository.'
	'describe:(BETA) Describe a cloud source repository.'
	'get_iam_policy:(BETA) Get the IAM policy for the named cloud source repository.'
	'list:(BETA) List the repositories the currently active project.'
	'set_iam_policy:(BETA) Set the IAM policy for the named repository.'
	'update:(BETA) Update the configuration of a Cloud Source Repository.'
)

# groups

__auto-repos ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage cloud source repositories." _repos_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clone)
      __auto-clone
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-source ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Cloud git repository commands." _source_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (project_configs)
      __auto-project_configs
      ;;
      (repos)
      __auto-repos
      ;;
    esac
    ;;
	esac
}

local -a _spanner_arguments
_spanner_arguments=(
	'databases:(BETA) Manage Cloud Spanner databases.'
	'instance_configs:(BETA) Manage Cloud Spanner instance configs.'
	'instances:(BETA) Manage Cloud Spanner instances.'
	'operations:(BETA) Manage Cloud Spanner operations.'
	'rows:(BETA) Manage the rows in Cloud Spanner databases.'
)

# groups
local -a _databases_arguments
_databases_arguments=(
	'ddl:(BETA) Manage the DDL for Cloud Spanner databases.'
	'sessions:(BETA) Manage the sessions for Cloud Spanner databases.'
	'add_iam_policy_binding:(BETA) Add an IAM policy binding to a Cloud Spanner database.'
	'create:(BETA) Create a Cloud Spanner database.'
	'delete:(BETA) Delete a Cloud Spanner database.'
	'describe:(BETA) Describe a Cloud Spanner database.'
	'execute_sql:(BETA) Executes a read-only SQL query against a Cloud Spanner
database.'
	'get_iam_policy:(BETA) Get the IAM policy for a Cloud Spanner database.'
	'list:(BETA) List the Cloud Spanner databases contained within the given
instance.'
	'remove_iam_policy_binding:(BETA) Remove an IAM policy binding from a Cloud Spanner database.'
	'set_iam_policy:(BETA) Set the IAM policy for a Cloud Spanner database.'
)

# groups
local -a _ddl_arguments
_ddl_arguments=(
	'describe:(BETA) Describe the DDL for a Cloud Spanner database.'
	'update:(BETA) Update the DDL for a Cloud Spanner database.'
)

# groups

__auto-ddl ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage the DDL for Cloud Spanner databases." _ddl_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _sessions_arguments
_sessions_arguments=(
	'delete:(BETA) Delete a Cloud Spanner session.'
	'list:(BETA) List the Cloud Spanner sessions contained within the given
database.'
)

# groups

__auto-sessions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage the sessions for Cloud Spanner databases." _sessions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-databases ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Spanner databases." _databases_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (ddl)
      __auto-ddl
      ;;
      (sessions)
      __auto-sessions
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (execute_sql)
      __auto-execute_sql
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _instance_configs_arguments
_instance_configs_arguments=(
	'describe:(BETA) Describe a Cloud Spanner instance config.'
	'list:(BETA) List the available Cloud Spanner instance configs.'
)

# groups

__auto-instance_configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Spanner instance configs." _instance_configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'add_iam_policy_binding:(BETA) Add an IAM policy binding to a Cloud Spanner instance.'
	'create:(BETA) Create a Cloud Spanner instance.'
	'delete:(BETA) Delete a Cloud Spanner instance.'
	'describe:(BETA) Describe a Cloud Spanner instance.'
	'get_iam_policy:(BETA) Get the IAM policy for a Cloud Spanner instance.'
	'list:(BETA) List the Cloud Spanner instances in this project.'
	'remove_iam_policy_binding:(BETA) Remove an IAM policy binding from a Cloud Spanner instance.'
	'set_iam_policy:(BETA) Set the IAM policy for a Cloud Spanner instance.'
	'update:(BETA) Update a Cloud Spanner instance.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Spanner instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:(BETA) Cancel a Cloud Spanner operation.'
	'describe:(BETA) Describe a Cloud Spanner operation.'
	'list:(BETA) List the Cloud Spanner operations on the given instance or
database.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Spanner operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _rows_arguments
_rows_arguments=(
	'delete:(BETA) Delete a row in a Cloud Spanner database.'
	'insert:(BETA) Insert a row in a Cloud Spanner database.'
	'update:(BETA) Update a row in a Cloud Spanner database.'
)

# groups

__auto-rows ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage the rows in Cloud Spanner databases." _rows_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (insert)
      __auto-insert
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-spanner ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Command groups for Cloud Spanner." _spanner_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (databases)
      __auto-databases
      ;;
      (instance_configs)
      __auto-instance_configs
      ;;
      (instances)
      __auto-instances
      ;;
      (operations)
      __auto-operations
      ;;
      (rows)
      __auto-rows
      ;;
    esac
    ;;
	esac
}

local -a _sql_arguments
_sql_arguments=(
	'backups:(BETA) Provide commands for working with backups of Cloud SQL
instances.'
	'databases:(BETA) Provide commands for managing databases of Cloud SQL
instances.'
	'export:(BETA) Provide commands to export Cloud SQL instances.'
	'flags:(BETA) Provide a command to list flags.'
	'import:(BETA) Provides commands to import Cloud SQL instances.'
	'instances:(BETA) Provide commands for managing Cloud SQL instances.'
	'operations:(BETA) Provide commands for working with Cloud SQL instance
operations.'
	'ssl:(BETA) Provide commands for managing SSL certificates of Cloud SQL
instances.'
	'ssl_certs:(BETA) (DEPRECATED) Provide commands for managing SSL
certificates of Cloud SQL instances.'
	'tiers:(BETA) Provide a command to list tiers.'
	'users:(BETA) Provide commands for managing Cloud SQL users.'
	'connect:(BETA) Connects to a Cloud SQL instance.'
)

# groups
local -a _backups_arguments
_backups_arguments=(
	'create:(BETA) Creates a backup of a Cloud SQL instance.'
	'delete:(BETA) Delete a backup of a Cloud SQL instance.'
	'describe:(BETA) Retrieves information about a backup.'
	'list:(BETA) Lists all backups associated with a given instance.'
	'restore:(BETA) Restores a backup of a Cloud SQL instance.'
)

# groups

__auto-backups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide commands for working with backups of Cloud SQL
instances." _backups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (restore)
      __auto-restore
      ;;
    esac
    ;;
	esac
}

local -a _databases_arguments
_databases_arguments=(
	'create:(BETA) Creates a database for a Cloud SQL instance.'
	'delete:(BETA) Deletes a Cloud SQL database.'
	'describe:(BETA) Displays configuration and metadata about a Cloud SQL
database.'
	'list:(BETA) Lists databases for a Cloud SQL instance.'
	'patch:(BETA) Patches the settings of a Cloud SQL database.'
)

# groups

__auto-databases ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide commands for managing databases of Cloud SQL
instances." _databases_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (patch)
      __auto-patch
      ;;
    esac
    ;;
	esac
}

local -a _export_arguments
_export_arguments=(
	'csv:(BETA) Exports data from a Cloud SQL instance to a CSV file.'
	'sql:(BETA) Exports data from a Cloud SQL instance to a SQL file.'
)

# groups

__auto-export ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide commands to export Cloud SQL instances." _export_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (csv)
      __auto-csv
      ;;
      (sql)
      __auto-sql
      ;;
    esac
    ;;
	esac
}

local -a _flags_arguments
_flags_arguments=(
	'list:(BETA) List customizable flags for Google Cloud SQL instances.'
)

# groups

__auto-flags ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide a command to list flags." _flags_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _import_arguments
_import_arguments=(
	'csv:(BETA) Imports data into a Cloud SQL instance from a CSV file.'
	'sql:(BETA) Imports data into a Cloud SQL instance from a SQL dump file.'
)

# groups

__auto-import ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provides commands to import Cloud SQL instances." _import_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (csv)
      __auto-csv
      ;;
      (sql)
      __auto-sql
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'clone:(BETA) Clones a Cloud SQL instance.'
	'create:(BETA) Creates a new Cloud SQL instance.'
	'delete:(BETA) Deletes a Cloud SQL instance.'
	'describe:(BETA) Displays configuration and metadata about a Cloud SQL
instance.'
	'export:(BETA) (DEPRECATED) Exports data from a Cloud SQL
instance.'
	'failover:(BETA) Causes a high-availability Cloud SQL instance to failover.'
	'import:(BETA) (DEPRECATED) Imports data into a Cloud SQL
instance from Google Cloud Storage.'
	'list:(BETA) Lists Cloud SQL instances in a given project.'
	'patch:(BETA) Updates the settings of a Cloud SQL instance.'
	'promote_replica:(BETA) Promotes Cloud SQL read replica to a stand-alone instance.'
	'reset_ssl_config:(BETA) Deletes all client certificates and generates a new server
certificate.'
	'restart:(BETA) Restarts a Cloud SQL instance.'
	'restore_backup:(BETA) Restores a backup of a Cloud SQL instance.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide commands for managing Cloud SQL instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clone)
      __auto-clone
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (export)
      __auto-export
      ;;
      (failover)
      __auto-failover
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
      (patch)
      __auto-patch
      ;;
      (promote_replica)
      __auto-promote_replica
      ;;
      (reset_ssl_config)
      __auto-reset_ssl_config
      ;;
      (restart)
      __auto-restart
      ;;
      (restore_backup)
      __auto-restore_backup
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:(BETA) Retrieves information about a Cloud SQL instance operation.'
	'list:(BETA) Lists all instance operations for the given Cloud SQL
instance.'
	'wait:(BETA) Waits for one or more operations to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide commands for working with Cloud SQL instance
operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _ssl_arguments
_ssl_arguments=(
	'client_certs:(BETA) Provide commands for managing client certificates of Cloud
SQL instances.'
	'server_ca_certs:(BETA) Provide commands for managing server CA certs of Cloud SQL
instances.'
)

# groups
local -a _client_certs_arguments
_client_certs_arguments=(
	'create:(BETA) Create a client certificate for a Cloud SQL instance.'
	'delete:(BETA) Delete a client certificate for a Cloud SQL instance.'
	'describe:(BETA) Retrieve information about a client cert for a Cloud SQL
instance.'
	'list:(BETA) List all client certs for a Cloud SQL instance.'
)

# groups

__auto-client_certs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide commands for managing client certificates of Cloud
SQL instances." _client_certs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _server_ca_certs_arguments
_server_ca_certs_arguments=(
	'create:(BETA) Create a server CA cert for a Cloud SQL instance.'
	'list:(BETA) List all server CA certs for a Cloud SQL instance.'
	'rollback:(BETA) Roll back to the previous server CA cert for a Cloud SQL
instance.'
	'rotate:(BETA) Rotate in the upcoming server CA cert for a Cloud SQL
instance.'
)

# groups

__auto-server_ca_certs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide commands for managing server CA certs of Cloud SQL
instances." _server_ca_certs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (list)
      __auto-list
      ;;
      (rollback)
      __auto-rollback
      ;;
      (rotate)
      __auto-rotate
      ;;
    esac
    ;;
	esac
}


__auto-ssl ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide commands for managing SSL certificates of Cloud SQL
instances." _ssl_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (client_certs)
      __auto-client_certs
      ;;
      (server_ca_certs)
      __auto-server_ca_certs
      ;;
    esac
    ;;
	esac
}

local -a _ssl_certs_arguments
_ssl_certs_arguments=(
	'create:(BETA) (DEPRECATED) Creates an SSL certificate for a
Cloud SQL instance.'
	'delete:(BETA) (DEPRECATED) Deletes an SSL certificate for a
Cloud SQL instance.'
	'describe:(BETA) (DEPRECATED) Retrieves information about an SSL
cert for a Cloud SQL instance.'
	'list:(BETA) (DEPRECATED) Lists all SSL certs for a Cloud
SQL instance.'
)

# groups

__auto-ssl_certs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) (DEPRECATED) Provide commands for managing SSL
certificates of Cloud SQL instances." _ssl_certs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _tiers_arguments
_tiers_arguments=(
	'list:(BETA) Lists all available service tiers for Google Cloud SQL.'
)

# groups

__auto-tiers ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide a command to list tiers." _tiers_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _users_arguments
_users_arguments=(
	'create:(BETA) Creates a user in a given instance.'
	'delete:(BETA) Deletes a Cloud SQL user in a given instance.'
	'list:(BETA) Lists Cloud SQL users in a given instance.'
	'set_password:(BETA) Changes a user&#39;s password in a given instance.'
)

# groups

__auto-users ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Provide commands for managing Cloud SQL users." _users_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
      (set_password)
      __auto-set_password
      ;;
    esac
    ;;
	esac
}


__auto-sql ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Create and manage Google Cloud SQL databases." _sql_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (backups)
      __auto-backups
      ;;
      (databases)
      __auto-databases
      ;;
      (export)
      __auto-export
      ;;
      (flags)
      __auto-flags
      ;;
      (import)
      __auto-import
      ;;
      (instances)
      __auto-instances
      ;;
      (operations)
      __auto-operations
      ;;
      (ssl)
      __auto-ssl
      ;;
      (ssl_certs)
      __auto-ssl_certs
      ;;
      (tiers)
      __auto-tiers
      ;;
      (users)
      __auto-users
      ;;
      (connect)
      __auto-connect
      ;;
    esac
    ;;
	esac
}

local -a _tasks_arguments
_tasks_arguments=(
	'locations:(BETA) Get information about Cloud Tasks locations.'
	'queues:(BETA) Manage Cloud Tasks queues.'
	'create_app_engine_task:(BETA) Create and add a task to an App Engine queue.'
	'delete:(BETA) Delete a task from a queue.'
	'describe:(BETA) Show details about a task.'
	'list:(BETA) List tasks.'
	'run:(BETA) Force a task to run now.'
)

# groups
local -a _locations_arguments
_locations_arguments=(
	'describe:(BETA) Show details about a location.'
	'list:(BETA) Lists the locations where Cloud Tasks is available.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Get information about Cloud Tasks locations." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _queues_arguments
_queues_arguments=(
	'add_iam_policy_binding:(BETA) Add IAM policy binding for a queue.'
	'create_app_engine_queue:(BETA) Create an App Engine queue.'
	'delete:(BETA) Delete a queue.'
	'describe:(BETA) Show details about a queue.'
	'get_iam_policy:(BETA) Get the IAM policy for a queue.'
	'list:(BETA) List all queues.'
	'pause:(BETA) Pause a queue.'
	'purge:(BETA) Purge a queue by deleting all of its tasks.'
	'remove_iam_policy_binding:(BETA) Remove IAM policy binding for a queue.'
	'resume:(BETA) Request to resume a paused or disabled queue.'
	'set_iam_policy:(BETA) Set the IAM policy for a queue.'
	'update_app_engine_queue:(BETA) Update an App Engine queue.'
)

# groups

__auto-queues ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Tasks queues." _queues_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create_app_engine_queue)
      __auto-create_app_engine_queue
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (pause)
      __auto-pause
      ;;
      (purge)
      __auto-purge
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (resume)
      __auto-resume
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update_app_engine_queue)
      __auto-update_app_engine_queue
      ;;
    esac
    ;;
	esac
}


__auto-tasks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Manage Cloud Tasks queues and tasks." _tasks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (locations)
      __auto-locations
      ;;
      (queues)
      __auto-queues
      ;;
      (create_app_engine_task)
      __auto-create_app_engine_task
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (run)
      __auto-run
      ;;
    esac
    ;;
	esac
}


__auto-beta ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(BETA) Beta versions of gcloud commands." _beta_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (app)
      __auto-app
      ;;
      (auth)
      __auto-auth
      ;;
      (bigtable)
      __auto-bigtable
      ;;
      (billing)
      __auto-billing
      ;;
      (builds)
      __auto-builds
      ;;
      (composer)
      __auto-composer
      ;;
      (compute)
      __auto-compute
      ;;
      (config)
      __auto-config
      ;;
      (container)
      __auto-container
      ;;
      (dataflow)
      __auto-dataflow
      ;;
      (dataproc)
      __auto-dataproc
      ;;
      (datastore)
      __auto-datastore
      ;;
      (debug)
      __auto-debug
      ;;
      (deployment_manager)
      __auto-deployment_manager
      ;;
      (dns)
      __auto-dns
      ;;
      (domains)
      __auto-domains
      ;;
      (emulators)
      __auto-emulators
      ;;
      (endpoints)
      __auto-endpoints
      ;;
      (error_reporting)
      __auto-error_reporting
      ;;
      (filestore)
      __auto-filestore
      ;;
      (firebase)
      __auto-firebase
      ;;
      (firestore)
      __auto-firestore
      ;;
      (functions)
      __auto-functions
      ;;
      (iam)
      __auto-iam
      ;;
      (iot)
      __auto-iot
      ;;
      (kms)
      __auto-kms
      ;;
      (logging)
      __auto-logging
      ;;
      (ml)
      __auto-ml
      ;;
      (ml_engine)
      __auto-ml_engine
      ;;
      (organizations)
      __auto-organizations
      ;;
      (projects)
      __auto-projects
      ;;
      (pubsub)
      __auto-pubsub
      ;;
      (redis)
      __auto-redis
      ;;
      (resource_manager)
      __auto-resource_manager
      ;;
      (runtime_config)
      __auto-runtime_config
      ;;
      (services)
      __auto-services
      ;;
      (source)
      __auto-source
      ;;
      (spanner)
      __auto-spanner
      ;;
      (sql)
      __auto-sql
      ;;
      (tasks)
      __auto-tasks
      ;;
      (init)
      __auto-init
      ;;
    esac
    ;;
	esac
}

local -a _bigtable_arguments
_bigtable_arguments=(
	'clusters:Manage Cloud Bigtable clusters.'
	'instances:Manage Cloud Bigtable instances.'
)

# groups
local -a _clusters_arguments
_clusters_arguments=(
	'describe:Describe an existing Bigtable cluster.'
	'list:List existing Bigtable clusters.'
)

# groups

__auto-clusters ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Bigtable clusters." _clusters_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'add_iam_policy_binding:Add an IAM policy binding to a Cloud Bigtable instance.'
	'create:Create a new Bigtable instance.'
	'delete:Delete an existing Bigtable instance.'
	'describe:Describe an existing Bigtable instance.'
	'get_iam_policy:Get the IAM policy for a Cloud Bigtable instance.'
	'list:List existing Bigtable instances.'
	'remove_iam_policy_binding:Remove an IAM policy binding from a Cloud Bigtable instance.'
	'set_iam_policy:Set the IAM policy for a Cloud Bigtable instance.'
	'update:Modify an existing Bigtable instance.'
	'upgrade:Upgrade an existing instance&#39;s type from development to production.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Bigtable instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
      (upgrade)
      __auto-upgrade
      ;;
    esac
    ;;
	esac
}


__auto-bigtable ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage your Cloud Bigtable storage." _bigtable_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clusters)
      __auto-clusters
      ;;
      (instances)
      __auto-instances
      ;;
    esac
    ;;
	esac
}

local -a _builds_arguments
_builds_arguments=(
	'cancel:Cancel an ongoing build.'
	'describe:Get information about a particular build.'
	'list:List builds.'
	'log:Stream the logs for a build.'
	'submit:Submit a build using Google Cloud Build.'
)

# groups

__auto-builds ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage builds for Google Cloud Build." _builds_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (log)
      __auto-log
      ;;
      (submit)
      __auto-submit
      ;;
    esac
    ;;
	esac
}

local -a _components_arguments
_components_arguments=(
	'repositories:Manage additional component repositories for Trusted Tester programs.'
	'install:Install one or more Cloud SDK components.'
	'list:List the status of all Cloud SDK components.'
	'reinstall:Reinstall the Cloud SDK with the same components you have now.'
	'remove:Remove one or more installed components.'
	'restore:Restore the Cloud SDK installation to its previous state.'
	'update:Update all of your installed components to the latest version.'
)

# groups
local -a _repositories_arguments
_repositories_arguments=(
	'add:Add a new Trusted Tester component repository.'
	'list:List any Trusted Tester component repositories you have registered.'
	'remove:Remove a registered Trusted Test component repository.'
)

# groups

__auto-repositories ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage additional component repositories for Trusted Tester programs." _repositories_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add)
      __auto-add
      ;;
      (list)
      __auto-list
      ;;
      (remove)
      __auto-remove
      ;;
    esac
    ;;
	esac
}


__auto-components ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, install, update, or remove Google Cloud SDK components." _components_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (repositories)
      __auto-repositories
      ;;
      (install)
      __auto-install
      ;;
      (list)
      __auto-list
      ;;
      (reinstall)
      __auto-reinstall
      ;;
      (remove)
      __auto-remove
      ;;
      (restore)
      __auto-restore
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _composer_arguments
_composer_arguments=(
	'environments:Create and manage Cloud Composer environments.'
	'operations:Manage Cloud Composer operations.'
)

# groups
local -a _environments_arguments
_environments_arguments=(
	'storage:Manage Cloud Storage objects stored as part of Cloud Composer environments.'
	'create:Create and initialize a Cloud Composer environment.'
	'delete:Delete one or more Cloud Composer environments.'
	'describe:Get details about a Cloud Composer environment.'
	'list:List the Cloud Composer environments under a project and location.'
	'run:Run an Airflow sub-command remotely in a Cloud Composer environment.'
	'update:Update properties of a Cloud Composer environment.'
)

# groups
local -a _storage_arguments
_storage_arguments=(
	'dags:Manage DAGs for Cloud Composer environments.'
	'data:Manage data for Cloud Composer environments.'
	'plugins:Manage plugins for Cloud Composer environments.'
)

# groups
local -a _dags_arguments
_dags_arguments=(
	'delete:Delete DAG files from an Cloud Composer environment&#39;s Cloud Storage bucket.'
	'export:Export DAGs from an environment into local storage or Cloud Storage.'
	'import:Import DAGs from local storage or Cloud Storage into an environment.'
	'list:List the DAG files for a Cloud Composer environment.'
)

# groups

__auto-dags ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage DAGs for Cloud Composer environments." _dags_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _data_arguments
_data_arguments=(
	'delete:Delete data from an Cloud Composer environment&#39;s Cloud Storage bucket.'
	'export:Export data from an environment into local storage or Cloud Storage.'
	'import:Import data from local storage or Cloud Storage into an environment.'
	'list:List the data for a Cloud Composer environment.'
)

# groups

__auto-data ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage data for Cloud Composer environments." _data_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _plugins_arguments
_plugins_arguments=(
	'delete:Delete plugins from an Cloud Composer environment&#39;s Cloud Storage bucket.'
	'export:Export plugins from an environment into local storage or Cloud Storage.'
	'import:Import plugins from local storage or Cloud Storage into an environment.'
	'list:List the plugins for a Cloud Composer environment.'
)

# groups

__auto-plugins ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage plugins for Cloud Composer environments." _plugins_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-storage ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Storage objects stored as part of Cloud Composer environments." _storage_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (dags)
      __auto-dags
      ;;
      (data)
      __auto-data
      ;;
      (plugins)
      __auto-plugins
      ;;
    esac
    ;;
	esac
}


__auto-environments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage Cloud Composer environments." _environments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (storage)
      __auto-storage
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (run)
      __auto-run
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'delete:Delete one or more completed Cloud Composer operations.'
	'describe:Get details about an asynchronous operation.'
	'list:Lists environment operations.'
	'wait:Wait for asynchronous operation to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Composer operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-composer ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage Cloud Composer Environments." _composer_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (environments)
      __auto-environments
      ;;
      (operations)
      __auto-operations
      ;;
    esac
    ;;
	esac
}

local -a _compute_arguments
_compute_arguments=(
	'accelerator_types:Read Google Compute Engine accelerator types.'
	'addresses:Read and manipulate Google Compute Engine addresses.'
	'backend_buckets:Read and manipulate backend buckets.'
	'backend_services:List, create, and delete backend services.'
	'commitments:Manage Google Compute Engine commitments.'
	'disk_types:Read Google Compute Engine virtual disk types.'
	'disks:Read and manipulate Google Compute Engine disks.'
	'firewall_rules:List, create, update, and delete Google Compute Engine firewall rules.'
	'forwarding_rules:Read and manipulate traffic forwarding rules to network load balancers.'
	'health_checks:Read and manipulate health checks for load balanced instances.'
	'http_health_checks:Read and manipulate HTTP health checks for load balanced instances.'
	'https_health_checks:Read and manipulate HTTPS health checks for load balanced instances.'
	'images:List, create, and delete Google Compute Engine images.'
	'instance_groups:Read and manipulate Google Compute Engine instance groups.'
	'instance_templates:Read and manipulate Google Compute Engine instances templates.'
	'instances:Read and manipulate Google Compute Engine virtual machine instances.'
	'interconnects:Read and manipulate Google Compute Engine interconnects.'
	'machine_types:Read Google Compute Engine virtual machine types.'
	'networks:List, create, and delete Google Compute Engine networks.'
	'operations:Read and manipulate Google Compute Engine operations.'
	'os_login:Create and manipulate Google Compute Engine OS Login resources.'
	'project_info:Read and manipulate project-level data like quotas and metadata.'
	'regions:List Google Compute Engine regions.'
	'routers:List, create, and delete Google Compute Engine routers.'
	'routes:Read and manipulate routes.'
	'shared_vpc:Configure shared VPC.'
	'snapshots:List, describe, and delete Google Compute Engine snapshots.'
	'sole_tenancy:Read and manage Google Compute Engine sole-tenancy resources.'
	'ssl_certificates:List, create, and delete Google Compute Engine SSL certificates.'
	'ssl_policies:List, create, delete and update Google Compute Engine SSL policies.'
	'target_http_proxies:List, create, and delete target HTTP proxies.'
	'target_https_proxies:List, create, and delete target HTTPS proxies.'
	'target_instances:Read and manipulate Google Compute Engine virtual target instances.'
	'target_pools:Control Compute Engine target pools for network load balancing.'
	'target_ssl_proxies:List, create, and delete target SSL proxies.'
	'target_tcp_proxies:List, create, and delete target TCP proxies.'
	'target_vpn_gateways:Read and manipulate Google Compute Engine VPN Gateways.'
	'tpus:List, create, and delete Cloud TPUs.'
	'url_maps:List, create, and delete URL maps.'
	'vpn_tunnels:Read and manipulate Google Compute Engine VPN Tunnels.'
	'zones:List Google Compute Engine zones.'
	'config_ssh:Populate SSH config files with Host entries from each instance.'
	'connect_to_serial_port:Connect to the serial port of an instance.'
	'copy_files:(DEPRECATED) Copy files to and from Google Compute Engine virtual
machines via scp.'
	'reset_windows_password:Reset and return a password for a Windows machine instance.'
	'scp:Copy files to and from Google Compute Engine virtual machines via scp.'
	'sign_url:Sign specified URL for use with Cloud CDN Signed URLs.'
	'ssh:SSH into a virtual machine instance.'
)

# groups
local -a _accelerator_types_arguments
_accelerator_types_arguments=(
	'describe:Describe Google Compute Engine accelerator types.'
	'list:List Google Compute Engine accelerator types.'
)

# groups

__auto-accelerator_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read Google Compute Engine accelerator types." _accelerator_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _addresses_arguments
_addresses_arguments=(
	'create:Reserve IP addresses.'
	'delete:Release reserved IP addresses.'
	'describe:Display detailed information about an address.'
	'list:List addresses.'
)

# groups

__auto-addresses ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine addresses." _addresses_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _backend_buckets_arguments
_backend_buckets_arguments=(
	'add_signed_url_key:Add Cloud CDN Signed URL key to a backend bucket.'
	'create:Create a backend bucket.'
	'delete:Delete backend buckets.'
	'delete_signed_url_key:Delete Cloud CDN Signed URL key from a backend bucket.'
	'describe:Describe a backend bucket.'
	'list:List Google Compute Engine backend buckets.'
	'update:Update a backend bucket.'
)

# groups

__auto-backend_buckets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate backend buckets." _backend_buckets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_signed_url_key)
      __auto-add_signed_url_key
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_signed_url_key)
      __auto-delete_signed_url_key
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _backend_services_arguments
_backend_services_arguments=(
	'add_backend:Add a backend to a backend service.'
	'add_signed_url_key:Add Cloud CDN Signed URL key to a backend service.'
	'create:Create a backend service.'
	'delete:Delete backend services.'
	'delete_signed_url_key:Delete Cloud CDN Signed URL key from a backend service.'
	'describe:Display detailed information about a backend service.'
	'edit:Modify backend services.'
	'get_health:Get backend health statuses from a backend service.'
	'list:List Google Compute Engine backend services.'
	'remove_backend:Remove a backend from a backend service.'
	'update:Update a backend service.'
	'update_backend:Update an existing backend in a backend service.'
)

# groups

__auto-backend_services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete backend services." _backend_services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_backend)
      __auto-add_backend
      ;;
      (add_signed_url_key)
      __auto-add_signed_url_key
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_signed_url_key)
      __auto-delete_signed_url_key
      ;;
      (describe)
      __auto-describe
      ;;
      (edit)
      __auto-edit
      ;;
      (get_health)
      __auto-get_health
      ;;
      (list)
      __auto-list
      ;;
      (remove_backend)
      __auto-remove_backend
      ;;
      (update)
      __auto-update
      ;;
      (update_backend)
      __auto-update_backend
      ;;
    esac
    ;;
	esac
}

local -a _commitments_arguments
_commitments_arguments=(
	'create:Create Google Compute Engine commitments.'
	'describe:Describe a Google Compute Engine commitment.'
	'list:List Google Compute Engine commitments.'
)

# groups

__auto-commitments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Google Compute Engine commitments." _commitments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _disk_types_arguments
_disk_types_arguments=(
	'describe:Describe a Google Compute Engine disk type.'
	'list:List Google Compute Engine disk types.'
)

# groups

__auto-disk_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read Google Compute Engine virtual disk types." _disk_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _disks_arguments
_disks_arguments=(
	'add_labels:Add labels to Google Compute Engine persistent disks.'
	'create:Create Google Compute Engine persistent disks.'
	'delete:Delete Google Compute Engine persistent disks.'
	'describe:Describe a Google Compute Engine disk.'
	'list:List Google Compute Engine disks.'
	'move:Move a disk between zones.'
	'remove_labels:Remove labels from Google Compute Engine persistent disks.'
	'resize:Resize a disk or disks.'
	'snapshot:Create snapshots of Google Compute Engine persistent disks.'
	'update:Update a Google Compute Engine persistent disk.'
)

# groups

__auto-disks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine disks." _disks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_labels)
      __auto-add_labels
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (move)
      __auto-move
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (resize)
      __auto-resize
      ;;
      (snapshot)
      __auto-snapshot
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _firewall_rules_arguments
_firewall_rules_arguments=(
	'create:Create a Google Compute Engine firewall rule.'
	'delete:Delete Google Compute Engine firewall rules.'
	'describe:Describe a Google Compute Engine firewall rule.'
	'list:List Google Compute Engine firewall rules.'
	'update:Update a firewall rule.'
)

# groups

__auto-firewall_rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, update, and delete Google Compute Engine firewall rules." _firewall_rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _forwarding_rules_arguments
_forwarding_rules_arguments=(
	'create:Create a forwarding rule to direct network traffic to a load balancer.'
	'delete:Delete forwarding rules.'
	'describe:Display detailed information about a forwarding rule.'
	'list:List Google Compute Engine forwarding rules.'
	'set_target:Modify a forwarding rule to direct network traffic to a new target.'
)

# groups

__auto-forwarding_rules ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate traffic forwarding rules to network load balancers." _forwarding_rules_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (set_target)
      __auto-set_target
      ;;
    esac
    ;;
	esac
}

local -a _health_checks_arguments
_health_checks_arguments=(
	'create:Create health checks for load balanced instances.'
	'update:Update health checks for load balanced instances.'
	'delete:Delete health checks.'
	'describe:Display detailed information about a health check.'
	'list:List Google Compute Engine health checks.'
)

# groups
local -a _create_arguments
_create_arguments=(
	'http:Create a HTTP health check to monitor load balanced instances.'
	'https:Create a HTTPS health check to monitor load balanced instances.'
	'ssl:Create a SSL health check to monitor load balanced instances.'
	'tcp:Create a TCP health check to monitor load balanced instances.'
)

# groups

__auto-create ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create health checks for load balanced instances." _create_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (http)
      __auto-http
      ;;
      (https)
      __auto-https
      ;;
      (ssl)
      __auto-ssl
      ;;
      (tcp)
      __auto-tcp
      ;;
    esac
    ;;
	esac
}

local -a _update_arguments
_update_arguments=(
	'http:Update a HTTP health check.'
	'https:Update a HTTPS health check.'
	'ssl:Update a SSL health check.'
	'tcp:Update a TCP health check.'
)

# groups

__auto-update ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Update health checks for load balanced instances." _update_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (http)
      __auto-http
      ;;
      (https)
      __auto-https
      ;;
      (ssl)
      __auto-ssl
      ;;
      (tcp)
      __auto-tcp
      ;;
    esac
    ;;
	esac
}


__auto-health_checks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate health checks for load balanced instances." _health_checks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (update)
      __auto-update
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _http_health_checks_arguments
_http_health_checks_arguments=(
	'create:Create an HTTP health check to monitor load balanced instances.'
	'delete:Delete HTTP health checks.'
	'describe:Display detailed information about an HTTP health check.'
	'list:List Google Compute Engine health checks.'
	'update:Update an HTTP health check.'
)

# groups

__auto-http_health_checks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate HTTP health checks for load balanced instances." _http_health_checks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _https_health_checks_arguments
_https_health_checks_arguments=(
	'create:Create an HTTPS health check to monitor load balanced instances.'
	'delete:Delete HTTPS health checks.'
	'describe:Display detailed information about an HTTPS health check.'
	'list:List Google Compute Engine HTTPS health checks.'
	'update:Update an HTTPS health check.'
)

# groups

__auto-https_health_checks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate HTTPS health checks for load balanced instances." _https_health_checks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _images_arguments
_images_arguments=(
	'add_labels:Add labels to Google Compute Engine images.'
	'create:Create Google Compute Engine images.'
	'delete:Delete Google Compute Engine images.'
	'deprecate:Manage deprecation status of Google Compute Engine images.'
	'describe:Describe a Google Compute Engine image.'
	'describe_from_family:Describe the latest image from an image family.'
	'export:Export a Google Compute Engine image.'
	'import:Import an image into Google Compute Engine.'
	'list:List Google Compute Engine images.'
	'remove_labels:Remove labels from Google Compute Engine images.'
	'update:Update a Google Compute Engine image.'
)

# groups

__auto-images ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete Google Compute Engine images." _images_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_labels)
      __auto-add_labels
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (deprecate)
      __auto-deprecate
      ;;
      (describe)
      __auto-describe
      ;;
      (describe_from_family)
      __auto-describe_from_family
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _instance_groups_arguments
_instance_groups_arguments=(
	'managed:Read and manipulate Google Compute Engine managed instance groups.'
	'unmanaged:Read and manipulate Google Compute Engine unmanaged instance group.'
	'describe:Display detailed information about an instance group.'
	'get_named_ports:Lists the named ports for an instance group resource.'
	'list:List Google Compute Engine instance groups.'
	'list_instances:List instances present in the instance group.'
	'set_named_ports:Sets the list of named ports for an instance group.'
)

# groups
local -a _managed_arguments
_managed_arguments=(
	'abandon_instances:Abandon instances owned by a managed instance group.'
	'create:Create a Compute Engine managed instance group.'
	'delete:Delete Google Compute Engine managed instance groups.'
	'delete_instances:Delete instances managed by managed instance group.'
	'describe:Display detailed information about an instance group.'
	'get_named_ports:Lists the named ports for an instance group resource.'
	'list:List Google Compute Engine managed instance groups.'
	'list_instances:List instances present in the managed instance group.'
	'recreate_instances:Recreate instances managed by a managed instance group.'
	'resize:Set managed instance group size.'
	'set_autoscaling:Set autoscaling parameters of a managed instance group.'
	'set_instance_template:Set instance template for managed instance group.'
	'set_named_ports:Sets the list of named ports for an instance group.'
	'set_target_pools:Set target pools of managed instance group.'
	'stop_autoscaling:Stop autoscaling a managed instance group.'
	'wait_until_stable:Waits until state of managed instance group is stable.'
)

# groups

__auto-managed ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine managed instance groups." _managed_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (abandon_instances)
      __auto-abandon_instances
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_instances)
      __auto-delete_instances
      ;;
      (describe)
      __auto-describe
      ;;
      (get_named_ports)
      __auto-get_named_ports
      ;;
      (list)
      __auto-list
      ;;
      (list_instances)
      __auto-list_instances
      ;;
      (recreate_instances)
      __auto-recreate_instances
      ;;
      (resize)
      __auto-resize
      ;;
      (set_autoscaling)
      __auto-set_autoscaling
      ;;
      (set_instance_template)
      __auto-set_instance_template
      ;;
      (set_named_ports)
      __auto-set_named_ports
      ;;
      (set_target_pools)
      __auto-set_target_pools
      ;;
      (stop_autoscaling)
      __auto-stop_autoscaling
      ;;
      (wait_until_stable)
      __auto-wait_until_stable
      ;;
    esac
    ;;
	esac
}

local -a _unmanaged_arguments
_unmanaged_arguments=(
	'add_instances:Adds instances to an unmanaged instance group by name.'
	'create:Create a Compute Engine unmanaged instance group.'
	'delete:Delete Google Compute Engine unmanaged instance groups.'
	'describe:Describe an instance group.'
	'get_named_ports:Lists the named ports for an instance group resource.'
	'list:List Google Compute Engine unmanaged instance groups.'
	'list_instances:List instances present in the instance group.'
	'remove_instances:Removes resources from an unmanaged instance group by instance name.'
	'set_named_ports:Sets the list of named ports for an instance group.'
)

# groups

__auto-unmanaged ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine unmanaged instance group." _unmanaged_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_instances)
      __auto-add_instances
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_named_ports)
      __auto-get_named_ports
      ;;
      (list)
      __auto-list
      ;;
      (list_instances)
      __auto-list_instances
      ;;
      (remove_instances)
      __auto-remove_instances
      ;;
      (set_named_ports)
      __auto-set_named_ports
      ;;
    esac
    ;;
	esac
}


__auto-instance_groups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine instance groups." _instance_groups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (managed)
      __auto-managed
      ;;
      (unmanaged)
      __auto-unmanaged
      ;;
      (describe)
      __auto-describe
      ;;
      (get_named_ports)
      __auto-get_named_ports
      ;;
      (list)
      __auto-list
      ;;
      (list_instances)
      __auto-list_instances
      ;;
      (set_named_ports)
      __auto-set_named_ports
      ;;
    esac
    ;;
	esac
}

local -a _instance_templates_arguments
_instance_templates_arguments=(
	'create:Create a Compute Engine virtual machine instance template.'
	'delete:Delete Google Compute Engine virtual machine instance templates.'
	'describe:Describe a virtual machine instance template.'
	'list:List Google Compute Engine instance templates.'
)

# groups

__auto-instance_templates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine instances templates." _instance_templates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'network_interfaces:Read and manipulate Google Compute Engine instance network interfaces.'
	'add_access_config:Create a Google Compute Engine virtual machine access configuration.'
	'add_labels:Add labels to Google Compute Engine virtual machine instances.'
	'add_metadata:Add or update instance metadata.'
	'add_tags:Add tags to Google Compute Engine virtual machine instances.'
	'attach_disk:Attach a disk to an instance.'
	'create:Create Google Compute Engine virtual machine instances.'
	'create_with_container:Creates Google Compute engine virtual machine instances running container
images.'
	'delete:Delete Google Compute Engine virtual machine instances.'
	'delete_access_config:Delete an access configuration from a virtual machine network interface.'
	'describe:Describe a virtual machine instance.'
	'detach_disk:Detach disks from Compute Engine virtual machine instances.'
	'get_serial_port_output:Read output from a virtual machine instance&#39;s serial port.'
	'list:List Google Compute Engine instances.'
	'move:Move an instance and its attached persistent disks between zones.'
	'remove_labels:Remove labels from Google Compute Engine virtual machine instances.'
	'remove_metadata:Remove instance metadata.'
	'remove_tags:Remove tags from Google Compute Engine virtual machine instances.'
	'reset:Reset a virtual machine instance.'
	'set_disk_auto_delete:Set auto-delete behavior for disks.'
	'set_machine_type:Set machine type for Google Compute Engine virtual machines.'
	'set_scheduling:Set scheduling options for Google Compute Engine virtual machines.'
	'set_service_account:Set service account and scopes for a Google Compute Engine instance.'
	'simulate_maintenance_event:Simulate maintenance of virtual machine instances.'
	'start:Start a stopped virtual machine instance.'
	'stop:Stop a virtual machine instance.'
	'tail_serial_port_output:Periodically fetch new output from a virtual machine instance&#39;s serial port and
display it as it becomes available.'
	'update:Update a Google Compute Engine virtual machine.'
	'update_access_config:Update a Google Compute Engine virtual machine access configuration.'
	'update_container:Updates Google Compute engine virtual machine instances running container
images.'
)

# groups
local -a _network_interfaces_arguments
_network_interfaces_arguments=(
	'update:Update a Google Compute Engine virtual machine network interface.'
)

# groups

__auto-network_interfaces ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine instance network interfaces." _network_interfaces_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine virtual machine instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (network_interfaces)
      __auto-network_interfaces
      ;;
      (add_access_config)
      __auto-add_access_config
      ;;
      (add_labels)
      __auto-add_labels
      ;;
      (add_metadata)
      __auto-add_metadata
      ;;
      (add_tags)
      __auto-add_tags
      ;;
      (attach_disk)
      __auto-attach_disk
      ;;
      (create)
      __auto-create
      ;;
      (create_with_container)
      __auto-create_with_container
      ;;
      (delete)
      __auto-delete
      ;;
      (delete_access_config)
      __auto-delete_access_config
      ;;
      (describe)
      __auto-describe
      ;;
      (detach_disk)
      __auto-detach_disk
      ;;
      (get_serial_port_output)
      __auto-get_serial_port_output
      ;;
      (list)
      __auto-list
      ;;
      (move)
      __auto-move
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (remove_metadata)
      __auto-remove_metadata
      ;;
      (remove_tags)
      __auto-remove_tags
      ;;
      (reset)
      __auto-reset
      ;;
      (set_disk_auto_delete)
      __auto-set_disk_auto_delete
      ;;
      (set_machine_type)
      __auto-set_machine_type
      ;;
      (set_scheduling)
      __auto-set_scheduling
      ;;
      (set_service_account)
      __auto-set_service_account
      ;;
      (simulate_maintenance_event)
      __auto-simulate_maintenance_event
      ;;
      (start)
      __auto-start
      ;;
      (stop)
      __auto-stop
      ;;
      (tail_serial_port_output)
      __auto-tail_serial_port_output
      ;;
      (update)
      __auto-update
      ;;
      (update_access_config)
      __auto-update_access_config
      ;;
      (update_container)
      __auto-update_container
      ;;
    esac
    ;;
	esac
}

local -a _interconnects_arguments
_interconnects_arguments=(
	'attachments:Read and manipulate Google Compute Engine interconnect attachments.'
	'locations:Read and manipulate Google Compute Engine interconnect locations.'
	'create:Create a Google Compute Engine interconnect.'
	'delete:Delete Google Compute Engine interconnects.'
	'describe:Describe a Google Compute Engine interconnect.'
	'list:List Google Compute Engine interconnects.'
	'update:Update a Google Compute Engine interconnect.'
)

# groups
local -a _attachments_arguments
_attachments_arguments=(
	'dedicated:Create or manipulate dedicated interconnect attachments.'
	'partner:Create or manipulate partner interconnect attachments.'
	'delete:Delete interconnects.'
	'describe:Describe a Google Compute Engine interconnect attachment.'
	'list:List Google Compute Engine interconnect attachments.'
)

# groups
local -a _dedicated_arguments
_dedicated_arguments=(
	'create:Create a Google Compute Engine dedicated interconnect attachment.'
	'update:Update a Google Compute Engine dedicated interconnect attachment.'
)

# groups

__auto-dedicated ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create or manipulate dedicated interconnect attachments." _dedicated_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _partner_arguments
_partner_arguments=(
	'create:Create a Google Compute Engine partner interconnect attachment.'
	'update:Update a Google Compute Engine partner interconnect attachment.'
)

# groups

__auto-partner ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create or manipulate partner interconnect attachments." _partner_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-attachments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine interconnect attachments." _attachments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (dedicated)
      __auto-dedicated
      ;;
      (partner)
      __auto-partner
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'describe:Describe a Google Compute Engine interconnect location.'
	'list:List Google Compute Engine interconnect locations.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine interconnect locations." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-interconnects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine interconnects." _interconnects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (attachments)
      __auto-attachments
      ;;
      (locations)
      __auto-locations
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _machine_types_arguments
_machine_types_arguments=(
	'describe:Describe a Google Compute Engine machine type.'
	'list:List Google Compute Engine machine types.'
)

# groups

__auto-machine_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read Google Compute Engine virtual machine types." _machine_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _networks_arguments
_networks_arguments=(
	'peerings:List, create, and delete Google Compute Engine network peerings.'
	'subnets:List, describe, and delete Google Compute Engine subnetworks.'
	'create:Create a Google Compute Engine network.'
	'delete:Delete Google Compute Engine networks.'
	'describe:Describe a Google Compute Engine network.'
	'list:List Google Compute Engine networks.'
	'update:Update a Google Compute Engine network.'
)

# groups
local -a _peerings_arguments
_peerings_arguments=(
	'create:Create a Google Compute Engine network peering.'
	'delete:Delete a Google Compute Engine network peering.'
	'list:List Google Compute Engine peerings.'
)

# groups

__auto-peerings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete Google Compute Engine network peerings." _peerings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _subnets_arguments
_subnets_arguments=(
	'create:Define a subnet for a network in custom subnet mode.'
	'delete:Delete Google Compute Engine subnetworks.'
	'describe:Describe a Google Compute Engine subnetwork.'
	'expand_ip_range:Expand the IP range of a Google Compute Engine subnetwork.'
	'list:List Google Compute Engine subnetworks.'
	'list_usable:List Google Compute Engine subnetworks permitted for use.'
	'update:Updates properties of an existing Google Compute Engine subnetwork.'
)

# groups

__auto-subnets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, describe, and delete Google Compute Engine subnetworks." _subnets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (expand_ip_range)
      __auto-expand_ip_range
      ;;
      (list)
      __auto-list
      ;;
      (list_usable)
      __auto-list_usable
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-networks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete Google Compute Engine networks." _networks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (peerings)
      __auto-peerings
      ;;
      (subnets)
      __auto-subnets
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:Describe a Google Compute Engine operation.'
	'list:List Google Compute Engine operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _os_login_arguments
_os_login_arguments=(
	'ssh_keys:List, add, update, and remove OS Login SSH Keys.'
	'describe_profile:Describe the OS Login profile for the current user.'
	'remove_profile:Remove the posix account information for the current user.'
)

# groups
local -a _ssh_keys_arguments
_ssh_keys_arguments=(
	'add:Add an SSH public key to an OS Login profile.'
	'describe:Describe an SSH Public Key from an OS Login Profile.'
	'list:List SSH public keys from an OS Login profile.'
	'remove:Remove an SSH public key from an OS Login profile.'
	'update:Update an SSH public key in an OS Login profile.'
)

# groups

__auto-ssh_keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, add, update, and remove OS Login SSH Keys." _ssh_keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add)
      __auto-add
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (remove)
      __auto-remove
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-os_login ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manipulate Google Compute Engine OS Login resources." _os_login_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (ssh_keys)
      __auto-ssh_keys
      ;;
      (describe_profile)
      __auto-describe_profile
      ;;
      (remove_profile)
      __auto-remove_profile
      ;;
    esac
    ;;
	esac
}

local -a _project_info_arguments
_project_info_arguments=(
	'add_metadata:Add or update project-wide metadata.'
	'describe:Describe the Google Compute Engine project resource.'
	'remove_metadata:Remove project-wide metadata entries.'
	'set_usage_bucket:Set usage reporting bucket for a project.'
	'update:Update a Google Compute Engine project resource.'
)

# groups

__auto-project_info ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate project-level data like quotas and metadata." _project_info_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_metadata)
      __auto-add_metadata
      ;;
      (describe)
      __auto-describe
      ;;
      (remove_metadata)
      __auto-remove_metadata
      ;;
      (set_usage_bucket)
      __auto-set_usage_bucket
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'describe:Describe a Google Compute Engine region.'
	'list:List Google Compute Engine regions.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List Google Compute Engine regions." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _routers_arguments
_routers_arguments=(
	'add_bgp_peer:Add a BGP peer to a Google Compute Engine router.'
	'add_interface:Add an interface to a Google Compute Engine router.'
	'create:Create a Google Compute Engine router.'
	'delete:Delete Google Compute Engine routers.'
	'describe:Describe a Google Compute Engine router.'
	'get_status:Get status of a Google Compute Engine router.'
	'list:List Google Compute Engine routers.'
	'remove_bgp_peer:Remove a BGP peer from a Google Compute Engine router.'
	'remove_interface:Remove an interface from a Google Compute Engine router.'
	'update:Update a Google Compute Engine router.'
	'update_bgp_peer:Update a BGP peer on a Google Compute Engine router.'
	'update_interface:Update an interface on a Google Compute Engine router.'
)

# groups

__auto-routers ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete Google Compute Engine routers." _routers_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_bgp_peer)
      __auto-add_bgp_peer
      ;;
      (add_interface)
      __auto-add_interface
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_status)
      __auto-get_status
      ;;
      (list)
      __auto-list
      ;;
      (remove_bgp_peer)
      __auto-remove_bgp_peer
      ;;
      (remove_interface)
      __auto-remove_interface
      ;;
      (update)
      __auto-update
      ;;
      (update_bgp_peer)
      __auto-update_bgp_peer
      ;;
      (update_interface)
      __auto-update_interface
      ;;
    esac
    ;;
	esac
}

local -a _routes_arguments
_routes_arguments=(
	'create:Create a new route.'
	'delete:Delete routes.'
	'describe:Describe a route.'
	'list:List Google Compute Engine routes.'
)

# groups

__auto-routes ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate routes." _routes_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _shared_vpc_arguments
_shared_vpc_arguments=(
	'associated_projects:Configure associated projects for cross-project networking (XPN).'
	'organizations:Configure organizations for cross-project networking (XPN).'
	'disable:Disable the given project as a shared VPC host.'
	'enable:Enable the given project as a shared VPC host.'
	'get_host_project:Get the shared VPC host project that the given project is associated with.'
	'list_associated_resources:List the resources associated with the given shared VPC host project.'
)

# groups
local -a _associated_projects_arguments
_associated_projects_arguments=(
	'add:Associate the given project with a given shared VPC host project.'
	'list:List the associated service projects of the given host project.'
	'remove:Disassociate the given project from the given shared VPC host project.'
)

# groups

__auto-associated_projects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Configure associated projects for cross-project networking (XPN)." _associated_projects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add)
      __auto-add
      ;;
      (list)
      __auto-list
      ;;
      (remove)
      __auto-remove
      ;;
    esac
    ;;
	esac
}

local -a _organizations_arguments
_organizations_arguments=(
	'list_host_projects:List shared VPC host projects in a given organization.'
)

# groups

__auto-organizations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Configure organizations for cross-project networking (XPN)." _organizations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list_host_projects)
      __auto-list_host_projects
      ;;
    esac
    ;;
	esac
}


__auto-shared_vpc ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Configure shared VPC." _shared_vpc_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (associated_projects)
      __auto-associated_projects
      ;;
      (organizations)
      __auto-organizations
      ;;
      (disable)
      __auto-disable
      ;;
      (enable)
      __auto-enable
      ;;
      (get_host_project)
      __auto-get_host_project
      ;;
      (list_associated_resources)
      __auto-list_associated_resources
      ;;
    esac
    ;;
	esac
}

local -a _snapshots_arguments
_snapshots_arguments=(
	'add_labels:Add labels to Google Compute Engine snapshots.'
	'delete:Delete Google Compute Engine snapshots.'
	'describe:Describe a Google Compute Engine snapshot.'
	'list:List Google Compute Engine snapshots.'
	'remove_labels:Remove labels from Google Compute Engine snapshots.'
	'update:Update a Google Compute Engine snapshot.'
)

# groups

__auto-snapshots ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, describe, and delete Google Compute Engine snapshots." _snapshots_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_labels)
      __auto-add_labels
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (remove_labels)
      __auto-remove_labels
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _sole_tenancy_arguments
_sole_tenancy_arguments=(
	'node_groups:Read Google Compute Engine sole-tenancy node groups.'
	'node_templates:Read and manage Google Compute Engine sole-tenancy node templates.'
	'node_types:Read Google Compute Engine sole-tenancy node types.'
)

# groups
local -a _node_groups_arguments
_node_groups_arguments=(
	'create:Creates a Google Compute Engine node group.'
	'delete:Deletes a Google Compute Engine node group.'
	'describe:Describes a Google Compute Engine node group.'
	'list:List Google Compute Engine node groups.'
	'list_nodes:List Google Compute Engine sole-tenant nodes present in a node group.'
	'update:Updates a Google Compute Engine node group.'
)

# groups

__auto-node_groups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read Google Compute Engine sole-tenancy node groups." _node_groups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_nodes)
      __auto-list_nodes
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _node_templates_arguments
_node_templates_arguments=(
	'create:Creates a Google Compute Engine node template.'
	'delete:Deletes a Google Compute Engine node template.'
	'describe:Describes a Google Compute Engine node template.'
	'list:List Google Compute Engine node templates.'
)

# groups

__auto-node_templates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manage Google Compute Engine sole-tenancy node templates." _node_templates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _node_types_arguments
_node_types_arguments=(
	'describe:Describes a Google Compute Engine node type.'
	'list:List Google Compute Engine node types.'
)

# groups

__auto-node_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read Google Compute Engine sole-tenancy node types." _node_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-sole_tenancy ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manage Google Compute Engine sole-tenancy resources." _sole_tenancy_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (node_groups)
      __auto-node_groups
      ;;
      (node_templates)
      __auto-node_templates
      ;;
      (node_types)
      __auto-node_types
      ;;
    esac
    ;;
	esac
}

local -a _ssl_certificates_arguments
_ssl_certificates_arguments=(
	'create:Create a Google Compute Engine SSL certificate.'
	'delete:Delete Google Compute Engine SSL certificates.'
	'describe:Describe a Google Compute Engine SSL certificate.'
	'list:List Google Compute Engine SSL certificates.'
)

# groups

__auto-ssl_certificates ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete Google Compute Engine SSL certificates." _ssl_certificates_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _ssl_policies_arguments
_ssl_policies_arguments=(
	'create:Create a new Google Compute Engine SSL policy.'
	'delete:Delete Google Compute Engine SSL policies.'
	'describe:Describe a Google Compute Engine ssl policy.'
	'list:List Google Compute Engine SSL policies.'
	'list_available_features:List available features that can be specified in an SSL policy.'
	'update:Update a Google Compute Engine SSL policy.'
)

# groups

__auto-ssl_policies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, delete and update Google Compute Engine SSL policies." _ssl_policies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_available_features)
      __auto-list_available_features
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_http_proxies_arguments
_target_http_proxies_arguments=(
	'create:Create a target HTTP proxy.'
	'delete:Delete target HTTP proxies.'
	'describe:Display detailed information about a target HTTP proxy.'
	'list:List Google Compute Engine target HTTP proxies.'
	'update:Update a target HTTP proxy.'
)

# groups

__auto-target_http_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete target HTTP proxies." _target_http_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_https_proxies_arguments
_target_https_proxies_arguments=(
	'create:Create a target HTTPS proxy.'
	'delete:Delete target HTTPS proxies.'
	'describe:Display detailed information about a target HTTPS proxy.'
	'list:List Google Compute Engine target HTTPS proxies.'
	'update:Update a target HTTPS proxy.'
)

# groups

__auto-target_https_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete target HTTPS proxies." _target_https_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_instances_arguments
_target_instances_arguments=(
	'create:Create a target instance for handling traffic from a forwarding rule.'
	'delete:Delete target instances.'
	'describe:Describe a target instance.'
	'list:List Google Compute Engine target instances.'
)

# groups

__auto-target_instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine virtual target instances." _target_instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _target_pools_arguments
_target_pools_arguments=(
	'add_health_checks:Add an HTTP health check to a target pool.'
	'add_instances:Add instances to a target pool.'
	'create:Define a load-balanced pool of virtual machine instances.'
	'delete:Delete target pools.'
	'describe:Describe a Google Compute Engine target pool.'
	'get_health:Get the health of instances in a target pool.'
	'list:List Google Compute Engine target pools.'
	'remove_health_checks:Remove an HTTP health check from a target pool.'
	'remove_instances:Remove instances from a target pool.'
	'set_backup:Set a backup pool for a target pool.'
)

# groups

__auto-target_pools ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Control Compute Engine target pools for network load balancing." _target_pools_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_health_checks)
      __auto-add_health_checks
      ;;
      (add_instances)
      __auto-add_instances
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_health)
      __auto-get_health
      ;;
      (list)
      __auto-list
      ;;
      (remove_health_checks)
      __auto-remove_health_checks
      ;;
      (remove_instances)
      __auto-remove_instances
      ;;
      (set_backup)
      __auto-set_backup
      ;;
    esac
    ;;
	esac
}

local -a _target_ssl_proxies_arguments
_target_ssl_proxies_arguments=(
	'create:Create a target SSL proxy.'
	'delete:Delete target SSL proxies.'
	'describe:Display detailed information about a target SSL proxy.'
	'list:List Google Compute Engine target SSL proxies.'
	'update:Update a target SSL proxy.'
)

# groups

__auto-target_ssl_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete target SSL proxies." _target_ssl_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_tcp_proxies_arguments
_target_tcp_proxies_arguments=(
	'create:Create a target TCP proxy.'
	'delete:Delete target TCP proxies.'
	'describe:Display detailed information about a target TCP proxy.'
	'list:List Google Compute Engine target TCP proxies.'
	'update:Update a target TCP proxy.'
)

# groups

__auto-target_tcp_proxies ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete target TCP proxies." _target_tcp_proxies_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _target_vpn_gateways_arguments
_target_vpn_gateways_arguments=(
	'create:Create a target VPN Gateway.'
	'delete:Delete target vpn gateways.'
	'describe:Describe a Google Compute Engine target vpn gateway.'
	'list:List Google Compute Engine target VPN gateways.'
)

# groups

__auto-target_vpn_gateways ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine VPN Gateways." _target_vpn_gateways_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _tpus_arguments
_tpus_arguments=(
	'accelerator_types:List or Describe Available Cloud TPU accelerator types.'
	'locations:List or Describe Available Cloud TPU Locations.'
	'versions:Explore Available Tensorflow versions for Cloud TPUs.'
	'create:Create a new Cloud TPU.'
	'delete:Deletes a Cloud TPU.'
	'describe:Describe a Cloud TPU.'
	'list:List Cloud TPUs.'
	'reimage:Reimages the OS on a Cloud TPU.'
	'start:Start a Cloud TPU.'
	'stop:Stop a Cloud TPU.'
)

# groups
local -a _accelerator_types_arguments
_accelerator_types_arguments=(
	'describe:Describe an accelerator type available for Cloud TPUs.'
	'list:List available accelerator types for Cloud TPUs.'
)

# groups

__auto-accelerator_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List or Describe Available Cloud TPU accelerator types." _accelerator_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'describe:Describe a Cloud TPU Location.'
	'list:List available locations for Cloud TPUs.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List or Describe Available Cloud TPU Locations." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'describe:Describe a Tensorflow version available for Cloud TPUs.'
	'list:List available Tensorflow versions.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Explore Available Tensorflow versions for Cloud TPUs." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-tpus ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete Cloud TPUs." _tpus_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (accelerator_types)
      __auto-accelerator_types
      ;;
      (locations)
      __auto-locations
      ;;
      (versions)
      __auto-versions
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (reimage)
      __auto-reimage
      ;;
      (start)
      __auto-start
      ;;
      (stop)
      __auto-stop
      ;;
    esac
    ;;
	esac
}

local -a _url_maps_arguments
_url_maps_arguments=(
	'add_host_rule:Add a rule to a URL map to map hosts to a path matcher.'
	'add_path_matcher:Add a path matcher to a URL map.'
	'create:Create a URL map.'
	'delete:Delete URL maps.'
	'describe:Describe a URL map.'
	'edit:Modify URL maps.'
	'invalidate_cdn_cache:Invalidate specified objects for a URL map in Cloud CDN caches.'
	'list:List Google Compute Engine URL maps.'
	'list_cdn_cache_invalidations:List Cloud CDN cache invalidations for a URL map.'
	'remove_host_rule:Remove a host rule from a URL map.'
	'remove_path_matcher:Remove a path matcher from a URL map.'
	'set_default_service:Change the default service or default bucket of a URL map.'
)

# groups

__auto-url_maps ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, create, and delete URL maps." _url_maps_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_host_rule)
      __auto-add_host_rule
      ;;
      (add_path_matcher)
      __auto-add_path_matcher
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (edit)
      __auto-edit
      ;;
      (invalidate_cdn_cache)
      __auto-invalidate_cdn_cache
      ;;
      (list)
      __auto-list
      ;;
      (list_cdn_cache_invalidations)
      __auto-list_cdn_cache_invalidations
      ;;
      (remove_host_rule)
      __auto-remove_host_rule
      ;;
      (remove_path_matcher)
      __auto-remove_path_matcher
      ;;
      (set_default_service)
      __auto-set_default_service
      ;;
    esac
    ;;
	esac
}

local -a _vpn_tunnels_arguments
_vpn_tunnels_arguments=(
	'create:Create a VPN tunnel.'
	'delete:Delete vpn tunnels.'
	'describe:Describe a Google Compute Engine vpn tunnel.'
	'list:List Google Compute Engine VPN tunnels.'
)

# groups

__auto-vpn_tunnels ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Read and manipulate Google Compute Engine VPN Tunnels." _vpn_tunnels_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _zones_arguments
_zones_arguments=(
	'describe:Describe a Google Compute Engine zone.'
	'list:List Google Compute Engine zones.'
)

# groups

__auto-zones ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List Google Compute Engine zones." _zones_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-compute ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manipulate Google Compute Engine resources." _compute_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (accelerator_types)
      __auto-accelerator_types
      ;;
      (addresses)
      __auto-addresses
      ;;
      (backend_buckets)
      __auto-backend_buckets
      ;;
      (backend_services)
      __auto-backend_services
      ;;
      (commitments)
      __auto-commitments
      ;;
      (disk_types)
      __auto-disk_types
      ;;
      (disks)
      __auto-disks
      ;;
      (firewall_rules)
      __auto-firewall_rules
      ;;
      (forwarding_rules)
      __auto-forwarding_rules
      ;;
      (health_checks)
      __auto-health_checks
      ;;
      (http_health_checks)
      __auto-http_health_checks
      ;;
      (https_health_checks)
      __auto-https_health_checks
      ;;
      (images)
      __auto-images
      ;;
      (instance_groups)
      __auto-instance_groups
      ;;
      (instance_templates)
      __auto-instance_templates
      ;;
      (instances)
      __auto-instances
      ;;
      (interconnects)
      __auto-interconnects
      ;;
      (machine_types)
      __auto-machine_types
      ;;
      (networks)
      __auto-networks
      ;;
      (operations)
      __auto-operations
      ;;
      (os_login)
      __auto-os_login
      ;;
      (project_info)
      __auto-project_info
      ;;
      (regions)
      __auto-regions
      ;;
      (routers)
      __auto-routers
      ;;
      (routes)
      __auto-routes
      ;;
      (shared_vpc)
      __auto-shared_vpc
      ;;
      (snapshots)
      __auto-snapshots
      ;;
      (sole_tenancy)
      __auto-sole_tenancy
      ;;
      (ssl_certificates)
      __auto-ssl_certificates
      ;;
      (ssl_policies)
      __auto-ssl_policies
      ;;
      (target_http_proxies)
      __auto-target_http_proxies
      ;;
      (target_https_proxies)
      __auto-target_https_proxies
      ;;
      (target_instances)
      __auto-target_instances
      ;;
      (target_pools)
      __auto-target_pools
      ;;
      (target_ssl_proxies)
      __auto-target_ssl_proxies
      ;;
      (target_tcp_proxies)
      __auto-target_tcp_proxies
      ;;
      (target_vpn_gateways)
      __auto-target_vpn_gateways
      ;;
      (tpus)
      __auto-tpus
      ;;
      (url_maps)
      __auto-url_maps
      ;;
      (vpn_tunnels)
      __auto-vpn_tunnels
      ;;
      (zones)
      __auto-zones
      ;;
      (config_ssh)
      __auto-config_ssh
      ;;
      (connect_to_serial_port)
      __auto-connect_to_serial_port
      ;;
      (copy_files)
      __auto-copy_files
      ;;
      (reset_windows_password)
      __auto-reset_windows_password
      ;;
      (scp)
      __auto-scp
      ;;
      (sign_url)
      __auto-sign_url
      ;;
      (ssh)
      __auto-ssh
      ;;
    esac
    ;;
	esac
}

local -a _config_arguments
_config_arguments=(
	'configurations:Manage the set of gcloud named configurations.'
	'get_value:Print the value of a Cloud SDK property.'
	'list:List Cloud SDK properties for the currently active configuration.'
	'set:Set a Cloud SDK property.'
	'unset:Unset a Cloud SDK property.'
)

# groups
local -a _configurations_arguments
_configurations_arguments=(
	'activate:Activates an existing named configuration.'
	'create:Creates a new named configuration.'
	'delete:Deletes a named configuration.'
	'describe:Describes a named configuration by listing its properties.'
	'list:Lists existing named configurations.'
)

# groups

__auto-configurations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage the set of gcloud named configurations." _configurations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (activate)
      __auto-activate
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-config ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View and edit Cloud SDK properties." _config_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configurations)
      __auto-configurations
      ;;
      (get_value)
      __auto-get_value
      ;;
      (list)
      __auto-list
      ;;
      (set)
      __auto-set
      ;;
      (unset)
      __auto-unset
      ;;
    esac
    ;;
	esac
}

local -a _container_arguments
_container_arguments=(
	'builds:(DEPRECATED) Create and manage builds.'
	'clusters:Deploy and teardown Google Kubernetes Engine clusters.'
	'images:List and manipulate Google Container Registry images.'
	'node_pools:Create and delete operations for Google Kubernetes Engine node pools.'
	'operations:Get and list operations for Google Kubernetes Engine clusters.'
	'get_server_config:Get Kubernetes Engine server config.'
)

# groups
local -a _builds_arguments
_builds_arguments=(
	'cancel:(DEPRECATED) Cancel an ongoing build.'
	'describe:(DEPRECATED) Get information about a particular build.'
	'list:(DEPRECATED) List builds.'
	'log:(DEPRECATED) Stream the logs for a build.'
	'submit:(DEPRECATED) Submit a build using the Google Cloud Build service.'
)

# groups

__auto-builds ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(DEPRECATED) Create and manage builds." _builds_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (log)
      __auto-log
      ;;
      (submit)
      __auto-submit
      ;;
    esac
    ;;
	esac
}

local -a _clusters_arguments
_clusters_arguments=(
	'create:Create a cluster for running containers.'
	'delete:Delete an existing cluster for running containers.'
	'describe:Describe an existing cluster for running containers.'
	'get_credentials:Fetch credentials for a running cluster.'
	'list:List existing clusters for running containers.'
	'resize:Resizes an existing cluster for running containers.'
	'update:Update cluster settings for an existing container cluster.'
	'upgrade:Upgrade the Kubernetes version of an existing container cluster.'
)

# groups

__auto-clusters ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Deploy and teardown Google Kubernetes Engine clusters." _clusters_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_credentials)
      __auto-get_credentials
      ;;
      (list)
      __auto-list
      ;;
      (resize)
      __auto-resize
      ;;
      (update)
      __auto-update
      ;;
      (upgrade)
      __auto-upgrade
      ;;
    esac
    ;;
	esac
}

local -a _images_arguments
_images_arguments=(
	'add_tag:Adds tags to existing image.'
	'delete:Delete existing images.'
	'describe:Lists information about the specified image.'
	'list:List existing images.'
	'list_tags:List tags and digests for the specified image.'
	'untag:Remove existing image tags.'
)

# groups

__auto-images ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List and manipulate Google Container Registry images." _images_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_tag)
      __auto-add_tag
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_tags)
      __auto-list_tags
      ;;
      (untag)
      __auto-untag
      ;;
    esac
    ;;
	esac
}

local -a _node_pools_arguments
_node_pools_arguments=(
	'create:Create a node pool in a running cluster.'
	'delete:Delete an existing node pool in a running cluster.'
	'describe:Describe an existing node pool for a cluster.'
	'list:List existing node pools for a cluster.'
	'rollback:Rollback a node-pool upgrade.'
	'update:Updates a node pool in a running cluster.'
)

# groups

__auto-node_pools ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and delete operations for Google Kubernetes Engine node pools." _node_pools_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (rollback)
      __auto-rollback
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:Describe an operation.'
	'list:List operations for container clusters.'
	'wait:Poll an operation for completion.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Get and list operations for Google Kubernetes Engine clusters." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-container ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Deploy and manage clusters of machines for running containers." _container_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (builds)
      __auto-builds
      ;;
      (clusters)
      __auto-clusters
      ;;
      (images)
      __auto-images
      ;;
      (node_pools)
      __auto-node_pools
      ;;
      (operations)
      __auto-operations
      ;;
      (get_server_config)
      __auto-get_server_config
      ;;
    esac
    ;;
	esac
}

local -a _dataflow_arguments
_dataflow_arguments=(
	'jobs:A group of subcommands for working with Dataflow jobs.'
)

# groups
local -a _jobs_arguments
_jobs_arguments=(
	'cancel:Cancels all jobs that match the command line arguments.'
	'describe:Outputs the Job object resulting from the Get API.'
	'drain:Drains all jobs that match the command line arguments.'
	'list:Lists all jobs in a particular project, optionally filtered by region.'
	'run:Runs a job from the specified path.'
	'show:Shows a short description of the given job.'
)

# groups

__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "A group of subcommands for working with Dataflow jobs." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (drain)
      __auto-drain
      ;;
      (list)
      __auto-list
      ;;
      (run)
      __auto-run
      ;;
      (show)
      __auto-show
      ;;
    esac
    ;;
	esac
}


__auto-dataflow ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Google Cloud Dataflow jobs." _dataflow_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (jobs)
      __auto-jobs
      ;;
    esac
    ;;
	esac
}

local -a _dataproc_arguments
_dataproc_arguments=(
	'clusters:Create and manage Google Cloud Dataproc clusters.'
	'jobs:Submit and manage Google Cloud Dataproc jobs.'
	'operations:View and manage Google Cloud Dataproc operations.'
)

# groups
local -a _clusters_arguments
_clusters_arguments=(
	'create:Create a cluster.'
	'delete:Delete a cluster.'
	'describe:View the details of a cluster.'
	'diagnose:Run a detailed diagnostic on a cluster.'
	'list:View a list of clusters in a project.'
	'update:Update labels and/or the number of worker nodes in a cluster.'
)

# groups

__auto-clusters ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage Google Cloud Dataproc clusters." _clusters_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (diagnose)
      __auto-diagnose
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _jobs_arguments
_jobs_arguments=(
	'submit:Submit Google Cloud Dataproc jobs to execute on a cluster.'
	'delete:Delete the record of an inactive job.'
	'describe:View the details of a job.'
	'kill:Kill an active job.'
	'list:List jobs in a project.'
	'update:Update the labels for a job.'
	'wait:View the output of a job as it runs or after it completes.'
)

# groups
local -a _submit_arguments
_submit_arguments=(
	'hadoop:Submit a Hadoop job to a cluster.'
	'hive:Submit a Hive job to a cluster.'
	'pig:Submit a Pig job to a cluster.'
	'pyspark:Submit a PySpark job to a cluster.'
	'spark:Submit a Spark job to a cluster.'
	'spark_sql:Submit a Spark SQL job to a cluster.'
)

# groups

__auto-submit ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Submit Google Cloud Dataproc jobs to execute on a cluster." _submit_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (hadoop)
      __auto-hadoop
      ;;
      (hive)
      __auto-hive
      ;;
      (pig)
      __auto-pig
      ;;
      (pyspark)
      __auto-pyspark
      ;;
      (spark)
      __auto-spark
      ;;
      (spark_sql)
      __auto-spark_sql
      ;;
    esac
    ;;
	esac
}


__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Submit and manage Google Cloud Dataproc jobs." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (submit)
      __auto-submit
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (kill)
      __auto-kill
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:Cancel an active operation.'
	'delete:Delete the record of an inactive operation.'
	'describe:View the details of an operation.'
	'list:View the list of all operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View and manage Google Cloud Dataproc operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-dataproc ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage Google Cloud Dataproc clusters and jobs." _dataproc_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clusters)
      __auto-clusters
      ;;
      (jobs)
      __auto-jobs
      ;;
      (operations)
      __auto-operations
      ;;
    esac
    ;;
	esac
}

local -a _datastore_arguments
_datastore_arguments=(
	'indexes:Manage Cloud Datastore indexes.'
	'operations:Manage Long Running Operations for Cloud Datastore.'
	'cleanup_indexes:(DEPRECATED) Remove unused datastore indexes based on your local
index configuration.'
	'create_indexes:(DEPRECATED) Create new datastore indexes based on your local index
configuration.'
	'export:Export Cloud Datastore entities to Google Cloud Storage.'
	'import:Import Cloud Datastore entities from Google Cloud Storage.'
)

# groups
local -a _indexes_arguments
_indexes_arguments=(
	'cleanup:Remove unused datastore indexes based on your local index configuration.'
	'create:Create new datastore indexes based on your local index configuration.'
	'describe:Show details about an Cloud Datastore index.'
	'list:List Cloud Datastore indexes.'
)

# groups

__auto-indexes ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Datastore indexes." _indexes_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cleanup)
      __auto-cleanup
      ;;
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:Cancel a currently-running Cloud Datastore admin operation.'
	'delete:Delete a completed Cloud Datastore admin operation.'
	'describe:Retrieves information about a Cloud Datastore admin operation.'
	'list:List pending Cloud Datastore admin operations and their status.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Long Running Operations for Cloud Datastore." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-datastore ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage your Cloud Datastore indexes." _datastore_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (indexes)
      __auto-indexes
      ;;
      (operations)
      __auto-operations
      ;;
      (cleanup_indexes)
      __auto-cleanup_indexes
      ;;
      (create_indexes)
      __auto-create_indexes
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
    esac
    ;;
	esac
}

local -a _debug_arguments
_debug_arguments=(
	'logpoints:Commands for interacting with Cloud Debugger logpoints.'
	'snapshots:Commands for interacting with Cloud Debugger snapshots.'
	'source:Commands to manage source information for Stackdriver tools.'
	'targets:Commands for interacting with Cloud Debugger debug targets.'
)

# groups
local -a _logpoints_arguments
_logpoints_arguments=(
	'create:Create debug logpoints.'
	'delete:Delete debug logpoints.'
	'list:List debug logpoints.'
)

# groups

__auto-logpoints ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands for interacting with Cloud Debugger logpoints." _logpoints_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _snapshots_arguments
_snapshots_arguments=(
	'create:Create debug snapshots.'
	'delete:Delete debug snapshots.'
	'describe:Describe debug snapshots.'
	'list:List debug snapshots.'
	'wait:Wait for debug snapshots to complete.'
)

# groups

__auto-snapshots ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands for interacting with Cloud Debugger snapshots." _snapshots_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _source_arguments
_source_arguments=(
	'gen_repo_info_file:Generates repository information files for the Stackdriver Debugger.'
)

# groups

__auto-source ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands to manage source information for Stackdriver tools." _source_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (gen_repo_info_file)
      __auto-gen_repo_info_file
      ;;
    esac
    ;;
	esac
}

local -a _targets_arguments
_targets_arguments=(
	'list:List debug targets.'
)

# groups

__auto-targets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands for interacting with Cloud Debugger debug targets." _targets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-debug ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands for interacting with the Cloud Debugger." _debug_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (logpoints)
      __auto-logpoints
      ;;
      (snapshots)
      __auto-snapshots
      ;;
      (source)
      __auto-source
      ;;
      (targets)
      __auto-targets
      ;;
    esac
    ;;
	esac
}

local -a _deployment_manager_arguments
_deployment_manager_arguments=(
	'deployments:Commands for Deployment Manager deployments.'
	'manifests:Commands for Deployment Manager manifests.'
	'operations:Commands for Deployment Manager operations.'
	'resources:Commands for Deployment Manager resources.'
	'types:Commands for Deployment Manager types.'
)

# groups
local -a _deployments_arguments
_deployments_arguments=(
	'cancel_preview:Cancel a pending or running deployment preview.'
	'create:Create a deployment.'
	'delete:Delete a deployment.'
	'describe:Provide information about a deployment.'
	'list:List deployments in a project.'
	'stop:Stop a pending or running deployment update or creation.'
	'update:Update a deployment based on a provided config file.'
)

# groups

__auto-deployments ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands for Deployment Manager deployments." _deployments_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel_preview)
      __auto-cancel_preview
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (stop)
      __auto-stop
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _manifests_arguments
_manifests_arguments=(
	'describe:Provide information about a manifest.'
	'list:List manifests in a deployment.'
)

# groups

__auto-manifests ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands for Deployment Manager manifests." _manifests_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:Provide information about an operation.'
	'list:List operations in a project.'
	'wait:Wait for all operations specified to complete before returning.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands for Deployment Manager operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _resources_arguments
_resources_arguments=(
	'describe:Provide information about a resource.'
	'list:List resources in a deployment.'
)

# groups

__auto-resources ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands for Deployment Manager resources." _resources_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _types_arguments
_types_arguments=(
	'list:List types in a project.'
)

# groups

__auto-types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Commands for Deployment Manager types." _types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-deployment_manager ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage deployments of cloud resources." _deployment_manager_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (deployments)
      __auto-deployments
      ;;
      (manifests)
      __auto-manifests
      ;;
      (operations)
      __auto-operations
      ;;
      (resources)
      __auto-resources
      ;;
      (types)
      __auto-types
      ;;
    esac
    ;;
	esac
}

local -a _dns_arguments
_dns_arguments=(
	'dns_keys:Manage Cloud DNS DNSKEY records.'
	'managed_zones:Manage your Cloud DNS managed-zones.'
	'operations:Manage your Cloud DNS operations.'
	'project_info:View Cloud DNS related information for a project.'
	'record_sets:Manage the record-sets within your managed-zones.'
)

# groups
local -a _dns_keys_arguments
_dns_keys_arguments=(
	'describe:Show details about a DNS key resource.'
	'list:List DNS key resources.'
)

# groups

__auto-dns_keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud DNS DNSKEY records." _dns_keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _managed_zones_arguments
_managed_zones_arguments=(
	'create:Create a Cloud DNS managed-zone.'
	'delete:Delete an empty Cloud DNS managed-zone.'
	'describe:View the details of a Cloud DNS managed-zone.'
	'list:View the list of all your managed-zones.'
	'update:Update an existing Cloud DNS managed-zone.'
)

# groups

__auto-managed_zones ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage your Cloud DNS managed-zones." _managed_zones_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:Describe an operation.'
	'list:List Cloud DNS operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage your Cloud DNS operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _project_info_arguments
_project_info_arguments=(
	'describe:View Cloud DNS related information for a project.'
)

# groups

__auto-project_info ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View Cloud DNS related information for a project." _project_info_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
    esac
    ;;
	esac
}

local -a _record_sets_arguments
_record_sets_arguments=(
	'changes:View details about changes to your Cloud DNS record-sets.'
	'transaction:Make scriptable and transactional changes to your record-sets.'
	'export:Export your record-sets into a file.'
	'import:Import record-sets into your managed-zone.'
	'list:View the list of record-sets in a managed-zone.'
)

# groups
local -a _changes_arguments
_changes_arguments=(
	'describe:View the details of a change.'
	'list:View the list of changes that have been made to your record-sets.'
)

# groups

__auto-changes ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View details about changes to your Cloud DNS record-sets." _changes_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _transaction_arguments
_transaction_arguments=(
	'abort:Abort transaction.'
	'add:Append a record-set addition to the transaction.'
	'describe:Describe the transaction.'
	'execute:Execute the transaction on Cloud DNS.'
	'remove:Append a record-set deletion to the transaction.'
	'start:Start a transaction.'
)

# groups

__auto-transaction ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Make scriptable and transactional changes to your record-sets." _transaction_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (abort)
      __auto-abort
      ;;
      (add)
      __auto-add
      ;;
      (describe)
      __auto-describe
      ;;
      (execute)
      __auto-execute
      ;;
      (remove)
      __auto-remove
      ;;
      (start)
      __auto-start
      ;;
    esac
    ;;
	esac
}


__auto-record_sets ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage the record-sets within your managed-zones." _record_sets_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (changes)
      __auto-changes
      ;;
      (transaction)
      __auto-transaction
      ;;
      (export)
      __auto-export
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-dns ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage your Cloud DNS managed-zones and record-sets." _dns_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (dns_keys)
      __auto-dns_keys
      ;;
      (managed_zones)
      __auto-managed_zones
      ;;
      (operations)
      __auto-operations
      ;;
      (project_info)
      __auto-project_info
      ;;
      (record_sets)
      __auto-record_sets
      ;;
    esac
    ;;
	esac
}

local -a _domains_arguments
_domains_arguments=(
	'list_user_verified:Lists the user&#39;s verified domains.'
	'verify:Verifies a domain via an in-browser workflow.'
)

# groups

__auto-domains ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage domains for your Google Cloud projects." _domains_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list_user_verified)
      __auto-list_user_verified
      ;;
      (verify)
      __auto-verify
      ;;
    esac
    ;;
	esac
}

local -a _endpoints_arguments
_endpoints_arguments=(
	'configs:View configurations for various services.'
	'operations:Manage Operation for various services.'
	'services:Manage Services.'
)

# groups
local -a _configs_arguments
_configs_arguments=(
	'describe:Describes the configuration for a given version of a service.'
	'list:Lists the configurations for a given service.'
)

# groups

__auto-configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View configurations for various services." _configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:Describes an operation resource for a given operation name.'
	'list:List operations for a project.'
	'wait:Waits for an operation to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Operation for various services." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _services_arguments
_services_arguments=(
	'add_iam_policy_binding:Add IAM policy binding for a service.'
	'check_iam_policy:Returns information about a member&#39;s permissions on a service.'
	'delete:Deletes a service from Google Service Management.'
	'deploy:Deploys a service configuration for the given service name.'
	'describe:Describes a service given a service name.'
	'get_iam_policy:Describes the IAM policy for a service.'
	'list:List services for a project.'
	'remove_iam_policy_binding:Remove IAM policy binding for a service.'
	'undelete:Undeletes a service configuration that was previously deleted.'
)

# groups

__auto-services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Services." _services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (check_iam_policy)
      __auto-check_iam_policy
      ;;
      (delete)
      __auto-delete
      ;;
      (deploy)
      __auto-deploy
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (undelete)
      __auto-undelete
      ;;
    esac
    ;;
	esac
}


__auto-endpoints ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create, enable and manage API services." _endpoints_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configs)
      __auto-configs
      ;;
      (operations)
      __auto-operations
      ;;
      (services)
      __auto-services
      ;;
    esac
    ;;
	esac
}

local -a _firebase_arguments
_firebase_arguments=(
	'test:Interact with Firebase Test Lab.'
)

# groups
local -a _test_arguments
_test_arguments=(
	'android:Command group for Android application testing.'
	'network_profiles:Explore network profiles available for testing.'
)

# groups
local -a _android_arguments
_android_arguments=(
	'locales:Explore Android locales available for testing.'
	'models:Explore Android models available in the Test Environment catalog.'
	'versions:Explore Android versions available for testing.'
	'run:Invoke a test in Firebase Test Lab for Android and view test results.'
)

# groups
local -a _locales_arguments
_locales_arguments=(
	'describe:Describe an Android locale.'
	'list:List all Android locales available for testing internationalized apps.'
)

# groups

__auto-locales ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Explore Android locales available for testing." _locales_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _models_arguments
_models_arguments=(
	'describe:Describe an Android model.'
	'list:List all Android models available for testing.'
)

# groups

__auto-models ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Explore Android models available in the Test Environment catalog." _models_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'describe:Describe an Android OS version.'
	'list:List all Android OS versions available for testing.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Explore Android versions available for testing." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-android ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Command group for Android application testing." _android_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (locales)
      __auto-locales
      ;;
      (models)
      __auto-models
      ;;
      (versions)
      __auto-versions
      ;;
      (run)
      __auto-run
      ;;
    esac
    ;;
	esac
}

local -a _network_profiles_arguments
_network_profiles_arguments=(
	'describe:Describe a network profile.'
	'list:List all network profiles available for testing.'
)

# groups

__auto-network_profiles ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Explore network profiles available for testing." _network_profiles_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-test ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Interact with Firebase Test Lab." _test_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (android)
      __auto-android
      ;;
      (network_profiles)
      __auto-network_profiles
      ;;
    esac
    ;;
	esac
}


__auto-firebase ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Work with Google Firebase." _firebase_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (test)
      __auto-test
      ;;
    esac
    ;;
	esac
}

local -a _functions_arguments
_functions_arguments=(
	'event_types:List types of events that can be a trigger for a Google Cloud Function.'
	'logs:Display log entries produced by Google Cloud Functions.'
	'regions:List regions available to Google Cloud Functions.'
	'call:Trigger execution of a Google Cloud Function.'
	'delete:Delete a Google Cloud Function.'
	'deploy:Create or update a Google Cloud Function.'
	'describe:Display details of a Google Cloud Function.'
	'list:List Google Cloud Functions.'
)

# groups
local -a _event_types_arguments
_event_types_arguments=(
	'list:List types of events that can be a trigger for a Google Cloud Function.'
)

# groups

__auto-event_types ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List types of events that can be a trigger for a Google Cloud Function." _event_types_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _logs_arguments
_logs_arguments=(
	'read:Display log entries produced by Google Cloud Functions.'
)

# groups

__auto-logs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Display log entries produced by Google Cloud Functions." _logs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (read)
      __auto-read
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'list:List regions available to Google Cloud Functions.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List regions available to Google Cloud Functions." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-functions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Google Cloud Functions." _functions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (event_types)
      __auto-event_types
      ;;
      (logs)
      __auto-logs
      ;;
      (regions)
      __auto-regions
      ;;
      (call)
      __auto-call
      ;;
      (delete)
      __auto-delete
      ;;
      (deploy)
      __auto-deploy
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _iam_arguments
_iam_arguments=(
	'roles:Create and manipulate roles.'
	'service_accounts:Create and manipulate service accounts.'
	'list_grantable_roles:List IAM grantable roles for a resource.'
	'list_testable_permissions:List IAM testable permissions for a resource.'
)

# groups
local -a _roles_arguments
_roles_arguments=(
	'copy:Create a role from an existing role.'
	'create:Create a custom role for a project or an organization.'
	'delete:Delete a custom role from an organization or a project.'
	'describe:Show metadata for a role.'
	'list:List the roles defined at a parent organization or a project.'
	'undelete:Undelete a custom role from an organization or a project.'
	'update:Update an IAM custom role.'
)

# groups

__auto-roles ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manipulate roles." _roles_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (copy)
      __auto-copy
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (undelete)
      __auto-undelete
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _service_accounts_arguments
_service_accounts_arguments=(
	'keys:Manage service account keys.'
	'add_iam_policy_binding:Add IAM policy binding for a service account.'
	'create:Create a service account for a project.'
	'delete:Delete a service account from a project.'
	'describe:Show metadata for a service account from a project.'
	'get_iam_policy:Get the IAM policy for a service account.'
	'list:List all of a project&#39;s service accounts.'
	'remove_iam_policy_binding:Remove IAM policy binding for a service account.'
	'set_iam_policy:Set IAM policy for a service account.'
	'sign_blob:Sign a blob with a managed service account key.'
	'update:Update an IAM service account.'
)

# groups
local -a _keys_arguments
_keys_arguments=(
	'create:Create a private key for a service account.'
	'delete:Delete a user-managed key from a service account.'
	'list:List the keys for a service account.'
)

# groups

__auto-keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage service account keys." _keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-service_accounts ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manipulate service accounts." _service_accounts_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (keys)
      __auto-keys
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (sign_blob)
      __auto-sign_blob
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-iam ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage IAM service accounts and keys." _iam_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (roles)
      __auto-roles
      ;;
      (service_accounts)
      __auto-service_accounts
      ;;
      (list_grantable_roles)
      __auto-list_grantable_roles
      ;;
      (list_testable_permissions)
      __auto-list_testable_permissions
      ;;
    esac
    ;;
	esac
}

local -a _iot_arguments
_iot_arguments=(
	'devices:Manage Cloud IoT Devices.'
	'registries:Manage Cloud IoT Registries.'
)

# groups
local -a _devices_arguments
_devices_arguments=(
	'configs:Manage configurations for Cloud IoT devices.'
	'credentials:Manage credentials for Cloud IoT devices.'
	'states:Manage states for Cloud IoT devices.'
	'create:Create a new device.'
	'delete:Delete a device.'
	'describe:Show details about a device.'
	'list:List devices.'
	'update:Update an existing device.'
)

# groups
local -a _configs_arguments
_configs_arguments=(
	'describe:Show details about the latest configuration for a device.'
	'get_value:Show the binary data of a device&#39;s latest configuration.'
	'list:List configs for a device.'
	'update:Update a specific device configuration.'
)

# groups

__auto-configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage configurations for Cloud IoT devices." _configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (get_value)
      __auto-get_value
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _credentials_arguments
_credentials_arguments=(
	'clear:Delete all credentials from a device.'
	'create:Add a new credential to a device.'
	'delete:Delete a credential from a device.'
	'describe:Show details about a specific device credential.'
	'list:List credentials for a device.'
	'update:Update a specific device credential.'
)

# groups

__auto-credentials ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage credentials for Cloud IoT devices." _credentials_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clear)
      __auto-clear
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _states_arguments
_states_arguments=(
	'list:List states for a device.'
)

# groups

__auto-states ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage states for Cloud IoT devices." _states_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-devices ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud IoT Devices." _devices_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (configs)
      __auto-configs
      ;;
      (credentials)
      __auto-credentials
      ;;
      (states)
      __auto-states
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _registries_arguments
_registries_arguments=(
	'credentials:Manage credentials for Cloud IoT devices.'
	'create:Create a new device registry.'
	'delete:Delete a device registry.'
	'describe:Show details about a device registry.'
	'get_iam_policy:Get the IAM policy for a device registry.'
	'list:List device registries.'
	'set_iam_policy:Set IAM policy for a device registry.'
	'update:Update a device registry.'
)

# groups
local -a _credentials_arguments
_credentials_arguments=(
	'clear:Delete all credentials from a registry.'
	'create:Add a new credential to a registry.'
	'delete:Delete a credential from a registry.'
	'describe:Show details about a specific registry credential.'
	'list:List credentials for a registry.'
)

# groups

__auto-credentials ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage credentials for Cloud IoT devices." _credentials_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clear)
      __auto-clear
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-registries ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud IoT Registries." _registries_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (credentials)
      __auto-credentials
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-iot ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud IoT resources." _iot_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (devices)
      __auto-devices
      ;;
      (registries)
      __auto-registries
      ;;
    esac
    ;;
	esac
}

local -a _kms_arguments
_kms_arguments=(
	'keyrings:Create and manage keyrings.'
	'keys:Create and manage keys.'
	'locations:View locations available for a project.'
	'decrypt:Decrypt a ciphertext file using a Cloud KMS key.'
	'encrypt:Encrypt a plaintext file using a key.'
)

# groups
local -a _keyrings_arguments
_keyrings_arguments=(
	'add_iam_policy_binding:Add IAM policy binding to a keyring.'
	'create:Create a new keyring.'
	'describe:Get metadata for a keyring.'
	'get_iam_policy:Get the IAM policy for a keyring.'
	'list:List keyrings within a location.'
	'remove_iam_policy_binding:Remove a policy binding from a keyring.'
	'set_iam_policy:Set the IAM policy for a keyring.'
)

# groups

__auto-keyrings ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage keyrings." _keyrings_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _keys_arguments
_keys_arguments=(
	'versions:Create and manage versions.'
	'add_iam_policy_binding:Add IAM policy binding to a key.'
	'create:Create a new key.'
	'describe:Get metadata for a given key.'
	'get_iam_policy:Get the IAM policy for a key.'
	'list:List the keys within a keyring.'
	'remove_iam_policy_binding:Remove an IAM policy binding from a key.'
	'remove_rotation_schedule:Remove the rotation schedule for a key.'
	'set_iam_policy:Set the IAM policy for a key.'
	'set_primary_version:Set the primary version of a key.'
	'set_rotation_schedule:Update the rotation schedule for a key.'
	'update:Update a key.'
)

# groups
local -a _versions_arguments
_versions_arguments=(
	'create:Create a new version.'
	'describe:Get metadata for a given version.'
	'destroy:Schedule a version to be destroyed.'
	'disable:Disable a given version.'
	'enable:Enable a given version.'
	'list:List the versions within a key.'
	'restore:Restore a version scheduled for destruction.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage versions." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (destroy)
      __auto-destroy
      ;;
      (disable)
      __auto-disable
      ;;
      (enable)
      __auto-enable
      ;;
      (list)
      __auto-list
      ;;
      (restore)
      __auto-restore
      ;;
    esac
    ;;
	esac
}


__auto-keys ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage keys." _keys_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (versions)
      __auto-versions
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (remove_rotation_schedule)
      __auto-remove_rotation_schedule
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (set_primary_version)
      __auto-set_primary_version
      ;;
      (set_rotation_schedule)
      __auto-set_rotation_schedule
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _locations_arguments
_locations_arguments=(
	'list:List the project&#39;s locations.'
)

# groups

__auto-locations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "View locations available for a project." _locations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-kms ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage cryptographic keys in the cloud." _kms_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (keyrings)
      __auto-keyrings
      ;;
      (keys)
      __auto-keys
      ;;
      (locations)
      __auto-locations
      ;;
      (decrypt)
      __auto-decrypt
      ;;
      (encrypt)
      __auto-encrypt
      ;;
    esac
    ;;
	esac
}

local -a _logging_arguments
_logging_arguments=(
	'logs:Manages your project&#39;s logs.'
	'metrics:Manages logs-based metrics.'
	'resource_descriptors:Get information about resource descriptors.'
	'sinks:Manages sinks used to export logs.'
	'read:Read log entries.'
	'write:Write a log entry.'
)

# groups
local -a _logs_arguments
_logs_arguments=(
	'delete:Deletes all entries from a log.'
	'list:Lists your project&#39;s logs.'
)

# groups

__auto-logs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manages your project&#39;s logs." _logs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _metrics_arguments
_metrics_arguments=(
	'create:Creates a logs-based metric.'
	'delete:Deletes a logs-based metric.'
	'describe:Shows the definition of a logs-based metric.'
	'list:Displays all logs-based metrics.'
	'update:Updates the definition of a logs-based metric.'
)

# groups

__auto-metrics ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manages logs-based metrics." _metrics_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _resource_descriptors_arguments
_resource_descriptors_arguments=(
	'list:Lists all available resource descriptors.'
)

# groups

__auto-resource_descriptors ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Get information about resource descriptors." _resource_descriptors_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _sinks_arguments
_sinks_arguments=(
	'create:Creates a sink.'
	'delete:Deletes a sink.'
	'describe:Displays information about a sink.'
	'list:Lists the defined sinks.'
	'update:Updates a sink.'
)

# groups

__auto-sinks ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manages sinks used to export logs." _sinks_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-logging ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Stackdriver Logging." _logging_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (logs)
      __auto-logs
      ;;
      (metrics)
      __auto-metrics
      ;;
      (resource_descriptors)
      __auto-resource_descriptors
      ;;
      (sinks)
      __auto-sinks
      ;;
      (read)
      __auto-read
      ;;
      (write)
      __auto-write
      ;;
    esac
    ;;
	esac
}

local -a _ml_arguments
_ml_arguments=(
	'language:Use the Google Cloud Natural Language API to analyze text.'
	'speech:Use Google Cloud Speech to get transcripts of audio.'
	'video:Cloud ML Video-Intelligence command groups.'
	'vision:Use Google Cloud Vision to analyze images.'
)

# groups
local -a _language_arguments
_language_arguments=(
	'analyze_entities:Use Google Cloud Natural Language API to identify entities in text.'
	'analyze_entity_sentiment:Use Google Cloud Natural Language API to identify entity-level sentiment.'
	'analyze_sentiment:Use Google Cloud Natural Language API to identify sentiments in a text.'
	'analyze_syntax:Use Google Cloud Natural Language API to identify linguistic information.'
	'classify_text:Classifies input document into categories.'
)

# groups

__auto-language ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Use the Google Cloud Natural Language API to analyze text." _language_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (analyze_entities)
      __auto-analyze_entities
      ;;
      (analyze_entity_sentiment)
      __auto-analyze_entity_sentiment
      ;;
      (analyze_sentiment)
      __auto-analyze_sentiment
      ;;
      (analyze_syntax)
      __auto-analyze_syntax
      ;;
      (classify_text)
      __auto-classify_text
      ;;
    esac
    ;;
	esac
}

local -a _speech_arguments
_speech_arguments=(
	'operations:Interact with Google Cloud Speech operations.'
	'recognize:Get transcripts of short (less than 60 seconds) audio from an audio file.'
	'recognize_long_running:Get transcripts of longer audio from an audio file.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:Get description of a long-running speech recognition operation.'
	'wait:Poll long-running speech recognition operation until it completes.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Interact with Google Cloud Speech operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-speech ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Use Google Cloud Speech to get transcripts of audio." _speech_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (recognize)
      __auto-recognize
      ;;
      (recognize_long_running)
      __auto-recognize_long_running
      ;;
    esac
    ;;
	esac
}

local -a _video_arguments
_video_arguments=(
	'operations:Command group for working with Cloud Video Intelligence operations.'
	'detect_explicit_content:Detect explicit content in videos.'
	'detect_labels:Detect general labels for videos.'
	'detect_shot_changes:Detect shot changes in videos.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:Get description of a long-running video analysis operation.'
	'wait:Poll long-running video analysis operation until it completes.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Command group for working with Cloud Video Intelligence operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-video ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Cloud ML Video-Intelligence command groups." _video_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (detect_explicit_content)
      __auto-detect_explicit_content
      ;;
      (detect_labels)
      __auto-detect_labels
      ;;
      (detect_shot_changes)
      __auto-detect_shot_changes
      ;;
    esac
    ;;
	esac
}

local -a _vision_arguments
_vision_arguments=(
	'detect_document:Detect dense text in an image.'
	'detect_faces:Detect faces within an image.'
	'detect_image_properties:Detect general attributes of an image.'
	'detect_labels:Detect broad sets of categories within an image.'
	'detect_landmarks:Detect popular natural and man-made structures within an image.'
	'detect_logos:Detect popular product logos within an image.'
	'detect_safe_search:Detect explicit content in an image.'
	'detect_text:Detect and extract text within an image.'
	'detect_web:Detect entities in an image from similar images on the web.'
	'suggest_crop:Suggest a bounding box in an image.'
)

# groups

__auto-vision ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Use Google Cloud Vision to analyze images." _vision_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (detect_document)
      __auto-detect_document
      ;;
      (detect_faces)
      __auto-detect_faces
      ;;
      (detect_image_properties)
      __auto-detect_image_properties
      ;;
      (detect_labels)
      __auto-detect_labels
      ;;
      (detect_landmarks)
      __auto-detect_landmarks
      ;;
      (detect_logos)
      __auto-detect_logos
      ;;
      (detect_safe_search)
      __auto-detect_safe_search
      ;;
      (detect_text)
      __auto-detect_text
      ;;
      (detect_web)
      __auto-detect_web
      ;;
      (suggest_crop)
      __auto-suggest_crop
      ;;
    esac
    ;;
	esac
}


__auto-ml ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Use Google Cloud machine learning capabilities." _ml_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (language)
      __auto-language
      ;;
      (speech)
      __auto-speech
      ;;
      (video)
      __auto-video
      ;;
      (vision)
      __auto-vision
      ;;
    esac
    ;;
	esac
}

local -a _ml_engine_arguments
_ml_engine_arguments=(
	'jobs:Cloud ML Engine Jobs commands.'
	'local:Cloud ML Engine Local commands.'
	'models:Cloud ML Engine Models commands.'
	'operations:Manage Cloud ML Engine operations.'
	'versions:Cloud ML Engine Versions commands.'
	'predict:Run Cloud ML Engine online prediction.'
)

# groups
local -a _jobs_arguments
_jobs_arguments=(
	'submit:Cloud ML Engine Jobs submit commands.'
	'cancel:Cancel a running Cloud ML Engine job.'
	'describe:Describe a Cloud ML Engine job.'
	'list:List existing Cloud ML Engine jobs.'
	'stream_logs:Show logs from a running Cloud ML Engine job.'
	'update:Update a Cloud ML Engine jobs.'
)

# groups
local -a _submit_arguments
_submit_arguments=(
	'prediction:Start a Cloud ML Engine batch prediction job.'
	'training:Submit a Cloud Machine Learning training job.'
)

# groups

__auto-submit ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Cloud ML Engine Jobs submit commands." _submit_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (prediction)
      __auto-prediction
      ;;
      (training)
      __auto-training
      ;;
    esac
    ;;
	esac
}


__auto-jobs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Cloud ML Engine Jobs commands." _jobs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (submit)
      __auto-submit
      ;;
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (stream_logs)
      __auto-stream_logs
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _local_arguments
_local_arguments=(
	'predict:Run prediction locally.'
	'train:Run a Cloud ML Engine training job locally.'
)

# groups

__auto-local ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Cloud ML Engine Local commands." _local_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (predict)
      __auto-predict
      ;;
      (train)
      __auto-train
      ;;
    esac
    ;;
	esac
}

local -a _models_arguments
_models_arguments=(
	'add_iam_policy_binding:Add IAM policy binding to a model.'
	'create:Create a new Cloud ML Engine model.'
	'delete:Delete an existing Cloud ML Engine model.'
	'describe:Describe an existing Cloud ML Engine model.'
	'get_iam_policy:Get the IAM policy for a model.'
	'list:List existing Cloud ML Engine models.'
	'remove_iam_policy_binding:Remove a policy binding from a model.'
	'set_iam_policy:Set the IAM policy for a model.'
	'update:Update an existing Cloud ML Engine model.'
)

# groups

__auto-models ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Cloud ML Engine Models commands." _models_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:Cancel a Cloud ML Engine operation.'
	'delete:Delete a Cloud ML Engine operation.'
	'describe:Describe a Cloud ML Engine operation.'
	'list:List existing Cloud ML Engine jobs.'
	'wait:Wait for a Cloud ML Engine operation to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud ML Engine operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _versions_arguments
_versions_arguments=(
	'create:Create a new Cloud ML Engine version.'
	'delete:Delete an existing Cloud ML Engine version.'
	'describe:Describe an existing Cloud ML Engine version.'
	'list:List existing Cloud ML Engine versions.'
	'set_default:Sets an existing Cloud ML Engine version as the default for its model.'
	'update:Update a Cloud ML Engine version.'
)

# groups

__auto-versions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Cloud ML Engine Versions commands." _versions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (set_default)
      __auto-set_default
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}


__auto-ml_engine ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud ML Engine jobs and models." _ml_engine_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (jobs)
      __auto-jobs
      ;;
      (local)
      __auto-local
      ;;
      (models)
      __auto-models
      ;;
      (operations)
      __auto-operations
      ;;
      (versions)
      __auto-versions
      ;;
      (predict)
      __auto-predict
      ;;
    esac
    ;;
	esac
}

local -a _organizations_arguments
_organizations_arguments=(
	'add_iam_policy_binding:Add IAM policy binding for a organization.'
	'describe:Show metadata for an organization.'
	'get_iam_policy:Get IAM policy for an organization.'
	'list:List organizations accessible by the active account.'
	'remove_iam_policy_binding:Remove IAM policy binding for a organization.'
	'set_iam_policy:Set IAM policy for an organization.'
)

# groups

__auto-organizations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage Google Cloud Platform Organizations." _organizations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _projects_arguments
_projects_arguments=(
	'add_iam_policy_binding:Add IAM policy binding for a project.'
	'create:Create a new project.'
	'delete:Delete a project.'
	'describe:Show metadata for a project.'
	'get_iam_policy:Get IAM policy for a project.'
	'list:List projects accessible by the active account.'
	'remove_iam_policy_binding:Remove IAM policy binding for a project.'
	'set_iam_policy:Set IAM policy for a project.'
	'undelete:Undelete a project.'
	'update:Update the name of a project.'
)

# groups

__auto-projects ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Create and manage project access policies." _projects_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (undelete)
      __auto-undelete
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _pubsub_arguments
_pubsub_arguments=(
	'subscriptions:Manage Cloud Pubsub subscriptions.'
	'topics:Manage Cloud Pubsub topics.'
)

# groups
local -a _subscriptions_arguments
_subscriptions_arguments=(
	'ack:Acknowledges one or more messages on the specified subscription.'
	'create:Creates one or more Cloud Pub/Sub subscriptions.'
	'delete:Deletes one or more Cloud Pub/Sub subscriptions.'
	'describe:Describes a Cloud Pub/Sub subscription.'
	'list:Lists Cloud Pub/Sub subscriptions.'
	'modify_message_ack_deadline:Modifies the ACK deadline for a specific Cloud Pub/Sub message.'
	'modify_push_config:Modifies the push configuration of a Cloud Pub/Sub subscription.'
	'pull:Pulls one or more Cloud Pub/Sub messages from a subscription.'
)

# groups

__auto-subscriptions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Pubsub subscriptions." _subscriptions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (ack)
      __auto-ack
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (modify_message_ack_deadline)
      __auto-modify_message_ack_deadline
      ;;
      (modify_push_config)
      __auto-modify_push_config
      ;;
      (pull)
      __auto-pull
      ;;
    esac
    ;;
	esac
}

local -a _topics_arguments
_topics_arguments=(
	'create:Creates one or more Cloud Pub/Sub topics.'
	'delete:Deletes one or more Cloud Pub/Sub topics.'
	'describe:Describes a Cloud Pub/Sub topic.'
	'list:Lists Cloud Pub/Sub topics within a project.'
	'list_subscriptions:Lists Cloud Pub/Sub subscriptions from a given topic.'
	'publish:Publishes a message to the specified topic.'
)

# groups

__auto-topics ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Pubsub topics." _topics_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (list_subscriptions)
      __auto-list_subscriptions
      ;;
      (publish)
      __auto-publish
      ;;
    esac
    ;;
	esac
}


__auto-pubsub ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Pub/Sub topics and subscriptions." _pubsub_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (subscriptions)
      __auto-subscriptions
      ;;
      (topics)
      __auto-topics
      ;;
    esac
    ;;
	esac
}

local -a _redis_arguments
_redis_arguments=(
	'instances:Manage Cloud Memorystore Redis instances.'
	'operations:Manage Cloud Memorystore Redis operations.'
	'regions:Manage Cloud Memorystore Redis regions.'
	'zones:Manage Cloud Memorystore Redis zones.'
)

# groups
local -a _instances_arguments
_instances_arguments=(
	'create:Create a Memorystore Redis instance.'
	'delete:Delete a Redis instance.'
	'describe:Show metadata for a Memorystore Redis instance.'
	'list:List Memorystore Redis instances.'
	'update:Update Memorystore Redis instances.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Memorystore Redis instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:Show metadata for a Memorystore Redis operation.'
	'list:List Memorystore Redis operations.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Memorystore Redis operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _regions_arguments
_regions_arguments=(
	'describe:Show metadata for a Memorystore Redis region.'
	'list:List Memorystore Redis regions.'
)

# groups

__auto-regions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Memorystore Redis regions." _regions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _zones_arguments
_zones_arguments=(
	'list:List Memorystore Redis zones.'
)

# groups

__auto-zones ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Memorystore Redis zones." _zones_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-redis ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Memorystore Redis resources." _redis_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (instances)
      __auto-instances
      ;;
      (operations)
      __auto-operations
      ;;
      (regions)
      __auto-regions
      ;;
      (zones)
      __auto-zones
      ;;
    esac
    ;;
	esac
}

local -a _services_arguments
_services_arguments=(
	'operations:Manage Operation for various services.'
	'disable:Disable a service for consumption for a project.'
	'enable:Enables a service for consumption for a project.'
	'list:List services for a project.'
)

# groups
local -a _operations_arguments
_operations_arguments=(
	'describe:Describes an operation resource for a given operation name.'
	'list:(DEPRECATED) List operations for a project.'
	'wait:Waits for an operation to complete for a given operation name.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Operation for various services." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}


__auto-services ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "List, enable and disable APIs and services." _services_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (operations)
      __auto-operations
      ;;
      (disable)
      __auto-disable
      ;;
      (enable)
      __auto-enable
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _source_arguments
_source_arguments=(
	'repos:Manage cloud source repositories.'
)

# groups
local -a _repos_arguments
_repos_arguments=(
	'clone:Clone a cloud source repository.'
	'create:Create a cloud source repository.'
	'delete:Delete a cloud source repository.'
	'describe:Describe a cloud source repository.'
	'get_iam_policy:Get the IAM policy for the named cloud source repository.'
	'list:List the repositories the currently active project.'
	'set_iam_policy:Set the IAM policy for the named repository.'
)

# groups

__auto-repos ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage cloud source repositories." _repos_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clone)
      __auto-clone
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}


__auto-source ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Cloud git repository commands." _source_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (repos)
      __auto-repos
      ;;
    esac
    ;;
	esac
}

local -a _spanner_arguments
_spanner_arguments=(
	'databases:Manage Cloud Spanner databases.'
	'instance_configs:Manage Cloud Spanner instance configs.'
	'instances:Manage Cloud Spanner instances.'
	'operations:Manage Cloud Spanner operations.'
)

# groups
local -a _databases_arguments
_databases_arguments=(
	'ddl:Manage the DDL for Cloud Spanner databases.'
	'sessions:Manage the sessions for Cloud Spanner databases.'
	'add_iam_policy_binding:Add an IAM policy binding to a Cloud Spanner database.'
	'create:Create a Cloud Spanner database.'
	'delete:Delete a Cloud Spanner database.'
	'describe:Describe a Cloud Spanner database.'
	'execute_sql:Executes a read-only SQL query against a Cloud Spanner database.'
	'get_iam_policy:Get the IAM policy for a Cloud Spanner database.'
	'list:List the Cloud Spanner databases contained within the given instance.'
	'remove_iam_policy_binding:Remove an IAM policy binding from a Cloud Spanner database.'
	'set_iam_policy:Set the IAM policy for a Cloud Spanner database.'
)

# groups
local -a _ddl_arguments
_ddl_arguments=(
	'describe:Describe the DDL for a Cloud Spanner database.'
	'update:Update the DDL for a Cloud Spanner database.'
)

# groups

__auto-ddl ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage the DDL for Cloud Spanner databases." _ddl_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _sessions_arguments
_sessions_arguments=(
	'delete:Delete a Cloud Spanner session.'
	'list:List the Cloud Spanner sessions contained within the given database.'
)

# groups

__auto-sessions ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage the sessions for Cloud Spanner databases." _sessions_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-databases ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Spanner databases." _databases_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (ddl)
      __auto-ddl
      ;;
      (sessions)
      __auto-sessions
      ;;
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (execute_sql)
      __auto-execute_sql
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
    esac
    ;;
	esac
}

local -a _instance_configs_arguments
_instance_configs_arguments=(
	'describe:Describe a Cloud Spanner instance config.'
	'list:List the available Cloud Spanner instance configs.'
)

# groups

__auto-instance_configs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Spanner instance configs." _instance_configs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'add_iam_policy_binding:Add an IAM policy binding to a Cloud Spanner instance.'
	'create:Create a Cloud Spanner instance.'
	'delete:Delete a Cloud Spanner instance.'
	'describe:Describe a Cloud Spanner instance.'
	'get_iam_policy:Get the IAM policy for a Cloud Spanner instance.'
	'list:List the Cloud Spanner instances in this project.'
	'remove_iam_policy_binding:Remove an IAM policy binding from a Cloud Spanner instance.'
	'set_iam_policy:Set the IAM policy for a Cloud Spanner instance.'
	'update:Update a Cloud Spanner instance.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Spanner instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (add_iam_policy_binding)
      __auto-add_iam_policy_binding
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (get_iam_policy)
      __auto-get_iam_policy
      ;;
      (list)
      __auto-list
      ;;
      (remove_iam_policy_binding)
      __auto-remove_iam_policy_binding
      ;;
      (set_iam_policy)
      __auto-set_iam_policy
      ;;
      (update)
      __auto-update
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'cancel:Cancel a Cloud Spanner operation.'
	'describe:Describe a Cloud Spanner operation.'
	'list:List the Cloud Spanner operations on the given instance or database.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud Spanner operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (cancel)
      __auto-cancel
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-spanner ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Command groups for Cloud Spanner." _spanner_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (databases)
      __auto-databases
      ;;
      (instance_configs)
      __auto-instance_configs
      ;;
      (instances)
      __auto-instances
      ;;
      (operations)
      __auto-operations
      ;;
    esac
    ;;
	esac
}

local -a _sql_arguments
_sql_arguments=(
	'backups:Provide commands for working with backups of Cloud SQL instances.'
	'databases:Provide commands for managing databases of Cloud SQL instances.'
	'export:Provide commands to export Cloud SQL instances.'
	'flags:Provide a command to list flags.'
	'import:Provides commands to import Cloud SQL instances.'
	'instances:Provide commands for managing Cloud SQL instances.'
	'operations:Provide commands for working with Cloud SQL instance operations.'
	'ssl:Provide commands for managing SSL certificates of Cloud SQL instances.'
	'ssl_certs:(DEPRECATED) Provide commands for managing SSL certificates of
Cloud SQL instances.'
	'tiers:Provide a command to list tiers.'
	'users:Provide commands for managing Cloud SQL users.'
	'connect:Connects to a Cloud SQL instance.'
)

# groups
local -a _backups_arguments
_backups_arguments=(
	'create:Creates a backup of a Cloud SQL instance.'
	'delete:Delete a backup of a Cloud SQL instance.'
	'describe:Retrieves information about a backup.'
	'list:Lists all backups associated with a given instance.'
	'restore:Restores a backup of a Cloud SQL instance.'
)

# groups

__auto-backups ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide commands for working with backups of Cloud SQL instances." _backups_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (restore)
      __auto-restore
      ;;
    esac
    ;;
	esac
}

local -a _databases_arguments
_databases_arguments=(
	'create:Creates a database for a Cloud SQL instance.'
	'delete:Deletes a Cloud SQL database.'
	'describe:Displays configuration and metadata about a Cloud SQL database.'
	'list:Lists databases for a Cloud SQL instance.'
	'patch:Patches the settings of a Cloud SQL database.'
)

# groups

__auto-databases ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide commands for managing databases of Cloud SQL instances." _databases_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (patch)
      __auto-patch
      ;;
    esac
    ;;
	esac
}

local -a _export_arguments
_export_arguments=(
	'csv:Exports data from a Cloud SQL instance to a CSV file.'
	'sql:Exports data from a Cloud SQL instance to a SQL file.'
)

# groups

__auto-export ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide commands to export Cloud SQL instances." _export_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (csv)
      __auto-csv
      ;;
      (sql)
      __auto-sql
      ;;
    esac
    ;;
	esac
}

local -a _flags_arguments
_flags_arguments=(
	'list:List customizable flags for Google Cloud SQL instances.'
)

# groups

__auto-flags ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide a command to list flags." _flags_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _import_arguments
_import_arguments=(
	'csv:Imports data into a Cloud SQL instance from a CSV file.'
	'sql:Imports data into a Cloud SQL instance from a SQL dump file.'
)

# groups

__auto-import ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provides commands to import Cloud SQL instances." _import_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (csv)
      __auto-csv
      ;;
      (sql)
      __auto-sql
      ;;
    esac
    ;;
	esac
}

local -a _instances_arguments
_instances_arguments=(
	'clone:Clones a Cloud SQL instance.'
	'create:Creates a new Cloud SQL instance.'
	'delete:Deletes a Cloud SQL instance.'
	'describe:Displays configuration and metadata about a Cloud SQL instance.'
	'export:(DEPRECATED) Exports data from a Cloud SQL instance.'
	'failover:Causes a high-availability Cloud SQL instance to failover.'
	'import:(DEPRECATED) Imports data into a Cloud SQL instance from Google
Cloud Storage.'
	'list:Lists Cloud SQL instances in a given project.'
	'patch:Updates the settings of a Cloud SQL instance.'
	'promote_replica:Promotes Cloud SQL read replica to a stand-alone instance.'
	'reset_ssl_config:Deletes all client certificates and generates a new server certificate.'
	'restart:Restarts a Cloud SQL instance.'
	'restore_backup:Restores a backup of a Cloud SQL instance.'
)

# groups

__auto-instances ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide commands for managing Cloud SQL instances." _instances_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (clone)
      __auto-clone
      ;;
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (export)
      __auto-export
      ;;
      (failover)
      __auto-failover
      ;;
      (import)
      __auto-import
      ;;
      (list)
      __auto-list
      ;;
      (patch)
      __auto-patch
      ;;
      (promote_replica)
      __auto-promote_replica
      ;;
      (reset_ssl_config)
      __auto-reset_ssl_config
      ;;
      (restart)
      __auto-restart
      ;;
      (restore_backup)
      __auto-restore_backup
      ;;
    esac
    ;;
	esac
}

local -a _operations_arguments
_operations_arguments=(
	'describe:Retrieves information about a Cloud SQL instance operation.'
	'list:Lists all instance operations for the given Cloud SQL instance.'
	'wait:Waits for one or more operations to complete.'
)

# groups

__auto-operations ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide commands for working with Cloud SQL instance operations." _operations_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
      (wait)
      __auto-wait
      ;;
    esac
    ;;
	esac
}

local -a _ssl_arguments
_ssl_arguments=(
	'client_certs:Provide commands for managing client certificates of Cloud SQL instances.'
)

# groups
local -a _client_certs_arguments
_client_certs_arguments=(
	'create:Create a client certificate for a Cloud SQL instance.'
	'delete:Delete a client certificate for a Cloud SQL instance.'
	'describe:Retrieve information about a client cert for a Cloud SQL instance.'
	'list:List all client certs for a Cloud SQL instance.'
)

# groups

__auto-client_certs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide commands for managing client certificates of Cloud SQL instances." _client_certs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}


__auto-ssl ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide commands for managing SSL certificates of Cloud SQL instances." _ssl_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (client_certs)
      __auto-client_certs
      ;;
    esac
    ;;
	esac
}

local -a _ssl_certs_arguments
_ssl_certs_arguments=(
	'create:(DEPRECATED) Creates an SSL certificate for a Cloud SQL instance.'
	'delete:(DEPRECATED) Deletes an SSL certificate for a Cloud SQL instance.'
	'describe:(DEPRECATED) Retrieves information about an SSL cert for a Cloud
SQL instance.'
	'list:(DEPRECATED) Lists all SSL certs for a Cloud SQL instance.'
)

# groups

__auto-ssl_certs ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "(DEPRECATED) Provide commands for managing SSL certificates of
Cloud SQL instances." _ssl_certs_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (describe)
      __auto-describe
      ;;
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _tiers_arguments
_tiers_arguments=(
	'list:Lists all available service tiers for Google Cloud SQL.'
)

# groups

__auto-tiers ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide a command to list tiers." _tiers_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (list)
      __auto-list
      ;;
    esac
    ;;
	esac
}

local -a _users_arguments
_users_arguments=(
	'create:Creates a user in a given instance.'
	'delete:Deletes a Cloud SQL user in a given instance.'
	'list:Lists Cloud SQL users in a given instance.'
	'set_password:Changes a user&#39;s password in a given instance.'
)

# groups

__auto-users ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Provide commands for managing Cloud SQL users." _users_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (create)
      __auto-create
      ;;
      (delete)
      __auto-delete
      ;;
      (list)
      __auto-list
      ;;
      (set_password)
      __auto-set_password
      ;;
    esac
    ;;
	esac
}


__auto-sql ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "Manage Cloud SQL databases." _sql_arguments
    ;;
    (options)
    # subcommands
    case $line[1] in
      (backups)
      __auto-backups
      ;;
      (databases)
      __auto-databases
      ;;
      (export)
      __auto-export
      ;;
      (flags)
      __auto-flags
      ;;
      (import)
      __auto-import
      ;;
      (instances)
      __auto-instances
      ;;
      (operations)
      __auto-operations
      ;;
      (ssl)
      __auto-ssl
      ;;
      (ssl_certs)
      __auto-ssl_certs
      ;;
      (tiers)
      __auto-tiers
      ;;
      (users)
      __auto-users
      ;;
      (connect)
      __auto-connect
      ;;
    esac
    ;;
	esac
}

local -a _topic_arguments
_topic_arguments=(
)

# groups

__auto-topic ()
{
  local expl
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "gcloud supplementary help." _topic_arguments
    ;;
	esac
}


## Top-level completion function
local expl
local curcontext="$curcontext" state line
local -A opt_args

_arguments -C \
  $common_ops \
  ':command:->command' \
  '*::options:->options'

case $state in
  (command)
    _describe -t commands "gcloud bla bla bla" _first_arguments
  ;;

  (options)
    # subcommands
    case $line[1] in
      (alpha)
      __auto-alpha
      ;;
      (app)
      __auto-app
      ;;
      (auth)
      __auto-auth
      ;;
      (beta)
      __auto-beta
      ;;
      (bigtable)
      __auto-bigtable
      ;;
      (builds)
      __auto-builds
      ;;
      (components)
      __auto-components
      ;;
      (composer)
      __auto-composer
      ;;
      (compute)
      __auto-compute
      ;;
      (config)
      __auto-config
      ;;
      (container)
      __auto-container
      ;;
      (dataflow)
      __auto-dataflow
      ;;
      (dataproc)
      __auto-dataproc
      ;;
      (datastore)
      __auto-datastore
      ;;
      (debug)
      __auto-debug
      ;;
      (deployment_manager)
      __auto-deployment_manager
      ;;
      (dns)
      __auto-dns
      ;;
      (domains)
      __auto-domains
      ;;
      (endpoints)
      __auto-endpoints
      ;;
      (firebase)
      __auto-firebase
      ;;
      (functions)
      __auto-functions
      ;;
      (iam)
      __auto-iam
      ;;
      (iot)
      __auto-iot
      ;;
      (kms)
      __auto-kms
      ;;
      (logging)
      __auto-logging
      ;;
      (ml)
      __auto-ml
      ;;
      (ml_engine)
      __auto-ml_engine
      ;;
      (organizations)
      __auto-organizations
      ;;
      (projects)
      __auto-projects
      ;;
      (pubsub)
      __auto-pubsub
      ;;
      (redis)
      __auto-redis
      ;;
      (services)
      __auto-services
      ;;
      (source)
      __auto-source
      ;;
      (spanner)
      __auto-spanner
      ;;
      (sql)
      __auto-sql
      ;;
      (topic)
      __auto-topic
      ;;
    esac
  ;;
esac

return 0

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
